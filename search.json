[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Elegant and informative maps with tmap\n",
    "section": "",
    "text": "Welcome\nThis is the online home of Elegant and informative maps with tmap, a work-in-progress book on geospatial data visualization with the R-package tmap.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#how-to-contribute",
    "href": "index.html#how-to-contribute",
    "title": "Elegant and informative maps with tmap\n",
    "section": "How to contribute?",
    "text": "How to contribute?\nWe encourage contributions on any part of the book, including:\n\nImprovements to the text, e.g., clarifying unclear sentences, fixing typos\nChanges to the code\nSuggestions on content (see the project’s issue tracker)",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#additional-information",
    "href": "index.html#additional-information",
    "title": "Elegant and informative maps with tmap\n",
    "section": "Additional information",
    "text": "Additional information\nThis work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International License.\n\n\nCC BY-NC-ND 4.0\n\nThe code samples in this book are licensed under a Creative Commons CC0 1.0 Universal (CC0 1.0) Public Domain Dedication.\n\n\nCC0 1.0\n\nThis version of the book was built on GH Actions on 2025-06-14.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "XX-intro.html",
    "href": "XX-intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 What is tmap?\nThe short answer is that tmap is an R package for the visualization of spatial data. The slightly longer answer is that tmap allows users to explore, analyze, and present spatial data in an intuitive way. In this book, you will find the long answer.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "XX-intro.html#thematic-maps",
    "href": "XX-intro.html#thematic-maps",
    "title": "1  Introduction",
    "section": "\n1.2 Thematic maps",
    "text": "1.2 Thematic maps",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "XX-geodata.html",
    "href": "XX-geodata.html",
    "title": "2  Spatial data in R",
    "section": "",
    "text": "2.1 Introduction\nVector and raster data models are two basic models used to represent spatial data. These spatial data models are closely related to map making, with each model having its own pros and cons.    This chapter stars by describing several popular spatial data models (Section 2.2). Each data model is introduced, explained how it is built, and how it is stored using different file formats. Next, this chapter presents how these different data models are implemented in R (Section 2.3). It includes showing how to read different spatial data formats, how to understand spatial R objects, and where to find more information about preprocessing spatial data. Finally, it focuses on the map projections (Section 2.4). This section gives a background on why do we need map projections and how to translate spatial data from an ellipsoid into a flat surface or computer screen. It also explains basic terms and gives an overview of map projections.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Spatial data in R</span>"
    ]
  },
  {
    "objectID": "XX-geodata.html#sec-data-models",
    "href": "XX-geodata.html#sec-data-models",
    "title": "2  Spatial data in R",
    "section": "\n2.2 Data models",
    "text": "2.2 Data models\nTraditionally, spatial data is described by two basic data models: vector data model aimed at (Section 2.2.1) representing the world using points, lines, and polygons, and raster data model focused on representing surfaces (Section 2.2.2). Additionally, now we have an abundance of available spatial data and a variety of ways to obtain it. It includes having many district variables and repeated measurements for the same area. Therefore, we also present the concept of spatial data cubes (Section 2.2.3).\n\n2.2.1 Vector data model\n The vector data model represent the world as a set of spatial geometries with non-spatial attributes (Figure 2.1). The role of geometry is to describe the location and shape of spatial objects. Attributes, on the other hand, are used to store the properties of the data.\n There are three basic types of geometries: points, lines, and polygons, all of them are made up of coordinates (left part of Figure 2.1). A point is represented by a pair of coordinates, usually described as X and Y, allowing for locating this point in some space. X and Y could be unitless, in degrees, or in some measure units, such as meters (extended discussion on coordinates and related topics is in section Section 2.4). Points can represent features on different spatial scales, from a GPS position, location of a bench in a park, to a city on a small scale map. They are also used to express abstract features, such as locations of map labels. Properties of points can be expressed on maps by different point sizes, colors, or shapes. A line extends the idea of a point. It consists of several points with coordinates (called vertices) that are arranged in some order. Consecutive points are connected by straight lines. Therefore, a straight spatial line consists of two points (two pairs of coordinates), while complex spatial lines could be created based on a large number of points. It gives the illusion that the line is curved. Lines are used to representing linear features, such as roads, rivers, boundaries, footpaths, etc. In this case, we can express line features’ attributes using either lines’ color or their widths.   A polygon is again a set of ordered points (vertices) connected by straight lines. Its only difference from the line is that the first and the last point in a polygon has the same coordinates, and thus close the object.  The polygon representation is used to represent shapes and locations of different objects, from a lake or a patch of vegetation, through a building or a city block, to some administrative units. Polygons also have one unique feature - they could have holes. A polygon hole represents an area inside of the polygon but does not belong to it. For example, a lake with an island can be depicted as a polygon with a hole. The values of polygons’ attributes can be represented by the areas (fill) colors.\n The second part of the vector data model relates to non-spatial attributes (right part of Figure 2.1). Attributes are usually stored as a table, in which each column depicts some property, such as an identification number, a name of a feature, or a value of some characteristic. Each row, on the other hand, relates to a single spatial geometry.\n\n\n\n\n\n\n\nFigure 2.1: Instances of spatial vector data model: POINTS, LINES, and POLYGONS.\n\n\n\n\n The above ideas could be implemented in many ways.  Currently, the Simple Feature Access seems to be the most widely used standard. In it, a feature is every object or concept that have spatial location or extent.\nSimple feature standard makes a clear distinction between single- and multi-element features. We can have a POINT feature and a MULTIPOINT feature, and similarly LINESTRING and MULTILINESTRING, and POLYGON and MULTIPOLYGON. The main difference between single element features (such as POINT or POLYGON) and multi-element features (such as MULTIPOINT or MULTIPOLYGON) can be clearly seen by looking at attribute tables. For example, six points stored as POINT features fill six separate rows, while six points stored as just one MULTIPOINT feature occupy just one row.  Examples of single- and multi-element features can be seen in Figure 2.1. The top example shows point data represented as MULTIPOINT feature: although we have seven points (seven distinct pairs of coordinates), they are gathered into two groups, green and orange, which can be seen in the associated attribute table. The central example, on the other hand, uses single-element features, where each line geometry relates to one row in the attribute table. Finally, the bottom example again uses multi-element features, where the second feature (Country B) consist of two separate geometries. The simple feature standard also describes a number of additional geometry types, including Curve, Surface, or Triangle. Finally, GeometryCollection exists that contains all of the possible geometry types.\n\n\n A couple hundreds of file formats exist to store spatial vector data. One of the simplest ways to store spatial data is in the form of a text file (.csv) or as a spreadsheet (.xls or .xlsx). While it makes storing point data simple, with two columns representing coordinates, it is not easy to store more complex objects in this way. Text files are also not suitable for storing information about the coordinate reference system used (Section 2.4). Historically, the shapefile format (.shp) developed by the ESRI company gained a lot of interest and become the most widely supported spatial vector file format. Despite its popularity, this format has a number of shortcomings, including the need to store several files, attribute names limited to ten characters, the ability to store up to 255 attributes and files up to 2GB, and many more. A fairly recent file format, OGC GeoPackage (.gpkg), was developed as an alternative. It is a single file database free from the limitation of the shapefile format. Other popular spatial vector file formats include GeoJSON (.geojson), GPX (.gpx), and KML (.kml).  \n\n2.2.2 Raster data model\n The raster data model represents the world using a continuous grid of cells, where each cell has a single associated value (Figure 2.2). Depending on the type of values, we can distinguish continuous and categorical rasters. In continuous rasters, such as elevation or precipitation, values vary progressively. Categorical rasters, on the other hand, uses integer values to represent classes. Their examples include land cover or soil types maps. Raster data can also contain cells for which we do not know the value (Figure 2.2). For example, data for this part of the area was not collected, or these locations are outside of our area of interest.\n\n\n\n\n\n\n\n\n\n(a) Cell IDs\n\n\n\n\n\n\n\n\n\n(b) Cell values\n\n\n\n\n\n\n\n\n\n(c) A raster map\n\n\n\n\n\n\nFigure 2.2: Basic representations of the raster data model\n\n\n When we think about raster data, most of the time we are referring to regular grids (Figure 2.3). In regular grids, each cell has the same, constant size, and coordinates change from top to bottom and from left to right1.  Regular rasters can be transformed into rotated and sheared rasters (Figure 2.3). Rotated grids are the result of transforming both coordinated, \\(x\\) and \\(y\\) using the same rotation coefficients. Sheared grids are created when the rotation coefficients are not equal. Rectilinear grids, on the other hand, have orthogonal axes, but consist of rectangular cells with different sizes and shapes (Figure 2.3). In the last type of raster data grids, curvilinear grids, cells are cuboids of different sizes and shapes (Figure 2.3).\n\n\n\n\n\n\n\n\n\n\n(a) Regular\n\n\n\n\n\n\n\n\n\n(b) Rotated\n\n\n\n\n\n\n\n\n\n(c) Sheared\n\n\n\n\n\n\n\n\n\n(d) Rectilinear\n\n\n\n\n\n\n\n\n\n(e) Curvilinear\n\n\n\n\n\n\nFigure 2.3: Main types of raster data grids\n\n\nContrary to spatial vector data, a basic raster data stores just one attribute. It is, however, possible to stack together many single rasters (also known as raster layers). This allows us to store and operate on many rasters having the same dimensions at the same time. Examples of multi-layer rasters include satellite imageries or temporal rasters. Satellite imageries usually consist of many bands (layers) for different wavelengths. The most basic bands, representing the colors red, green, and blue, can be connected together to create one composite image with true colors (Figure 2.4). Temporal rasters store one attribute, but for many moments in time.  Additional information about multi-layer rasters can be also found in Section 2.2.3.\n\n\n\n\n\n\n\n\n\n(a) Red\n\n\n\n\n\n\n\n\n\n(b) Green\n\n\n\n\n\n\n\n\n\n(c) Blue\n\n\n\n\n\n\n\n\n\n(d) Composite\n\n\n\n\n\n\nFigure 2.4: Example of three satellite imagery bands: red, green, blue, and the composite image with true colors created using these three bands.\n\n\n Similarly to vector data, a large number of raster file formats exists.  Currently, the GeoTIFF format (.tif or .tiff) is one of the most popular spatial raster formats. It is an extended image TIF format that stores spatial metadata (e.g., map projection) along the values. Another popular spatial raster formats include Arc ASCII (.asc) and ERDAS Imagine (.img). \n\n2.2.3 Spatial data cubes\n Traditionally, spatial vector and raster data models refer to a unique set of locations. For example, each feature in a polygon dataset and each cell in a raster dataset refer to one specific area. However, to solve real-life problems, we need to store and operate on more complex data structures. It includes situations when we have many attributes, often for several moments in time.\n Storing multiple attributes is not a problem for the vector data model, when an attribute table can have many columns. The question is how to extend the spatial vector data model to include measurements for many times. For example, let’s consider a polygon data with many attributes representing shares of land-use types for several years (Figure 2.5). One approach would be to create a separate column for each variable in each year. Alternatively, we can have one column representing the year and one column for each attribute, however, this approach would require multiplying each geometry as many times as we have time stamps.  The third approach involves separating geometries from attributes, and where attributes for each moment are stored independently. The last idea is used in spatial vector data cubes (Section 2.3.2). An example of the spatial vector data cubes idea can be seen in Figure 2.5. It consists of two elements: a geometry (MULTIPOLYGON) of provinces of the Netherlands and an array connected to it that stores shares of land-use types for several years.\n\n\n\n\n\n\n\nFigure 2.5: Vector data cube.\n\n\n\n\n A single raster dataset can store just one variable for a given area. To store several attributes, we can connect rasters representing different attributes for the same extent, creating multi-layer rasters (Section 2.2.2). Additionally, each of the aforementioned rasters can be collected for many moments in time, adding other layers to the data.  The question here is how to efficiently store multi-layer raster data to understand what layers relate to which attribute and time. Similarly to spatial vector data cubes, we can think of separating spatial dimensions from non-spatial attributes and create spatial raster data cubes (Section 2.3.2). Figure 2.6 gives an example of a raster data cube. It consists of several single-layer rasters with the same spatial properties, such as resolution, extent, and CRS. These rasters are organized to store four-dimensions of the data: latitude, longitude, time, and attributes. It has values of three attributes for five moments in time in total.\n\n\n\n\n\n\n\nFigure 2.6: Raster data cube.\n\n\n\n\nSpatial data cubes are suitable for many real-life applications. For example, time-series of climate measurements for several stations, demographic data on a country level gathered for many years, or satellite imageries over some period of time.\n One way to create spatial data cubes is by connecting many independent vector or raster objects.  Second way is to read a spatial data cube from one of the file formats allowing for storing complex data. It includes formats such as NetCDF (.nc) and HDF (.hdf).",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Spatial data in R</span>"
    ]
  },
  {
    "objectID": "XX-geodata.html#sec-spatial-data-representations-in-r",
    "href": "XX-geodata.html#sec-spatial-data-representations-in-r",
    "title": "2  Spatial data in R",
    "section": "\n2.3 Spatial data representations in R",
    "text": "2.3 Spatial data representations in R\n R has several packages aimed to represent spatial vector data.  For more than a decade, the sp package  was a standard of vector data representation in R. However, now this package is in the maintenance mode only, and its successor, sf is recommended. The tmap package has been using sf since version 2.0.\n Several R packages can be used to represent spatial raster data, including raster and its successor terra. The raster package was used as a backbone of raster data visualization until tmap version 3.0. Nowadays, the stars package is used by tmap to operate on raster data and spatial data cubes.\nIn the two next sections, we introduce the sf package (Section 2.3.1) and the stars package (Section 2.3.2).\n\n\n\n\n2.3.1 The sf package\n \nThe sf package implements ideas behind the Simple Feature standard, which describe how to represent spatial vector data. Its main class, sf, has the form of an extended data frame, where each row is a spatial feature. In it, attributes of the vector data are stored as columns. It also has one additional column, most often named geom or geometry2. This column contains geometries in a form of well-known text (WKT), storing all of the coordinates.\n\nThe sf package can read all of the spatial data formats mentioned in Section 2.2.1 using the read_sf() function3. \n\nlibrary(sf)\nworldvector = read_sf(\"data/worldvector.gpkg\")\n\nThe new object, worldvector, has a sf class. It has 185 features (rows or geometries) and 15 fields (columns with attributes). There is also an 16th column, geom, that stores geometries of each feature. Objects of class sf also display a header containing spatial metadata. It includes geometry type, dimension (XY, XYZ, XYM, XYZM), bounding box (bbox), and information about the used Coordinate Reference System (CRS).\n\nworldvector\n\nSimple feature collection with 185 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -16331900 ymin: -8392908 xmax: 16886150 ymax: 8315884\nProjected CRS: WGS 84 / Equal Earth Greenwich\n# A tibble: 185 × 16\n   GEO   name    wb_region wb_income_region population CO2_emissions gdp_per_cap\n   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n 1 AUS   Austra… East Asi… High income        42900000       15.3          56800\n 2 AZE   Azerba… Europe &… Upper middle in…    9190000        3.94          5770\n 3 BIH   Bosnia… Europe &… Upper middle in…    1640000        6.38          6030\n 4 BGD   Bangla… South As… Lower middle in…  151000000        0.474         1200\n 5 BEL   Belgium Europe &… High income        12500000        8.32         47200\n 6 BFA   Burkin… Sub-Saha… Low income         83200000        0.162          712\n 7 BGR   Bulgar… Europe &… Upper middle in…    3590000        5.85          8650\n 8 BDI   Burundi Sub-Saha… Low income         50900000        0.0447         211\n 9 BEN   Benin   Sub-Saha… Low income         47200000        0.614          897\n10 BRN   Brunei  East Asi… High income          390000       22.2          31400\n# ℹ 175 more rows\n# ℹ 9 more variables: life_expectancy &lt;dbl&gt;, corruption_perception_index &lt;dbl&gt;,\n#   democracy_score &lt;dbl&gt;, hdi &lt;dbl&gt;, energy_use_per_cap &lt;dbl&gt;,\n#   literacy_rate &lt;dbl&gt;, demo_corr &lt;dbl&gt;, demo_corr_rank &lt;int&gt;,\n#   geom &lt;MULTIPOLYGON [m]&gt;\n\n\nThe worldvector object has MULTIPOLYGON geometry type, where each feature (row) can consist of one or more polygons. Each polygon’s vertices are represented by a pair of values (dimension: XY). Bounding box allows to quickly understand the spatial extension of the input data.  Finally, it has projected CRS named WGS 84 / Equal Earth Greenwich. You can learn more about Coordinate Reference Systems in Section 2.4. \nSpatial vector data of class sf can be also obtained using some of other R data packages.  For example, rnaturalearth allows to download world map data, osmdata imports OpenStreetMap data as sf objects, and tigris loads TIGER/Line data.  \nThe tmap package accepts spatial vector data objects from both sf and sp packages. In case of having vector objects in a different representation, they should be converted into sf objects first, before making maps. The sf package has the st_as_sf() function that translates objects of many classes, including Spatial (from the sp package), ppp, psp, and lpp (from the spatstat package), to the objects of class sf. The st_as_sf() function also allows to turn data frames into sf objects - the user needs to provide the input data frame, names of columns with coordinates, and additionally definition of the CRS of the data. For example my_sf = st_as_sf(my_df, coords = c(\"Xcolumn\", \"Ycolumn\"), crs = \"EPSG:4326\").\nIf you want to learn more about operating on sf objects, we recommend visiting the package website and vignettes at https://r-spatial.github.io/sf/ and reading the Geocomputation with R book (Lovelace, Nowosad, and Muenchow 2025). \n\n2.3.2 The stars package\n \n\nThe stars package allows for reading and processing raster data in R. This package also has support for both spatial vector and raster data cubes. Its main class, stars, is built as a list of matrices or arrays with metadata describing their dimensions. The stars package is also well integrated with sf, with many st_ functions (such as st_crs()) working also on stars objects.\n\nThe read_stars() function allow to read spatial raster data from a file4. This function requires at least one argument with a filename to be read. \n\nlibrary(stars)\nworldelevation = read_stars(\"data/worldelevation.tif\")\n\nThe new object, worldelevation, is of a stars class. It has two dimensions, x and y, and one attribute worldelevation.tif.\n\nworldelevation\n\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                    Min. 1st Qu. Median     Mean 3rd Qu. Max.   NA's\nworldelevation.tif  -412     218    608 1139.982    1941 6410 389580\ndimension(s):\n  from   to offset   delta refsys point x/y\nx    1 1080   -180  0.3333 WGS 84 FALSE [x]\ny    1  540     90 -0.3333 WGS 84 FALSE [y]\n\n\nThe worldelevation.tif attribute is a matrix, where each cell represents an elevation value. The x dimension has 1080 elements (columns), starting from a coordinate (offset) of a cell boundary of -180. Next, the coordinates of further cells increase by 0.333333 (delta) - resolution in the x dimension. The y dimension has 540 elements (rows), starting from a coordinate (offset) of a cell boundary of 90. For the y dimension, each further cell’s coordinated decreases by 0.333333 (notice the negative value of delta) - resolution in the y dimension. Both dimensions also have the same CRS - WGS 84.\nread_stars() also has several additional arguments including RasterIO, which gives control over the input data extent and resolution. For example, the below code will read just the first and second bands (results not shown).  \n\nfile_path3 = system.file(\"raster/landsat.tif\", package = \"spDataLarge\")\nx3 = read_stars(file_path3, RasterIO = list(bands = c(1, 2)))\n\nInternally, a stars object is a list of matrix or array objects with additional attributes describing spatial metadata, such as a number of columns and rows, resolution, coordinate reference system, etc. All of this information is read from the input file.\nStars objects are constructed by dimensions and attributes. Dimensions relate to what kind of objects are stored as list elements. For example, when it is a matrix then we just have two dimensions representing columns and rows. However, it is also possible to store multidimensional arrays, which allow having many additional dimensions for bands, times, etc. Attributes, on the other hand, are stored as list elements. Each attribute can relate, for example to a different variable.\nReading a simple GeoTIFF file would result in having just two dimensions and one attribute (a matrix). On the other hand, reading complex raster file formats, such as NetCDF could result in having more than two dimensions (e.g. time) and many attributes (e.g., an array with temperature, precipitation, humidity). \n\n\nBefore reading the file, the stars package checks if the input data is a curvilinear grid and what is the number of cells in the data. When the input data is small or curvilinear then the full data is read in computer memory. Otherwise, a stars proxy approach is used, where only metadata is read including pointers to where the complete data is. When we want to plot large raster data, then it is read at a lower resolution than the native one. \nThe stars package also has support for vector data cubes, where each geometry is just stored once (as a dimension), and each attribute is a matrix or an array with the number of rows equals to the number of geometries, the number of columns equals to another dimension (e.g., time), and possibly the number of array layers equals for additional dimensions.  \n\nMore information on how the stars objects are organized and how to operate on them can be found in the stars package vignettes at https://r-spatial.github.io/stars.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Spatial data in R</span>"
    ]
  },
  {
    "objectID": "XX-geodata.html#sec-crs",
    "href": "XX-geodata.html#sec-crs",
    "title": "2  Spatial data in R",
    "section": "\n2.4 Map projections (CRS)",
    "text": "2.4 Map projections (CRS)\n\n\n2.4.1 What are map projections?\n We use maps so often in everyday life that most of us probably forget that a map is just a two-dimensional representation of a three-dimensional object, namely the earth. For centuries, geographers and mathematicians wondered what the best way is to do this. Let us wonder with them for a second.\nThe world is shown as an orange below, not just to stimulate your appetite for this subject, but also since an orange peel is a good analogy for a two-dimensional map. A world map can be seen as an orange peel that is put flat on the table. The question is how to do this.\n\n\n\n\n\n\n\nFigure 2.7: How to peel an orange?\n\n\n\n\nWhen we peel the orange, ideally we want to rip the peel near areas of the earth that are less interesting. What is interesting depends on the application; for applications where land mass is more important than wetlands, it is a good idea to make the rips in the oceans. The (interrupted) Goode homolosine projection, which is shown below, embodies this idea. All continents and countries are preserved, except Antarctica and Greenland. There is also a version of the Goode homolosine projection that focuses on preserving the oceans.\n\n\n\n\n\n\n\nFigure 2.8: The (interrupted) Goode homolosine projection\n\n\n\n\nTo make the analogy between the orange peel and the surface of the earth complete, we have to assign two fictitious properties to the orange peel, namely that it is stretchable and deformable. These properties are needed in order to make a non-interrupted map, as we will see in the next sections.\n A method to flatten down the earth, for which the Goode homolosine projection shown in Figure 2.8 is an example, is called a map projection. Technically, it is also known as a coordinate reference system (CRS), which specifies the corresponding coordinate system, as well as the transformations to other map projections.\n\n2.4.2 A model of the Earth\n  The orange and the Earth have another thing in common; both are spheres, but not perfect ones. The Earth is metaphorically speaking a little fat: the circumference around the equator is 40,075 km whereas around the circumference that crosses both poles is 40,009 km.  Therefore, the earth can better be described as an ellipsoid. The same applies to an orange; every orange is a little different, but probably very few oranges are perfect spheres.\nAlthough the ellipsoid is a good mathematical model to describe the earth’s surface, keep in mind that the surface of the earth is not smooth; land mass usually lies on a higher altitude than sea level. We could potentially map each point on the surface of the earth using a three-dimensional \\((x, y, z)\\) Cartesian coordinate system with the center of the mass of the Earth being the origin (0, 0, 0). However, since this has many mathematical complications, the ellipsoid is often sufficient as a model of the surface of the earth.\n This ellipsoid model and its translation to the Earth’ surface is called a (geodetic) datum. The most popular datum is WGS84, which has been introduced in 1984 as an international standard, and has been last revised in 2004. There are many (slightly) different datums, which are often tailored for local applications. For instance, NAD83, ETRS89, and GDA94 are slightly better models for North-America, Europe, and Australia respectively. However, since WGS84 is a very good approximation of the earth as a whole, it has been widely adopted worldwide and is also used by the Global Positioning System (GPS).\n When we have specified a datum, we are able to specify geographic locations with two familiar variables, namely latitude and longitude. The latitude specifies the north-south position in degrees, where latitude = 0\\(^\\circ\\) is the equator. The latitudes for the north and south pole are 90\\(^\\circ\\) and \\(-90^\\circ\\) respectively. The longitude specifies the east-west position in degrees, where by convention, the longitude = 0\\(^\\circ\\) meridian crosses the Royal Observatory in Greenwich, UK. The Longitude range is -180\\(^\\circ\\) to 180\\(^\\circ\\), and since this is a full circle, -180\\(^\\circ\\) and \\(^\\circ\\) specify the same longitude.\n When we see the earth in its three-dimensional form, as in Figure 2.7, the latitude parallels are the horizontal lines around the earth, and the longitude meridians are the vertical lines around the earth. The set of longitude meridians and latitude parallels is also referred to as graticule. In all the figures in this section, latitude parallels are shown as gray lines for \\(-60^\\circ\\), \\(-30^\\circ\\), \\(0^\\circ\\), \\(30^\\circ\\) and \\(60^\\circ\\), and longitude meridians from \\(-180^\\circ\\) to \\(180^\\circ\\) at every \\(30^\\circ\\).\nPlease keep in mind that only a latitude and longitude are not sufficient to specify a geographic location. A datum is required. When people exchange latitude-longitude data, it is safe to assume that they implicitly have used the WGS84 datum. However, it is good practice to specify the datum explicitly.\n\n2.4.3 Platte Carrée and Web Mercator\n Let’s take a closer look at two widely used map projections, namely the plain latitude-longitude coordinate system (using the WGS84 datum) and the Web Mercator projection, which is currently the de facto standard for interactive maps. These projections are indexed as EPSG4326 and EPSG3857 respectively. EPSG is an institute that maintains a database of standard map projections.\n\n\n\n\n\n\n\n\nFigure 2.9: Latitude longitude coordinates (EPSG 4326)\n\n\n\n\nWhen we fictitiously make little holes in the orange peel at both poles, and stretch these open so wide that they have the same width as the equator, we obtain the cylinder depicted in Figure 2.9 (left). Note that the longitude lines have become straight vertical lines. When we unroll this cylinder, we obtain a map where the \\(x\\) and \\(y\\) coordinates are the longitude and latitude respectively. This CRS, which is known as EPSG4326, is shown in Figure Figure 2.9 (right).\n EPSG4326 is an unprojected CRS, since the longitude and latitude have not been transformed. With projected CRSs, the \\(x\\) and \\(y\\) coordinates refer to specific measurement units, usually meters. The projected variant of this CRS is called the Platte Carrée (EPSG4087), and is exactly the same map as shown in Figure Figure 2.9 (right), but with other \\(x\\) and \\(y\\) value ranges.\nObserve since we stretched the poles open, the area near the poles have been stretched out as well. More specifically, the closer the land is to one of the poles, the more it has been stretched out. Since the stretching direction is only horizontally, the shapes of the areas have become wider. A good example is Greenland, which is normally a ‘tall’ area (as can be seen in Figure 2.7).\n In order to fix these deformed areas, Gerardus Mercator, a Flemish geographer in the 16th century introduced a method to compensate for this by inflating the areas near the poles even more, but now only in a vertical direction. This projection is called the Mercator projection. For web applications, this projection has been slightly modified and renamed to the Web Mercator projection (EPSG3857). The cylinder and plain map that uses this projection are shown in Figure 2.10.\n\n\n\n\n\n\n\nFigure 2.10: Web Mercator projection (EPSG 3857)\n\n\n\n\nAlthough the areas near the poles have been inflated quite a lot, especially Antarctica and Greenland, the shape of the areas is more or less correct, in particular regarding small areas (which can be seen by comparing with Figure 2.7. The Mercator projection is very useful for navigational purposes, and has therefore been embraced by sailors ever since. Also today, the Web Mercator is the de facto standard for interactive maps and navigation services. However, for maps that show data the (Web) Mercator projection should be used with great caution, because the hugely inflated areas will influence how we perceive spatial data. We will discuss this in the next section.\n\n2.4.4 Types of map projections\n\n Let us go back to the original question: how can we make a two-dimensional image of our three-dimensional earth? Although there are many ways, four basic map projection types can be distinguished. These are depicted in Figure 2.11.\n\n\n\n\n\n\n\nFigure 2.11: Four types of map projections\n\n\n\n\n Examples for cylindrical projections have already been given in the previous section; both Platte Carrée and Web-Mercator are cylindrical. Another widely used cylindrical map projection is the Universal Transverse Mercator (UTM). The cylinder is not placed upright, but horizontal. There are 60 positions in which this cylinder can be placed, where in each position, the cylinder faces a longitude range of 6 degrees. In other words the UTM is not a single projection, but a series of 60 projections.\nThere are many projections which are pseudo-cylinders in the sense that the radius around the poles is smaller than around the equator. An example is the Robinson projection shown in Figure 2.12. Almost all commonly used standard World map projections are (pseudo-)cylindrical.\n\n\n\n\n\n\n\nFigure 2.12: The Robinson projection, which is pseudo-cylindrical.\n\n\n\n\n An example of a conic map projection is shown in Figure 2.13 (a). As a result of unfolding a cone on a flat surface, a gap is created. The size (angle) of this gap depends on the width of the cone. There are also pseudo-conic map projections in which some meridians (longitude lines) are curved. Conic map projections are useful for mid-latitude areas where the surfaces of the earth and the cone are almost parallel to each other.\n Planar map projections, also known as azimuthal projections, project the Earth on a disk. This can be done in several ways. This can best be explained by the position of an imaginary light source. It can be placed inside the globe, at the surface of the globe opposite to the disk, and at an infinite distance opposite to the disk. The corresponding families of projections are called gnomonic, stereographic, and orthogonal projections.\nPlanar map projections are often used for a specific country or continent. An example is the Lambert Azimuthal Equal-Area projection (EPSG3035), shown in Figure 2.13 (b), which is optimized for Europe. It can be classified as a stereographic projection, although the light beams are not straight but curved. Another example of a planar map projection is the orange shown in Figure 2.7. This is an orthogonal projection.\n\n\n\n\n\n\n\n\n\n(a) World Equidistant Conic projection\n\n\n\n\n\n\n\n\n\n(b) Lambert Azimuthal Equal-Area projection\n\n\n\n\n\n\nFigure 2.13: Examples of a conic and a planar projection.\n\n\n The (interrupted) Goode homolosine projection shown in Figure 2.8 is an example of an interrupted projection. A special class of these projections are polyhedral projections, which consists of planar faces. In Figure 2.11 a polyhedral of six faces is illustrated. There is no limit of the number of faces, as the myriahedral projections (TODO reference Van Wijck paper) illustrate.\n\n2.4.5 Which projection to choose?\n Hopefully it is clear that there is no perfect projection, since each projection has its pros and cons. Whether a projection is good for a certain application, depends on two factors. The first factor is the type of application and in particular which map projection properties are useful or even required for that application. For instance, navigation requires other map projection properties than statistical maps. The second factor is the area of interest. Is the whole World visualized or only a part, and in the latter case, which part? In this section, guidelines are provided to choose a proper projection based on those two aspects.\nBefore we go deeper into selecting a projection, it is worth noting that for many countries and continents, government agencies already have chosen projections to be the standard for mapping spatial data. For instance, a standard for Europe, which is used by Eurostat (the statistical agency of the European Union), is the Lambert Azimuthal Equal-Area projection shown in Figure 2.13 (b). If the area of interest has such a standard, it is recommended to use it, because it can be safely assumed that this standard is a proper projection, and moreover, it makes cooperation and communication with other parties easier. However, be aware of the limitations that this particular projection may have, and that there may be better alternatives out there.\nMap projection properties\n The type of application is important for the choice of a map projection. However, it would be quite tedious to list all possible applications and provide projection recommendations for each of them. Instead, we focus on four map projection properties. The key step is to find out which of these properties are useful or even required for the target application. The four properties are listed in the following table.\n\n\n\n\n    \n\n      \n\nMap projection properties.\n        \n\n\nProperty\n                  Conformal\n                  Equal area\n                  Equidistant\n                  Azimuthal\n                \n\nPreserves\n                  Local angle (shape)\n                  Area\n                  Distance\n                  Direction\n                \n\nApplications\n                  Navigation, climate\n                  Statistics\n                  Geology\n                  Geology\n                \n\nExamples (cyclindrical)\n                  Mercator\n                  Gall-Peters, Eckert IV\n                  Equirectangular\n                  none\n                \n\nExamples (conic)\n                  Lambert conformal conic\n                  Albers conic\n                  Equidistant conic\n                  none\n                \n\nExamples (planar)\n                  Stereographic\n                  Lambert azimuthal equal-area\n                  Azimuthal equidistant\n                  Stereographic, Lambert azimuthal equal-area\n                \n\nExamples (interrupted)\n                  Myriahedral\n                  Goode homolosine, Myriahedral\n                  none\n                  none\n                \n\n\n\n\n\n\n A conformal projection means that local angles are preserved. In practice, that means that for instance a map of a crossroad preserves the angles between the roads. Therefore, this property is required for navigational purposes. As a consequence that local angles are preserved, local shapes are also preserved. That means that an small island will be drawn on a map in its true shape, as seen from the sky perpendicular above it. The Web Mercator shown in Figure 2.10 satisfies this property; the closer an area is to one of the poles, the more it is enlarged, but since this is done in both dimensions (latitude and longitude), local shapes are preserved.\n A map projection is called equal-area if the areas are proportional to the true areas. This is strongly recommended for maps that show statistics in order to prevent perceptual bias. Figure 2.14 shows two World maps of population density per country, one in the Web Mercator projection and the other in Eckert IV projection. The perception of World population is different in these maps; in (a) the vast lands on low-populated areas seem to be Canada, Greenland, and Russia, whereas in (b) also North Africa and Australia emerge as vast low-populated areas.\n\n\n\n\n\n\n\n\n\n(a) Web Mercator is not equal-area\n\n\n\n\n\n\n\n\n\n(b) Eckert IV is equal-area\n\n\n\n\n\n\nFigure 2.14: Comparison of Web Mercator and Eckert IV projections.\n\n\n The other two map projection properties are related to one central point on the map. A map projection is called equidistant if the distances to any other point in the map are preserved, and azimuthal if the directions to any other point are preserved. These properties are in particular useful in the field of geology. One example is a seismic map around the epicenter of a recent earthquake, where it is important to how far and in which direction the vibrations are spreading.\n A map projection can satisfy at most two of these properties. Many map projection do not satisfy any property but are intended as a compromise. An example is the Robinson projection, shown in Figure 2.12.\nArea of interest\n The next aspect that is important for the choice of a map projection is the area of interest. In general, the larger the area, the more concessions have to be made, since the larger the area, the more difficult it is to make a two-dimensional projection.\nThe following table provides recommendations of map projection types based on the area size and on the latitude of the area.\n\n\nTable 2.1\n\n\n\n\n\n\n\nFor World maps, pseudo-cylindrical map projections, such as the Robinson projection (Figure 2.12) and the Eckert IV projection (Figure 2.14 (b)) are very popular because they have less distortion other map projections. For areas that cover a half of the sphere, i.e. a hemisphere, azimuthal map projections are recommended. There are four hemispheres that are often used: the Northern and Southern Hemisphere, with respectively the North and South Pole as center, the Western Hemisphere consisting of the Americas, and the Eastern Hemisphere, which includes the other continents. However, other hemispheres are often used implicitly, such as a hemisphere centered on Europe used in the Lambert Azimuthal Equal-Area projection shown in Figure 2.13 (b).\nFor areas with the size of a continent or country, the azimuthal map projection type can be used when centered on the area of interest. In particular, the Lambert Azimuthal Equal-Area projection when equal area is required, and the Azimuthal Equidistant projection when preserving distances is important. Alternatively, cylindrical and conic map projection types can be used for areas at low and mid latitudes respectively. Another alternative is to use a UTM projection. However, this is only recommended when the target area spans less than 6 degrees longitude.\n\n2.4.6 CRS in R\n Coordinate Reference Systems (CRSs) are implemented in the software library PROJ. With implementation, we mean specifying a CRS and transforming coordinates from one CRS to another. PROJ is used by every popular software application for spatial data, in particular ArcGIS, QGIS, and GRASS GIS, and also by many programming languages, including R. The sf package integrates the PROJ functions into R.\nA CRS is represented in R by an object of class crs, which can be retrieved or set with the function st_crs (from the sf package). In the following example, a crs object is created from an EPSG code, in this case 3035, the Lambert Azimuthal Equal-Area projection for Europe.\n\nlibrary(sf)\n# CRS Lambert Azimuthal Equal-Area projection\nst_crs(\"EPSG:3035\")\n\nCoordinate Reference System:\n  User input: EPSG:3035 \n  wkt:\nPROJCRS[\"ETRS89-extended / LAEA Europe\",\n    BASEGEOGCRS[\"ETRS89\",\n        ENSEMBLE[\"European Terrestrial Reference System 1989 ensemble\",\n            MEMBER[\"European Terrestrial Reference Frame 1989\"],\n            MEMBER[\"European Terrestrial Reference Frame 1990\"],\n            MEMBER[\"European Terrestrial Reference Frame 1991\"],\n            MEMBER[\"European Terrestrial Reference Frame 1992\"],\n            MEMBER[\"European Terrestrial Reference Frame 1993\"],\n            MEMBER[\"European Terrestrial Reference Frame 1994\"],\n            MEMBER[\"European Terrestrial Reference Frame 1996\"],\n            MEMBER[\"European Terrestrial Reference Frame 1997\"],\n            MEMBER[\"European Terrestrial Reference Frame 2000\"],\n            MEMBER[\"European Terrestrial Reference Frame 2005\"],\n            MEMBER[\"European Terrestrial Reference Frame 2014\"],\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[0.1]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4258]],\n    CONVERSION[\"Europe Equal Area 2001\",\n        METHOD[\"Lambert Azimuthal Equal Area\",\n            ID[\"EPSG\",9820]],\n        PARAMETER[\"Latitude of natural origin\",52,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",10,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",4321000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",3210000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (Y)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (X)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Statistical analysis.\"],\n        AREA[\"Europe - European Union (EU) countries and candidates. Europe - onshore and offshore: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia; Cyprus; Czechia; Denmark; Estonia; Faroe Islands; Finland; France; Germany; Gibraltar; Greece; Hungary; Iceland; Ireland; Italy; Kosovo; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Monaco; Montenegro; Netherlands; North Macedonia; Norway including Svalbard and Jan Mayen; Poland; Portugal including Madeira and Azores; Romania; San Marino; Serbia; Slovakia; Slovenia; Spain including Canary Islands; Sweden; Switzerland; Turkey; United Kingdom (UK) including Channel Islands and Isle of Man; Vatican City State.\"],\n        BBOX[24.6,-35.58,84.73,44.83]],\n    ID[\"EPSG\",3035]]\n\n\n A crs object is represented by Well Known Text (WKT). It includes a specification of the used datum as well as information how to transform it into other CRSs. Understanding the exact content of the WTK is not important for most users, since it is not needed to write a WKT yourself.\n A crs object can be created in several ways: \n\nThe first is with an EPSG number as user input specification as shown above. \n\nThe second is also with a user input specification, but with a so-called proj4 character string. The proj4 character string for the LAEA projection is \"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs\". However, proj4 character strings should be used with caution since they often lack important CRS information regarding datums and CRS transformations. Also note that the name proj4 stands for the PROJ library version 4, while the current major version of PROJ at the time of writing is already 8.\nThe third way is to provide some WKT definition of the projection. \n\nThe last way to create a crs object is to extract it from an existing spatial data object (e.g., an sf or stars object) using the st_crs() function.\n\nA crs object can define a new spatial object’s projection or transform an existing spatial object into another projection. In the example below, we created a new object, waterfalls, with names and coordinates of three famous waterfalls. Next, we converted it into a spatial object of the sf class, waterfalls_sf() with st_as_sf(). We can see that our object’s coordinate reference system is not defined with the st_crs() function.\n\n# create a data.frame of three famous waterfalls\nwaterfalls = data.frame(name = c(\"Iguazu Falls\", \"Niagara Falls\", \"Victoria Falls\"), \n                        lat = c(-25.686785, 43.092461, -17.931805), \n                        lon = c(-54.444981, -79.047150, 25.825558))\n# create sf object (without specifying the crs)\nwaterfalls_sf = st_as_sf(waterfalls, coords = c(\"lon\", \"lat\"))\n# extract crs (not defined yet)\nst_crs(waterfalls_sf)\n\nCoordinate Reference System: NA\n\n\nThis function also allows us to specify CRS of our object - in this example, coordinates of our object are in the WGS84 coordinate system, and thus we can use the EPSG code of 4326. We can also confirmed that our operation was successful also using st_crs().\n\n# specify crs\nst_crs(waterfalls_sf) = \"EPSG:4326\"\n# extract crs\nst_crs(waterfalls_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAlternatively, it is possible to set the CRS when creating a new sf object, as you can see below.\n\nwaterfalls_sf = st_as_sf(waterfalls, coords = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\n\nThe st_transform() function is used to convert the existing spatial object’s coordinates into another projection. For example, let’s transform our waterfalls_sf object to the Equal Earth projection (EPSG 8857).\n\nwaterfalls_sf_trans = st_transform(waterfalls_sf, \"EPSG:8857\")\nwaterfalls_sf_trans\n\nSimple feature collection with 3 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -6583123 ymin: -3244138 xmax: 2416945 ymax: 5261565\nProjected CRS: WGS 84 / Equal Earth Greenwich\n            name                  geometry\n1   Iguazu Falls POINT (-4969711 -3244138)\n2  Niagara Falls  POINT (-6583123 5261565)\n3 Victoria Falls  POINT (2416945 -2285044)\n\n\nFigure 2.15 shows the data in the WGS84 coordinate system on the top and in the Equal Earth projection on the bottom. You can see here that the decision of the projection used has an impact not only on the coordinates (notice the grid values), but also the continents’ shapes.\n\n\n\n\n\n\n\n\n\n\n(a) WGS84 coordinate system\n\n\n\n\n\n\n\n\n\n\n\n(b) Equal Earth projection\n\n\n\n\n\n\nFigure 2.15: Comparison between the same dataset of three waterfalls\n\n\n\n\n\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2025. Geocomputation with R. Second. CRC Press.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Spatial data in R</span>"
    ]
  },
  {
    "objectID": "XX-geodata.html#footnotes",
    "href": "XX-geodata.html#footnotes",
    "title": "2  Spatial data in R",
    "section": "",
    "text": "Regular grids can also have coordinated changing in different directions, e.g., from bottom to top.↩︎\nHowever, any other names are also possible.↩︎\nIt is also possible to read spatial vector data using the st_read() function, which differs from read_sf() by having different default arguments.↩︎\nThe stars package also has a function read_ncdf() aimed at improved reading of NetCDF files.↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Spatial data in R</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html",
    "href": "XX-nutshell.html",
    "title": "3  tmap in a nutshell",
    "section": "",
    "text": "3.1 Shape objects\nAs we established in Chapter 2, spatial data comes in various file formats related to two main data models – vector and raster. There are also several spatial object classes in R, for example, sf from the sf package for vector data and stars from stars for raster data and spatial data cubes. Additionally, packages such as sp, raster, or terra offer their own classes, and this abundance of spatial object classes can be generally overwhelming. Gladly, tmap can work with all of the above objects – it treats all supported spatial data classes as so-called shape objects.\nFor example, we read the slo_cities.gpkg file containing several point locations representing cities and towns in Slovenia into a new object, slo_cities. The slo_cities object is a shape object.\nlibrary(tmap)\nlibrary(sf)\nslo_cities = read_sf(\"data/slovenia/slo_cities.gpkg\")\nSpatial data, no matter the class, usually stores two interrelated sets of information - about the locations/geometries and their associated values/attributes. Visualization of the attributes only can be done with regular plotting functions (e.g., plot(), hist(), barplot()) or dedicated packages, such as ggplot2 . On the other hand, tmap is suitable when our goal is to visualize spatial geometries only or spatial geometries together with their attributes.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html#sec-quick-maps",
    "href": "XX-nutshell.html#sec-quick-maps",
    "title": "3  tmap in a nutshell",
    "section": "\n3.2 Quick maps",
    "text": "3.2 Quick maps\nThe tmap package offers a distinction between quick and regular maps. The first approach, using the qtm() function, could be handy for data exploration. It works even if we just provide any shape object – in that case, only the geometry is plotted. Figure 3.1 (a) shows a visualization of the geometries from the slo_cities.\n\nqtm(slo_cities)\n\nThe qtm() function allows to customize many map elements for the provided shape object. For example, we can change the shapes of the points in slo_cities, make their sizes related to the the \"population\" argument, and add a title (Figure 3.1 (b)).\n\nqtm(slo_cities, shape = 24, size = \"population\", title = \"Cities\")\n\n\n\n\n\n\n\n\n\n\n(a) A map with geometries only.\n\n\n\n\n\n\n\n\n\n(b) A map with geometries and attributes.\n\n\n\n\n\n\nFigure 3.1: Example of a quick map created with the qtm() function.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html#sec-regular-maps",
    "href": "XX-nutshell.html#sec-regular-maps",
    "title": "3  tmap in a nutshell",
    "section": "\n3.3 Regular maps",
    "text": "3.3 Regular maps\nTherefore, for most applications, we recommend using the regular mapping approach. This approach operates on many functions that start with tm_. The first element always1 is tm_shape(), which specifies the input shape object. Next, map layers, additional map elements, and overall layout options can be customized.  \nThe last example in Section 3.2 can be reproduced with the regular map approach using the following code.\n\ntm_shape(slo_cities) +\n  tm_symbols(shape = 24, size = \"population\") +\n  tm_title(\"Cities\")\n\nHere, we specify the input data (our shape object) with tm_shape(), aesthetics (also known as visual variables) of map layers with tm_symbols(), and the map title with tm_title().\nThe tmap package has a number of possible map layers, but the most prominent ones are tm_polygons(), tm_symbols(), tm_lines(), tm_raster(), and tm_text() (Chapter 6). Overall, most visual variables of map layers can be assigned in two main ways. First, they accept a fixed, constant value, for instance, shape = 24, which sets the symbols’ shapes to triangles. Second, it is also possible to provide a variable name, for example size = \"population\". This plots each point with a size based on the population attribute from the slo_cities object and automatically adds a related map legend.\nThe tm_shape() function and one or more following map layers create a group together. In other words, map layers are related only to the preceding tm_shape() call. One map can have several groups. Let’s see how many groups can be used by reading some additional datasets – the slo_elev raster with elevation data of Slovenia, the slo_borders polygon with the country borders, and the slo_railroads lines contains a railroad network for this country. \n\nlibrary(sf)\nlibrary(stars)\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\nslo_borders = read_sf(\"data/slovenia/slo_border.gpkg\")\nslo_railroads = read_sf(\"data/slovenia/slo_railroads.gpkg\")\n\nLook at the following example and try to guess how many groups it has, and how many layers exist for each group (Figure 3.2).\n\ntm_shape(slo_elev) +\n  tm_raster(col.scale = tm_scale(values = \"geyser\"),\n            col.legend = tm_legend(title = \"Elevation (m asl)\")) +\n  tm_shape(slo_borders) + \n  tm_borders() +\n  tm_shape(slo_railroads) +\n  tm_lines(lwd = \"track_width\", \n           lwd.legend = tm_legend(show = FALSE)) +\n  tm_shape(slo_cities) +\n  tm_symbols(shape = 24, size = \"population\",\n             size.legend = tm_legend(title = \"Population\")) +\n  tm_title(\"Slovenia\") +\n  tm_layout(bg.color = \"grey95\")\n\n\n\n\n\n\nFigure 3.2: Example of a map with four groups of map layers: an elevation layer, country borders layer, railroads layer, and cities layer.\n\n\n\n\nThe correct answer is four groups, all with just one layer. Each group is put on top of the previous one – tmap uses a layered approach. The first group represents elevation data with a continuous color scale style, a color palette called \"geyser\", and a legend title. The second group shows the borders of Slovenia with the default aesthetics, while the third group presents the railroad network (the slo_railroads object), with each line’s width based on the values from the \"track_width\" column, but with a legend hidden. The last group is similar to our previous example with fixed symbol shapes and sizes related to the \"elevation\" attribute, but also with the legend title instead of the map title. Additionally, we use the tm_title() function to add a map title and tm_layout to modify the general appearance of the map. You can also notice that we can control scales of various visual variables, such as color, size, or width, with the tm_scale_*() function and customize legends with the tm_legend() function. \nOften, maps also have additional map elements, such as graticule lines, north arrow, scale bar, or map credits (Figure 3.3). They help map readers understand the location or extent of the input data and provide some ancillary information. The tmap package offers a set of functions for additional map elements. The tm_graticules() function draws latitude and longitude graticules and adds their labels. It also uses the layered approach, and thus, the lines will be drawn either below or above the shape objects, depending on the position of this function in the code. In our example below, tm_graticules() is used after all of the map groups, and that is why the graticule lines are put on the top of the spatial data. We can also use tm_compass() to create a north arrow, tm_scalebar() to add a scale bar, and tm_credits() to add a text annotation representing credits or acknowledgments. The location of all these three elements on the map is, by default, automatically determined. It, however, can be adjusted with the position argument – see an example of its use in the tm_compass() function below. Moreover, it is possible to add any type of manual legend with tm_add_legend(). It includes simple legends below, such as the \"Railroads\" legend element, that is only represented by a single black line and a related label, but more complex custom legends with several elements are also possible. \n\nmy_map = tm_shape(slo_elev) +\n  tm_raster(col.scale = tm_scale(values = \"geyser\"),\n            col.legend = tm_legend(title = \"Elevation (m asl)\")) +\n  tm_shape(slo_borders) + \n  tm_borders() +\n  tm_shape(slo_railroads) +\n  tm_lines(lwd = \"track_width\", \n           lwd.legend = tm_legend(show = FALSE)) +\n  tm_shape(slo_cities) +\n  tm_symbols(shape = 24, size = \"population\",\n             size.legend = tm_legend(title = \"Population\")) +\n  tm_graticules() +\n  tm_compass(position = c(\"right\", \"top\")) +\n  tm_scalebar() +\n  tm_credits(\"Author, Year\") +\n  tm_add_legend(type = \"lines\", col = \"black\", labels = \"Railroads\") +\n  tm_title(\"Slovenia\") +\n  tm_layout(bg.color = \"grey95\")\n\nMaps created with tmap can be saved as an R object. This is a useful feature that allows to use one map in a few places in a code, modify existing tmap objects, or save these objects to files.\n\nmy_map\n\n\n\n\n\n\nFigure 3.3: Example of a map with four groups of map layers and additional map elements, such as graticule lines, north arrow, scale bar, and text annotation. It also has a manually added legend.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html#sec-map-modes",
    "href": "XX-nutshell.html#sec-map-modes",
    "title": "3  tmap in a nutshell",
    "section": "\n3.4 Map modes",
    "text": "3.4 Map modes\nEach map created with tmap can be viewed in one of two modes: \"plot\" and \"view\".  The \"plot\" mode is used by default and creates static maps similar to those shown before in this chapter. This mode supports almost all of tmap’s features, and it is recommended, for example, for scientific publications or printing.\nThe second mode, \"view\", allows the creation of interactive maps. They can be zoomed in and out or panned, allow for changing background tiles (basemaps), or click on map objects to get some additional information. This mode has, however, some constraints and limitations comparing to \"plot\", for example, the legend cannot be fully customized, and some additional map elements are not supported.\nBoth modes can be used on the same tmap code. Therefore, there is no need to create two separate maps for static and interactive use. The tmap_mode() function can be used to switch from one mode to the other2.\n\ntmap_mode(\"view\")\n#&gt; ℹ tmap mode set to \"view\".\n\nThe above line of code just changes the mode – it does not return anything except a message. Now, if we want to use this mode, we need to either write a new tmap code or provide some existing tmap object, such as my_map.\n\nmy_map\n\nOur main result is the interactive map (Figure 3.4).  It shows our spatial data using aesthetics similar to Figure 3.3 but allows us to zoom in and out or move the map. We also can select a basemap or click on any line and point to get some information.\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.4: Map from the previous figure shown using the interactive (“view”) mode.\n\n\n\nTo go back to the \"plot\" mode, we need to use the tmap_mode() function again – map not shown:\n\ntmap_mode(\"plot\")\nmy_map\n\nMore information about the interactive \"view\" mode and how to customize its outputs is in Chapter 13.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html#sec-sm-section",
    "href": "XX-nutshell.html#sec-sm-section",
    "title": "3  tmap in a nutshell",
    "section": "\n3.5 Small multiples",
    "text": "3.5 Small multiples\n\nChapter 14",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html#sec-ani-section",
    "href": "XX-nutshell.html#sec-ani-section",
    "title": "3  tmap in a nutshell",
    "section": "\n3.6 Animations",
    "text": "3.6 Animations\n\nChapter 15",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-nutshell.html#footnotes",
    "href": "XX-nutshell.html#footnotes",
    "title": "3  tmap in a nutshell",
    "section": "",
    "text": "Almost always…↩︎\nMap modes can be also changed globally using tmap_options() or switched using ttm().↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>**tmap** in a nutshell</span>"
    ]
  },
  {
    "objectID": "XX-save.html",
    "href": "XX-save.html",
    "title": "4  Save maps",
    "section": "",
    "text": "4.1 Raster graphic formats\nRaster graphics are non-spatial relatives of spatial rasters. The digital images are composed of many pixels – squares filled with specific colors. Main raster graphic file formats include PNG, JPEG, BMP, and TIFF.  One of the major parameters of the raster graphic images is DPI (Dots Per Inch, in this context, a more proper name probably should be PPI, Pixels Per Inch) – is a number of pixels per inch of the output image. For example, if the width and height of our image are 10 inches, then DPI of 300 would mean that our final image would have 3000 by 3000 pixels, and DPI of 72 would result in an image of 720 by 720 pixels. Therefore, an image with the same width and height but a larger value of DPI would occupy more space on the hard drive but also have better quality.\nSaving tmap objects to a file can be done with the tmap_save(). It usually accepts two arguments2 – the first one, tm, is our map object, and the second one, filename, is the path to the created file.\ntmap_save(tm, \"my_map.png\")\n#&gt; Map saved to my_map.png\n#&gt; Resolution: 2503 by 1762 pixels\n#&gt; Size: 8.34 by 5.87 inches (300 dpi)\nBy default, DPI is set to 300, and the image width and height is automatically adjusted based on the map aspect ratio. These parameters can be, however, changed with the dpi, width, and height arguments3.\ntmap_save(tm, \"my_map.png\", width = 1000, height = 750, dpi = 300)\n#&gt; Map saved to /__w/tmap/tmap/my_map.png\n#&gt; Resolution: 1000 by 750 pixels\n#&gt; Size: 3.33 by 2.5 inches (300 dpi)\nThe units of width or height depend on the value you set: they are pixels (\"px\") when the value is greater than 50, and inches (\"in\") otherwise. Units can also be changed with the units argument.\nThis function also has several additional arguments, including outer.margins, scale and asp. All of them override the arguments’ values set in tm_layout() (?sec-layout). Additionally, when set to 0, the asp argument has a side effect: it moves the map frame to the edges of the output image.\nBy default, tmap uses graphic devices4 incorporated in R. However, it is also possible to use other, external devices with the device argument.\ntmap_save(tm, \"my_map.png\", device = ragg::agg_png)\nFor example, the ragg::agg_png device is usually faster and has better support for non-standard fonts than the regular grDevices::png.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Save maps</span>"
    ]
  },
  {
    "objectID": "XX-save.html#sec-vector-graphic-formats",
    "href": "XX-save.html#sec-vector-graphic-formats",
    "title": "4  Save maps",
    "section": "\n4.2 Vector graphic formats",
    "text": "4.2 Vector graphic formats\nVector graphics are quite distant relatives of spatial vectors, with vector graphics consisting of sets of coordinates. Contrary to spatial vectors, however, their coordinates can be connected not only by straight lines (Section 2.2.1), but also using curves. This makes it possible to create polygons, circles, ellipses, and others. They also allow text and other objects to be stored. Common vector graphic file formats are SVG, EPS, and PDF.\nTo save a map to a vector graphic format, we still can use tmap_save() but either with a suitable file extension or by using the device argument, for example device = svglite::svglite.\n\ntmap_save(tm, \"my_map.svg\")\n#&gt; Map saved to /__w/tmap/tmap/my_map.svg\n#&gt; Size: 8.34 by 5.87 inches\n\nZooming in and out of vector graphics does not affect their quality. At the same time, the width, height, and scale arguments can still impact the output file. For example, a vector graphic file saved with a narrower width value will have thicker lines and larger fonts compared to the one with a larger width value. You can check this effect by saving the tm object with width = 1 and then with width = 10.\nCompared to raster graphics, vector graphics are not suitable for storing complex images or maps, and they are less supported by web browsers comparing to rasters. They, however, also have many advantages. For example, they can be zoomed in and out without any decrease in quality. Vector graphics can also be easily edited in dedicated software (e.g., Inkscape or Adobe Illustrator), which allows to change the style of map elements and move them using a computer mouse outside of the R environment. This approach can be useful, for example, when you want to quickly adjust the position of map elements (e.g., labels) or collaborate with a graphic designer. Note, however, that this process is not fully reproducible.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Save maps</span>"
    ]
  },
  {
    "objectID": "XX-save.html#sec-interactive-format",
    "href": "XX-save.html#sec-interactive-format",
    "title": "4  Save maps",
    "section": "\n4.3 Interactive format",
    "text": "4.3 Interactive format\ntmap map objects can not only be viewed in the interactive mode (Section 3.4) but also saved as HTML files by adding the .html extension to the output file name.\n\ntmap_save(tm, \"my_map.html\")\n#&gt; [view mode] Map component `tm_chart_none()` not supported in \"view\" mode.\n#&gt; Interactive map saved to /__w/tmap/tmap/my_map.html\n#&gt; \n#&gt; This message is displayed once per session.\n\nThe tmap_save() function also has several additional arguments reserved for the interactive format, including selfcontained and in.iframe. The selfcontained argument with TRUE by default saves our map together with additional resources (e.g., JavaScript libraries) into one HTML file. Otherwise, additional resources will be saved in an adjacent directory. The in.iframe argument (FALSE by default) allows saving an interactive map as an iframe – when TRUE it creates two HTML files - a small HTML file with the iframe container and a large one with the actual map.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Save maps</span>"
    ]
  },
  {
    "objectID": "XX-save.html#footnotes",
    "href": "XX-save.html#footnotes",
    "title": "4  Save maps",
    "section": "",
    "text": "Standard R approach of saving graphic files by opening a graphic device, e.g., png(), plotting the data, and then closing the device with dev.off() also works.↩︎\nIn fact, one argument is enough – if you just provide a tmap object, then it will be saved to a tmap01 file with some default format.↩︎\nYou can even specify just one of width or height, and the value of the second one will be calculated using the formula asp = width / height.↩︎\nShort discussion about graphic devices can be found in section Section 12.3.2.↩︎",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Save maps</span>"
    ]
  },
  {
    "objectID": "XX-tm-shape.html",
    "href": "XX-tm-shape.html",
    "title": "5  Specifying spatial data",
    "section": "",
    "text": "5.1 Shapes and layers\nAs described in Chapter 2, shape objects can be vector or raster data. We recommend sf objects for vector data and stars objects for raster data1.\nlibrary(tmap)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(stars)\nworldelevation = read_stars(\"data/worldelevation.tif\")\nworldvector = read_sf(\"data/worldvector.gpkg\")\nworldcities = read_sf(\"data/worldcities.gpkg\")\nIn tmap, a shape object needs to be defined with the function tm_shape(). When multiple shape objects are used, each has to be defined in a separate tm_shape() call. This is illustrated in the following example (Figure 5.1).\ntm_shape(worldelevation) +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8))) +\n  tm_shape(worldvector) +\n  tm_borders() +\n  tm_shape(worldcities) +\n  tm_dots() +\n  tm_text(\"name\")\n\n\n\n\n\n\nFigure 5.1: A map representing three shapes (worldelevation, worldvector, and worldcities) using four layers.\nIn this example, we use three shapes: worldelevation which is a stars object containing an attribute called \"worldelevation.tif\", worldvector which is an sf object with country borders, and worldcities – an sf object that contains metropolitan areas of at least 20 million inhabitants.\nEach tm_shape() function call is succeeded by one or more layer functions. In the above example, these are tm_raster(), tm_borders(), tm_dots() and tm_text(). We will describe layer functions in detail in the next chapter. For this chapter, it is sufficient to know that each layer function call defines how the spatial data specified with tm_shape() is plotted.\nShape objects can be used to plot multiple layers. In the example, shape worldcities is used for two layers, tm_dots() and tm_text().",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Specifying spatial data</span>"
    ]
  },
  {
    "objectID": "XX-tm-shape.html#sec-shapes-hierarchy",
    "href": "XX-tm-shape.html#sec-shapes-hierarchy",
    "title": "5  Specifying spatial data",
    "section": "\n5.2 Shapes hierarchy",
    "text": "5.2 Shapes hierarchy\nThe order of the tm_shape() functions’ calls is crucial. The first tm_shape(), known as the main shape, is not only shown below the following shapes, but also sets the projection and extent of the whole map. In Figure 5.1, the worldelevation object was used as the first shape, and thus the whole map has the projection and extent of this object.\nHowever, we can quickly change the main shape with the is.main argument. In the following example, we set the worldcities object as the main shape, which limits the output map to the point locations in worldcities (Figure 5.2)2.\n\ntm_shape(worldelevation) +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8))) +\n  tm_shape(worldvector) +\n  tm_borders() +\n  tm_shape(worldcities, is.main = TRUE) +\n  tm_dots() +\n  tm_text(\"name\")\n\n\n\n\n\n\nFigure 5.2: A map representing three shapes (worldelevation, worldvector, and worldcities) using four layers and zoomed into the locations in the worldcities object.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Specifying spatial data</span>"
    ]
  },
  {
    "objectID": "XX-tm-shape.html#sec-map-extent",
    "href": "XX-tm-shape.html#sec-map-extent",
    "title": "5  Specifying spatial data",
    "section": "\n5.3 Map extent",
    "text": "5.3 Map extent\nAnother important aspect of mapping, besides projection, is its extent – a portion of the area shown in a map.  This is not an issue when the extent of our spatial data is the same as we want to show on a map. However, what should we do when the spatial data contains a larger region than we want to present?\nAgain, we could take two routes. The first one is to preprocess our data before mapping - this can be done with vector clipping (e.g., st_intersection()) and raster cropping (e.g., st_crop()). We would recommend this approach if you plan to work on the smaller data in the other parts of the project. The second route is to specify the map extent in tmap.\ntmap allows specifying map extent using three approaches. The first one is to specify minimum and maximum coordinates in the x and y directions that we want to represent. This can be done with a numeric vector of four values in the order of minimum x, minimum y, maximum x, and maximum y, where all of the coordinates need to be specified in the input data units3 In the following example, we limit our map extent to the rectangular area between x from -15 to 45 and y from 35 to 65 (Figure 5.3).\n\ntm_shape(worldelevation, bbox = c(-15, 35, 45, 65)) +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8)))\n\n\n\n\n\n\nFigure 5.3: Global elevation data limited to the extent of the specified minimum and maximum coordinates.\n\n\n\n\nThe second approach allows for the map to be set to an extent based on a search query. In the code below, we limit the map extent to the area of \"Europe\" (Figure 5.4). This approach uses the OpenStreetMap tool called Nominatim to automatically generate minimum and maximum coordinates in the x and y directions based on the provided query. \n\ntm_shape(worldelevation, bbox = \"Europe\") +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8)))\n\n\n\n\n\n\nFigure 5.4: Global elevation data limited to the extent specified with the ‘Europe’ query.\n\n\n\n\nIn the last approach, the map extent is based on another existing spatial object. Figure 5.5 shows the elevation raster data (worldelevation) limited to the edge coordinates from worldcities.\n\ntm_shape(worldelevation, bbox = worldcities) +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8)))\n\n\n\n\n\n\nFigure 5.5: Global elevation data limited to the extent of the other spatial object.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Specifying spatial data</span>"
    ]
  },
  {
    "objectID": "XX-tm-shape.html#sec-map-projection",
    "href": "XX-tm-shape.html#sec-map-projection",
    "title": "5  Specifying spatial data",
    "section": "\n5.4 Map projection",
    "text": "5.4 Map projection\n\nAs we mentioned in the previous section, created maps use the projection from the main shape. However, we often want to create a map with a different projection, for example, to preserve a specific map property (Section 2.4). We can do this in three ways. The first way to use a different projection on a map is to reproject the main data before plotting, as shown in Section 2.4.6. The second way is to specify the map projection using the crs argument of tm_shape(). This argument expects either some crs object or a CRS code. The third way is to use a tm_crs() function.\nThe next code chunks shows all of the three ways, in which we transform the CRS of the worldvector object to \"EPSG:8857\". This represents a projection called Equal Earth (Šavrič, Patterson, and Jenny 2019). The Equal Earth projection is an equal-area pseudocylindrical projection for world maps similar to the non-equal-area Robinson projection (Figure 2.12).\n\n#1\nworldvector8857 = st_transform(worldvector, crs = \"EPSG:8857\")\ntm_shape(worldvector8857) +\n  tm_polygons()\n#2\ntm_shape(worldvector, crs = \"EPSG:8857\") +\n  tm_polygons() \n#3\ntm_shape(worldvector) +\n  tm_polygons() +\n  tm_crs(\"EPSG:8857\")\n\nThe first way requires understanding various R packages, as different spatial objects have different functions for changing the projection. The second way is the most straightforward, but it is important to remember that the crs argument can only be set in the main layer (Section 5.2). The third way is the most flexible, as it allows changing the projection for the whole map. Additionally, the tm_crs() function can automatically determine the projection based on the expected property of the map, e.g., equal area (\"area\"), equidistant (\"distance\"), or conformal (\"shape\"). For example, tm_crs(\"auto\") will choose the projection that best preserves the area of the map (Lambert Azimuthal Equal Area), while tm_crs(\"auto\", property = \"shape\") will choose the projection that best preserves the shape of the map (Stereographic).\nReprojections of vector data are usually straightforward because each spatial coordinate is reprojected individually.  Reprojecting of raster data, on the other hand, is more complex and requires using one of two approaches. The first approach applies raster warping, which is a name for two separate spatial operations: creation of a new regular raster object and computation of new pixel values through resampling (for more details read Chapter 7 of Lovelace, Nowosad, and Muenchow (2025)). This is the default option in tmap, however, it has some limitations and it is not always possible to use it.\n\nFigure 5.6 (a) shows the world elevation raster reprojected to Equal Earth. Some of you can quickly notice that certain areas, such as parts of Antarctica, New Zealand, Alaska, and the Kamchatka Peninsula, are presented twice, with one version being largely distorted. Another limitation of raster.warp = TRUE is the use of the nearest neighbor resampling only – while it can be a proper method to use for categorical rasters, it can have some unintended consequences for continuous rasters (such as the \"worldelevation.tif\" data).\n\ntm_shape(worldelevation, crs = \"EPSG:8857\") +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8))) \n\nThe second approach (tm_options(raster.warp = FALSE)) computes new coordinates for each raster cell keeping all of the original values and results in a curvilinear grid. This calculation could deform the shapes of original grid cells, and usually curvilinear grids take a longer time to plot4.\nFigure 5.6 (b) shows an example of the second approach, which gave a better result in this case without any spurious lands. However, the creation of the (b) map takes about ten times longer than the (a) map.\n\ntm_shape(worldelevation, crs = \"EPSG:8857\") +\n  tm_raster(\"worldelevation.tif\", \n            col.scale = tm_scale(values = terrain.colors(8))) +\n  tm_options(raster.warp = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n(a) created using raster.warp = TRUE\n\n\n\n\n\n\n\n\n\n\n\n(b) created using raster.warp = FALSE\n\n\n\n\n\n\nFigure 5.6: Two elevation maps in the Equal Earth projection\n\n\n\n\n\n\n\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2025. Geocomputation with R. Second. CRC Press.\n\n\nŠavrič, Bojan, Tom Patterson, and Bernhard Jenny. 2019. “The Equal Earth Map Projection.” International Journal of Geographical Information Science 33 (3): 454–65. https://doi.org/cs8v.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Specifying spatial data</span>"
    ]
  },
  {
    "objectID": "XX-tm-shape.html#footnotes",
    "href": "XX-tm-shape.html#footnotes",
    "title": "5  Specifying spatial data",
    "section": "",
    "text": "However, tmap also accepts other spatial objects, e.g., of sp, raster, and terra classes.↩︎\nWe will show how to adjust margins and text locations later in the book↩︎\nThis can also be done with the object of class st_bbox or a 2 by 2 matrix.↩︎\nFor more details of the first approach, see ?stars::st_warp() and of the second approach, see ?stars::st_transform().↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Specifying spatial data</span>"
    ]
  },
  {
    "objectID": "XX-layers.html",
    "href": "XX-layers.html",
    "title": "6  Layers",
    "section": "",
    "text": "6.1 Polygons\nlibrary(tmap)\nlibrary(sf)\nslo_borders = read_sf(\"data/slovenia/slo_border.gpkg\")\nThe main function of visualizing polygons is tm_polygons(). By default, it plots areas of polygons in light gray (gray85) and polygons borders in slightly dark gray (gray25).\ntm_shape(slo_borders) +\n  tm_polygons()\nBoth, colors of areas (polygons’ fillings) and colors of borders can be modified using the fill and col arguments (Figure 6.1 (a)).\ntm_shape(slo_borders) +\n  tm_polygons(fill = \"lightblue\", col = \"black\", lwd = 0.5, lty = \"dashed\")\nIn fact, tm_polygons() is a combination of two separate functions: tm_fill() and tm_borders(). The tm_fill() function fills polygons with a fixed color or a color palette representing a selected variable (Figure 6.1 (b)).\ntm_shape(slo_borders) +\n  tm_fill(fill = \"lightblue\")\nThe tm_borders() function draws the borders of the polygons only (Figure 6.1 (c)). It allows you to change the colors of borders, their widths, or the lines type.\ntm_shape(slo_borders) +\n  tm_borders(col = \"black\", lwd = 0.5, lty = \"dashed\")\n(a) tm_polygons()\n\n\n\n\n\n\n\n\n\n(b) tm_fill()\n\n\n\n\n\n\n\n\n\n(c) tm_borders()\n\n\n\n\n\n\nFigure 6.1: Example of a map created using:\nMore information on colors and how they can be applied and modified is explained in detail in Section 7.3.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-layers.html#sec-symbols",
    "href": "XX-layers.html#sec-symbols",
    "title": "6  Layers",
    "section": "\n6.2 Symbols",
    "text": "6.2 Symbols\n\nslo_cities = read_sf(\"data/slovenia/slo_cities.gpkg\")\n\nSymbols are a very flexible layer type. They are usually used to represent point data but can also be used for lines and polygons. In the latter cases, they are located in the centroid coordinates of each feature. Their flexibility is also related to the ways symbols can be visualized – it is possible to show values of a given variable by colors of symbols, their sizes, or shapes (more about that is explained in Chapter 7).\nThe tm_symbols() is the main function in tmap, allowing to use and modify symbol elements (Figure 6.2). By default, this function draws a gray circle symbol with a black border for each element of an input feature.\n\n\n\n\n\n\n\nFigure 6.2: A map showing the default tmap symbols.\n\n\n\n\nIn the above example, each symbol is related to one feature (row) in the slo_cities object. However, in a case when we provide multi-element features (such as MULTIPOINT; Section 2.2.1), each multi-element object is first split into a number of single-element features and then plotted.\nThe tm_symbols() is a very flexible function with a large number of arguments. While this allows adjusting its results to almost any need, it also makes this function complicated. Therefore, four additional layers are implemented in tmap: tm_squares(), tm_bubbles(), tm_dots(), tm_markers(). All of them use tm_symbols(), but with different default values.\ntm_squares() uses square symbols (shape = 22) instead of circles (shapes = 21) (Figure 6.3 (a)). \n\ntm_shape(slo_cities) +\n  tm_squares()\n\n\n\n\n\n\ntm_shape(slo_cities) +\n  tm_bubbles()\n\nThe main role of tm_dots() is to present many locations at the same time. To do this, this layer has a small size value (0.02) at the default (Figure 6.3 (c)).\n\ntm_shape(slo_cities) +\n  tm_dots()\n\nThe last additional layer is tm_markers(), which uses a marker icon by default (Figure 6.3 (d)).\n\ntm_shape(slo_cities) +\n  tm_markers()\n\n\n\n\n\n\n\n\n\n\n\n(a) tm_squares()\n\n\n\n\n\n\n\n\n\n(b) tm_bubbles()\n\n\n\n\n\n\n\n\n\n\n\n(c) tm_dots()\n\n\n\n\n\n\n\n\n\n(d) tm_markers()\n\n\n\n\n\n\nFigure 6.3: Maps showing default visualizations using various types of symbols.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-layers.html#sec-lines",
    "href": "XX-layers.html#sec-lines",
    "title": "6  Layers",
    "section": "\n6.3 Lines",
    "text": "6.3 Lines\n\nslo_railroads = read_sf(\"data/slovenia/slo_railroads.gpkg\")\n\nThe tm_lines() function allows the visualization of different types of line data (Figure 6.4).\n\ntm_shape(slo_railroads) + \n  tm_lines()\n\n\n\n\n\n\nFigure 6.4: Example of a map created with tm_lines().\n\n\n\n\nLines can be presented using different colors, widths, or types (Chapter 7). This allows to show a hierarchy (for example, increased line widths for higher capacity roads) or distinguish between types of objects (for example, blue rivers comparing to gray roads).",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-layers.html#sec-text",
    "href": "XX-layers.html#sec-text",
    "title": "6  Layers",
    "section": "\n6.4 Text",
    "text": "6.4 Text\n\nText labels are often an integral part of many maps. They can serve several functions, from naming features, indicating relations between them, or representing a given variable’s values. The main function for creating text labels is tm_text(), which adds a label to each spatial feature (Figure 6.5).\n\ntm_shape(slo_cities) +\n  tm_text(text = \"name\", size = \"population\")\n\n\n\n\n\n\nFigure 6.5: Example of a map created with tm_text().\n\n\n\n\nWe can adjust sizes (size; Section 7.4), colors (col), font faces (fontface), and background colors (bgcol) of labels either by providing a single value or a name of a data variable. Text labels can be further modified with the opt_tm_text() function provided to the options argument. It includes a set of arguments that allow to adjustment of the text labels’ appearance, such as remove_overlap, along_lines, and shadow. \n\n#&gt; [plot mode] legend/component: Some components or legends are too \"high\" and are\n#&gt; therefore rescaled.\n#&gt; ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\nText labels can be added to spatial (multi-)points, (multi-)lines, and (multi-)polygons, and each of the cases is quite different. The simplest case is for POINT data, for which each text label will be located precisely in the coordinates of the given points (Figure 6.5). However, how to add text labels to multipoints, lines, multilines, polygons, or multipolygons? Should each label correspond to one spatial feature, or should every sub-feature have its own label? Where should the labels be placed for lines or polygons - in the center of a line and centroid of a polygon or somewhat different?  \n\n# x2 = x |&gt; \n#   dplyr::group_by(region_un) |&gt; \n#   dplyr::summarise()\n# tm_shape(x2) +\n#   tm_polygons() +\n#   tm_text(\"region_un\")\n\n\n\n\n\n\n\nText labels are also often presented together with lines (Section 6.3). One example is an isopleth – a line drawn on a map through all points having the same value of a given variable, such as atmospheric pressure or elevation. Isopleths can be created with the tm_iso() function.\n\n# to improve\nlibrary(stars)\n#&gt; Loading required package: abind\nlibrary(terra)\n#&gt; terra 1.8.54\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\nslo_elev_raster = rast(slo_elev)\nelev_isopleths = as.contour(slo_elev_raster, nlevels = 4)\ntm_shape(elev_isopleths) +\n  tm_iso()\n\n\n\n\n\n\n\n\nei_terrain = terra::terrain(slo_elev_raster, c(\"slope\", \"aspect\"), unit = \"radians\")\nhs = terra::shade(ei_terrain[[1]]*3, ei_terrain[[2]])\n\ntm_shape(hs) +\n    tm_grid() +\n    tm_raster(col.scale = tm_scale(values = gray(0:100 / 100), n = 100),\n            col.legend = tm_legend_hide()) +\n    tm_shape(slo_elev) +\n    tm_raster(col_alpha = 0.25,\n            col.scale = tm_scale(values = terrain.colors(25)),\n            col.legend = tm_legend_hide()) +\n    tm_shape(elev_isopleths) +\n    tm_lines(col = \"white\") +\n    tm_text(\"level\", col = \"white\")",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-layers.html#sec-raster-layer",
    "href": "XX-layers.html#sec-raster-layer",
    "title": "6  Layers",
    "section": "\n6.5 Raster",
    "text": "6.5 Raster\n\nlibrary(stars)\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\nslo_gm = read_stars(\"data/slovenia/slo_gm.tif\")\n\n\nVisualization of raster data depends on the raster type (continuous or categorical), its resolution, and the number of layers. Figure 18.1 shows two simple examples of continuous and categorical raster visualizations created with tm_raster(). This function attempts to recognize the type of a given raster – when the input raster is continuous then the pretty style is used (Figure 6.6 (a)). \n\ntm_shape(slo_elev) +\n  tm_raster()\n\nOn the other hand, when the given raster is categorical, then tm_raster() uses tm_scale_categorical() automatically (Figure 6.6 (b)). We can also adjust the legend title, used colors, and many more, in a similar fashion as in the previously mentioned layers.\n\ntm_shape(slo_gm) +\n  tm_raster()\n\n\n\n\n\n\n\n\n\n\n\n(a) Continuous raster map\n\n\n\n\n\n\n\n\n\n(b) Categorical raster map\n\n\n\n\n\n\nFigure 6.6: Examples of raster maps\n\n\n\nThe above examples used a raster with one layer only. However, rasters can have many layers, either represented by dimensions or attributes. By default, tmap shows all of the layers, where each raster has its own legend.\n\nraster2 = c(slo_elev, slo_gm)\ntm_shape(raster2) +\n  tm_raster()\n\nWe can modify their arrangement with tm_facets() (Figure 6.7).\n\ntm_shape(raster2) +\n  tm_raster() +\n  tm_facets(ncol = 1) +\n  tm_layout(panel.labels = c(\"Elevation\", \"Geomorphons\"))\n\n\n\n\n\n\nFigure 6.7: A map created from a multilayered raster.\n\n\n\n\nIf you want to learn more – we focus on how to specify and modify facets (also known as small multiples) in Chapter 14 and how to modify map layout in Chapter 12.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-layers.html#sec-tile-layer",
    "href": "XX-layers.html#sec-tile-layer",
    "title": "6  Layers",
    "section": "\n6.6 Tile",
    "text": "6.6 Tile\n\n\nTile layers can be used for two purposes: either as a basemap or an overlay layer. By default, three basemaps are used in the interactive mode (tmap_mode(\"view\")): \"Esri.WorldGrayCanvas\", \"OpenStreetMap\", and \"Esri.WorldTopoMap\". However, we can change the basemaps with a vector with the names of the tile layers’ providers (Figure 6.8).\n\ntmap_mode(\"view\")\ntm_basemap(c(StreetMap = \"OpenStreetMap\", TopoMap = \"OpenTopoMap\")) +\n  tm_shape(slo_cities, is.main = TRUE) + \n  tm_dots(col = \"red\", group = \"slo_cities\")\n\n\n\n\n\n\n\n\nFigure 6.8: OpenStreetMap tile layer used as a base map with the red dots representing cities in Slovenia.\n\n\n\nIn the above code, we made two basemaps available: \"OpenStreetMap\" and \"OpenTopoMap\", and for the map legend purpose, we renamed them as StreetMap and TopoMap. A complete list of available basemaps is in the leaflet::providers object and on the https://leaflet-extras.github.io/leaflet-providers/preview/ website1.      The tm_basemap(NULL) function allows to disable basemaps entirely.\nThe tm_tiles() function, on the other hand, draws the tile layer on the top (as an overlay layer) of the previous tm_ layer. In the next example, we put the vector \"CartoDB.PositronOnlyLabels\" tiles on top of the previously set basemaps, but below the dots layer (Figure 6.9).\n\ntm_basemap(c(StreetMap = \"OpenStreetMap\", TopoMap = \"OpenTopoMap\")) +\n  tm_tiles(c(CartoDB = \"CartoDB.PositronOnlyLabels\")) +\n  tm_shape(slo_cities, is.main = TRUE) + \n  tm_dots(col = \"red\", group = \"slo_cities\")\n\n\n\n\n\n\n\n\nFigure 6.9: OpenStreetMap tile layer used as a base map with dashed lines representing island coastline and the red dots representing slo_cities on Easter Island.\n\n\n\nTile layers are usually created to be used interactively. We can see it, for example, by the number of details varying depending on the zoom level we set. That being said, many people find them useful also for static maps, and tmap allows us to use them in this way. It uses the maptiles package to download the tiles and then plot them as a raster layer.\nA complete list of available providers and some information about zoom levels are in the help file of the ?maptiles::get_tiles() function. Different map tiles providers offer unique map styles, while zoom levels relate to different levels of detail – the larger level, the more details we will get. When using map tiles, we should also consider adding their attribution to the map. Attribution for each provider can be obtained using the maptiles::get_credit() function by specifying the provider name, for example, get_credit(\"CartoDB.VoyagerNoLabels\").\nThe code below plots the \"CartoDB.VoyagerNoLabels\" tiles in the background, adds the island outline in light blue color, and puts attribution text in the bottom right corner of the map (Figure 6.10)).\n\ntmap_mode(\"plot\")\n#&gt; ℹ tmap mode set to \"plot\".\ntm_basemap(\"CartoDB.VoyagerNoLabels\") + \n  tm_shape(slo_borders) +\n  tm_borders(lwd = 5, col = \"lightblue\") +\n  tm_credits(maptiles::get_credit(\"CartoDB.VoyagerNoLabels\"),\n             bg.color = \"white\")\n\n\n\n\n\n\nFigure 6.10: Example of a static map using a downloaded \"CartoDB.VoyagerNoLabels\" tile layer.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-layers.html#footnotes",
    "href": "XX-layers.html#footnotes",
    "title": "6  Layers",
    "section": "",
    "text": "Additional details can be found in the leaflet::providers.details object↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Layers</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html",
    "href": "XX-visual-variables.html",
    "title": "7  Visual variables",
    "section": "",
    "text": "7.1 Constant visual values\nBefore we start using visual variables, it is worth reminding that we can set constant values for visual variables: fill, color, size, and shape for all objects on the map. For example, with tm_polygons() we can fill all polygons with the same color, and set borders to the same color, width, and type (Figure 7.2).\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"lightblue\", \n              col = \"black\",\n              lwd = 0.5,\n              lty = \"dashed\")\n\n\n\n\n\n\nFigure 7.2: Example of a map with all polygons filled with the same color.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html#sec-auto-scales",
    "href": "XX-visual-variables.html#sec-auto-scales",
    "title": "7  Visual variables",
    "section": "\n7.2 Automatic scales",
    "text": "7.2 Automatic scales\nOn the other hand, if we provide a name of the column (variable) we want to visualize, tmap will automatically set the visual variables. The tmap package has many defaults that automatically specify colors, sizes, and shapes used on the maps. Thus, for example, when we provide a character variable’s name to the fill argument, then the color scale for a categorical variable is set, and when we provide a numeric variable’s name to the size argument, then the size scale for a continuous variable is used. However, tmap also allows us to change them with a few additional functions, including tm_scale() and tm_legend(). In this and the following sections, we will show how to use the tm_scale() function to modify the appearance of the visual variables. \nThe most basic use of the tm_scale() function is to modify the appearance of the map, such as changing the color palette (col.scale and fill.scale), sizes (size.scale), or shapes (shape.scale). This is done with the values argument, which can be one of many things, depending on the visual variable. For example, for colors, it can be a vector of colors, a palette function, or a name of a build-in palette; for sizes, it can be a numerical variable; and for shapes, it can be a custom icon or a numerical variable (Figure 7.3).\ntm_shape(slo_cities) +\n  tm_symbols(fill = \"population\",\n             fill.scale = tm_scale(values = \"greens\"))\ntm_shape(slo_cities) +\n  tm_symbols(col = \"population\",\n             col.scale = tm_scale(values = c(\"red\", \"blue\")))\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\",\n             size.scale = tm_scale(values = 1:5))\ntm_shape(slo_cities) + \n  tm_symbols(shape = \"population\", \n             shape.scale = tm_scale(values = 1:6))\n\n\n\n\n\n\n\n\n\n(a) A name of a build-in color palette\n\n\n\n\n\n\n\n\n\n(b) A vector of colors\n\n\n\n\n\n\n\n\n\n\n\n(c) A numerical variable for sizes\n\n\n\n\n\n\n\n\n\n(d) A numerical variable for shapes\n\n\n\n\n\n\nFigure 7.3: Examples of various ways of specifying values for visual variables\n\n\nThe following sections Section 7.3, Section 7.4, and Section 7.5 explain the basic visual variables. Next, they show how to set colors, sizes, and shapes for different types of spatial objects.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html#sec-colors",
    "href": "XX-visual-variables.html#sec-colors",
    "title": "7  Visual variables",
    "section": "\n7.3 Colors",
    "text": "7.3 Colors\n Colors, along with sizes and shapes, are the most often used to express values of attributes or their properties. Proper use of colors draws the attention of viewers and has a positive impact on the clarity of the presented information. On the other hand, poor decisions about colors can lead to misinterpretation of the map.\n \n\n\n\n Colors in R are created based either on the color name or its hexadecimal form. R understands 657 built-in color names, such as \"red\", \"lightblue\" or \"gray90\", that are available using the colors() function.   Hexadecimal form, on the other hand, can represent 16,777,216 unique colors. It consists of six-digits prefixed by the # (hash) symbol, where red, green, and blue values are each represented by two characters. In hexadecimal form, 00 is interpreted as 0.0 which means a lack of a particular color and FF means 1.0 and shows that the given color has maximal intensity. For example, #000000 represents black color, #FFFFFF white color, and #00FF00 green color. \nUsing a single color we are able to draw points, lines, polygon borders, or their areas. In that scenario, all of the elements will have the same color. However, often, we want to represent different values in our data using different colors. This is a role for color palettes. A color palette is a set of colors used to distinguish the values of variables on maps.\n Color palettes in R are usually stored as a vector of either color names or hexadecimal representations. For example, c(\"red\", \"green\", \"blue\") or c(\"#66C2A5\", \"#FC8D62\", \"#8DA0CB\"). It allows every one of us to create our own color palettes. However, the decision on how to decide which colors to use is not straightforward, and usually requires thinking about several aspects.\n Firstly, what kind of variable we want to show?  Is it a categorical variable where each value represents a group or a numerical variable in which values have order?  The variable type impacts how it should be presented on the map. For categorical variables, each color usually should receive the same perceptual weight, which is done by using colors with the same brightness, but different hue. On the other hand, for numerical variables, we should easily understand which colors represent lower and which represent higher values. This is done by manipulating colorfulness and brightness. For example, low values could be presented by a blue color with low colorfulness and high brightness, and with growing values, colorfulness increases, and brightness decreases.\n The next consideration is related to how people  perceive some colors. Usually, we want them to be able to preliminary understand which values the colors represent without looking at the legend – colors should be intuitive. For example, in the case of categorical variables representing land use, we usually want to use some type of blue color for rivers, green for trees, and white for ice. This idea also extends to numerical variables, where we should think about the association between colors and cultural values. The blue color is usually connected to cold temperature, while the red color is hot or can represent danger or something not good. However, we need to be aware that the connection between colors and cultural values varied between cultures. \n Another thing to consider is to use a color palette that is accessible for people with color vision deficiencies (color blindness).  There are several types of color blindness, with red-green color blindness (deuteranomaly) being the most common. It is estimated that up to about 8% of the male population and about 0.5% of the female population in some regions of the world is color blind (Birch 2012; Sharpe et al. 1999). \n\n\nThe relation between the selected color palette and other map elements or the map background should also be taken into consideration. For example, using a bright or dark background color on a map has an impact on how people will perceive different color palettes.   \n\n\n\n\n Generally, color palettes can be divided into three main types (Figure 7.4):\n\n\nCategorical (also known as Qualitative): used for presenting categorical information, such as categories or groups. Every color in this type of palette should receive the same perceptual weight, and the order of colors is meaningless. Categorical color palettes are usually limited to a dozen or so different colors, as our eyes have problems with distinguishing a large number of different hues. Their use includes, for example, regions of the world or land cover categories.\n\nSequential: used for presenting continuous variables, in which order matters. Colors in this palette type changes from low to high (or vice versa), which is usually underlined by luminance differences (light-dark contrasts). Sequential palettes can be found in maps of GDP, population density, elevation, and many others.\n\nDiverging: used for presenting continuous variables, but where colors diverge from a central neutral value to two extremes. Therefore, in a sense, they consist of two sequential palettes that meet in the midpoint value. Examples of diverging palettes include maps where a certain temperature or median value of household income is use as the midpoint. It can also be used on maps to represent differences or change as well.\n\n\n\n\n\n\n\n\nFigure 7.4: Examples of three main types of color palettes: categorical, sequential, and diverging\n\n\n\n\n Gladly, a lot of work has been put on creating color palettes that are grounded in the research of perception and design. Currently, several dozens of R packages contain hundreds of color palettes. The most popular among them are RColorBrewer (Neuwirth 2014) and viridis (Garnier 2018). RColorBrewer builds upon a set of perceptually ordered color palettes (Harrower and Brewer 2003) and the associated website at https://colorbrewer2.org. The website not only presents all of the available color palettes, but also allow to filter them based on their properties, such as being colorblind safe or print-friendly. The viridis package has five color palettes that are perceptually uniform and suitable for people with color blindness. Four palettes in this package (“viridis”, “magma”, “plasma”, and “inferno”) are derived from the work on the color palettes for the matplotlib Python library. The last one, “cividis”, is based on the work of Nuñez, Anderton, and Renslow (2018).\n\nRColorBrewer::brewer.pal(7, \"RdBu\")\n#&gt; [1] \"#B2182B\" \"#EF8A62\" \"#FDDBC7\" \"#F7F7F7\" \"#D1E5F0\" \"#67A9CF\" \"#2166AC\"\nviridis::viridis(7)\n#&gt; [1] \"#440154FF\" \"#443A83FF\" \"#31688EFF\" \"#21908CFF\" \"#35B779FF\" \"#8FD744FF\"\n#&gt; [7] \"#FDE725FF\"\n\n In the last few years, the grDevices package that is an internal part of R, has received several improvements in color palette handling.2 It includes the creation of hcl.colors() and palette.colors(). The hcl.colors() function incorporates color palettes from several R packages, including RColorBrewer, viridis, rcartocolor (CARTO 2019; Nowosad 2018), and scico (Crameri 2018; Pedersen and Crameri 2020). You can get the list of available palette names for hcl.colors() using the hcl.pals() function and visualize all of the palettes with colorspace::hcl_palettes(plot = TRUE). The palette.colors() function adds several palettes for categorical data. It includes \"Okabe-Ito\" suited for color vision deficiencies or \"Polychrome 36\" that has 36 unique colors (Coombes et al. 2019). You can find the available names of the palettes for this function using palette.pals()\n\ngrDevices::hcl.colors(7, \"Oslo\")\n#&gt; [1] \"#FCFCFC\" \"#C2CEE8\" \"#86A2D3\" \"#3C79C0\" \"#275182\" \"#132B48\" \"#040404\"\ngrDevices::palette.colors(7, \"Okabe-Ito\")\n#&gt; [1] \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\"\n\nThe cols4all package  is a set of tools for selecting color palettes; it also includes all of the groups of color palettes mentioned above and more. Its main function is cols4all::c4a_gui() that starts an interactive application allowing to see and examine hundreds of color palettes. Each color palette shown cols4all::c4a_gui() can be used in tmap.\n One of the most widely used color palettes is “rainbow” (the rainbow() function in R). It was inspired by colors of a rainbow – a set of seven colors going from red to violet. However, this palette has a number of disadvantages, including irregular changes in brightness affecting its interpretation or being unsuitable for people with color vision deficiencies (Borland and Taylor Ii 2007; Stauffer et al. 2015; Quinan et al. 2019). Depending on a given situation, there are many palettes better suited for visualization than “rainbow”, including sequential \"viridis\" and \"ag_sunset\" or diverging \"pu_gn\" and \"geyser\". All of them can be specified in tmap.3 More examples showing alternatives to the “rainbow” palette are in the documentation of the colorspace package at https://colorspace.r-forge.r-project.org/articles/endrainbow.html (Zeileis et al. 2019).\nBy default, the tmap package attempts to identify the type of variable used. For example, it uses \"area7\" for a categorical (unordered) variable, \"blues3\" for a sequential variable, and “pu_gn” for a diverging one (Figure 7.5). \n\ntm_shape(slo_regions) + \n  tm_polygons(\"pop_dens\")\n\nThere are three main ways to specify color palettes as an values argument of the tm_scale() family of functions.  This argument accepts (1) a vector of colors, (2) a palette function, or (3) one of the built-in palette names (Figure 7.5). A vector of colors can be specified using color names or hexadecimal representations (Figure 7.5). Importantly, the length of the provided vector does not need to be equal to the number of colors in the map legend. tmap automatically interpolates new colors when a smaller number of colors are provided.\n\ntm_shape(slo_regions) +\n  tm_polygons(\"pop_dens\",\n              fill.scale = tm_scale(values = c(\"yellow\", \"darkgreen\")))\n\nAnother approach is to provide the output of a palette function (Figure 7.5). In the example below, we derived seven colors from \"ag_GrnYl\" palette. This palette goes from green colors to yellow ones, however, we wanted to reverse the order of this palette. Thus, we also used the rev() function here.\n\ntm_shape(slo_regions) +\n  tm_polygons(\"pop_dens\", \n              fill.scale = tm_scale(values = rev(hcl.colors(7, \"ag_GrnYl\"))))\n\nThe last approach is to use one of the names of color palettes built in tmap (Figure 7.5). In this example, we used the \"brewer.yl_gn\" palette that goes from yellow to green.\n\ntm_shape(slo_regions) +\n  tm_polygons(\"pop_dens\",\n              fill.scale = tm_scale(values = \"brewer.yl_gn\"))\n\nIt is also possible to reverse the order of any named color palette by using the - prefix. Therefore, \"-yl_gn\" will return a palette going from green to yellow.\n\n\n\n\n\n\n\n\n\n(a) default sequential color palette\n\n\n\n\n\n\n\n\n\n(b) palette created based on provided vector of colors\n\n\n\n\n\n\n\n\n\n\n\n(c) palette created using the hcl.colors() function\n\n\n\n\n\n\n\n\n\n(d) one of the build-in palettes\n\n\n\n\n\n\nFigure 7.5: Examples of four ways of specifying color palettes\n\n\n\n\nThe default color palette for positive numerical variables is \"blues3\" as seen in Figure 7.6 (a). On the other hand, when the given variable has both negative and positive values, then tmap uses the \"pu_gn\" color palette, with purple colors below the midpoint value, light gray color around the midpoint value, and green colors above the midpoint value. The use of diverging color palettes can be adjusted using the midpoint argument. It has a value of 0 as the default, however, it is possible to change it to any other value. For example, we want to create a map that shows regions with population density (pop_dens) below and above the median value of about 101 people per square kilometer. To do that, we just need to set the midpoint argument to this value (Figure 7.6 (b)).\n\n# mean(slo_regions$pop_dens, na.rm = TRUE)\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\", \n              fill.scale = tm_scale(midpoint = 101))\n\n\n\n\n\n\n\n\n\n\n(a) the default sequential color palette\n\n\n\n\n\n\n\n\n\n(b) the diverging color palette around the midpoint value of 73\n\n\n\n\n\n\nFigure 7.6: Examples of maps with different midpoints used\n\n\nNow the regions with low population density are presented with purple colors, light gray areas represent countries with population density around the median value (the midpoint in our case), and the regions with high population density are represented by green colors.\nThe above examples all contain several polygons with missing values of a given variable. Objects with missing values are, by default, represented by gray color and a related legend label Missing. However, it is possible to change this color with the value.na argument and its label with label.na.\ntmap has a special way to manually set colors for categorical maps. It works by providing a named vector to the values argument. In this vector, the names of the categories from the categorical variable are the vector names, and specified colors are the vector values. You can see it in the example below, where we plot the \"region_group\" categorical variable (Figure 7.7). Each category in this variable (e.g., \"Central\") has a new, connected to it color (e.g., \"#7fbee9\").  \n\ntm_shape(slo_regions) + \n  tm_polygons(\"region_group\", \n    fill.scale = tm_scale(values = c(\n      \"Central\" = \"#7fbee9\",\n      \"East\" = \"#ffd14d\", \n      \"North\" = \"#14909a\",\n      \"South\" = \"#df5454\",\n      \"West\" = \"#7b1072\")\n    ))\n\n\n\n\n\n\nFigure 7.7: An example of a categorical map with manually selected colors.\n\n\n\n\n Finally, visualized colors can be additionally modified. It includes setting the col_alpha and fill_alpha arguments that represents the transparency of the used colors. By default, the colors are not transparent at all as the value of col_alpha and fill_alpha is 1. However, we can decrease this value to 0 – a total transparency. The col_alpha/ fill_alpha argument is useful in two ways: one – it allows us to see-through some large objects (e.g., some points below the polygons or a hillshade map behind the colored raster of elevation), second – it makes colors more subtle.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html#sec-sizes",
    "href": "XX-visual-variables.html#sec-sizes",
    "title": "7  Visual variables",
    "section": "\n7.4 Sizes",
    "text": "7.4 Sizes\n\nslo_cities = read_sf(\"data/slovenia/slo_cities.gpkg\")\n\nDifferences in sizes between objects are relatively easy to recognize on maps. Sizes can be used for points, lines (line widths), or text to represent quantitative (numerical) variables, where small values are related to small objects and large values are presented by large objects. Large sizes can also be used to attract viewers’ attention.\nBy default, tmaps present points, lines, or text objects of the same size. For example, tm_symbols() returns a map where each object is a circle with a consistent size4. We can change the sizes of all objects using the size argument (Figure 7.8 (a)).\n\ntm_shape(slo_cities) +\n  tm_symbols(size = 0.5) \n\nOn the other hand, if we provide the name of the numerical variable in the size argument (e.g., \"population\"), then symbol sizes are scaled proportionally to the provided values. Objects with small values will be represented by smaller circles, while larger values will be represented by larger circles (Figure 7.8 (b)).\n\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\") \n\n\n\n\n\n\nWe can adjust size legend breaks with ticks and the corresponding labels with labels (Figure 7.8 C) as arguments of the tm_scale function provided to the size.scale argument.\n\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\",\n            size.scale = tm_scale(ticks = c(50000, 300000),\n                                  labels = c(\"small\", \"large\")))\n\nFor example in the above code, we just show examples of how symbols with population values of 50,000 and 300,000 are represented on the map.\n\n\n\n\n\n\n\n\n\n(a) all symbols have a consistent size of 0.5\n\n\n\n\n\n\n\n\n\n(b) sizes of symbols depend on the values of the population variable\n\n\n\n\n\n\n\n\n\n(c) sizes of symbols have a manually created legend\n\n\n\n\n\n\nFigure 7.8: Examples of three approaches for changing sizes of symbols\n\n\nWidths of the lines can represent values of numerical variables for line data similar to sizes of the symbols for point data. The lwd argument in tm_lines() creates thin lines for small values and thick lines for large values of the given variable (Figure 7.9).\n\nslo_railroads = read_sf(\"data/slovenia/slo_railroads.gpkg\")\ntm_shape(slo_railroads) + \n  tm_lines(lwd = \"track_width\")\n\n\n\n\n\n\nFigure 7.9: Example of a map where lines’ widths represent values of the corresponding lines.\n\n\n\n\nIn the above example, values of the \"track_width\" are divided into five groups and represented by five line widths. Lines’ thickness can be change using the values.scale argument of tm_scale(), where the value of 1 is the default, and increasing this values increases lines’ thickness. \n\nText labels have a role in naming features on a map or just highlighting some of them. Usually, the size of text labels is consistent for the same spatial objects.  However, text labels can also be used to represent the values of some numerical variables. Figure 7.10 shows an example, in which text labels show names of different slo_cities areas, while their sizes are related to their elevations. \n\ntm_shape(slo_cities) +\n  tm_text(text = \"name\", size = \"population\") +\n  tm_layout(legend.outside = TRUE)\n\n\n\n\n\n\nFigure 7.10: Example of a map where text sizes represent elevations of the slo_cities.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html#sec-shapes",
    "href": "XX-visual-variables.html#sec-shapes",
    "title": "7  Visual variables",
    "section": "\n7.5 Shapes",
    "text": "7.5 Shapes\n\n\nShapes allow representing different categories of point data. They can be very generic, e.g., circle or square, just to be able to differentiate between categories, but often we use symbols that we associate with different types of features. For example, we use the letter P for parking lots, I for information centers, an airplane symbol for airports, or a bus symbol for bus stops.\nTo use different shapes, we should use the shape argument in the tm_symbols() function. It expects the name of the categorical variable.\n\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\")\n\n\nBy default, tmap uses symbols of filled circle, square, diamond, point-up triangle, and point-down triangle5. However, it is also possible to customize used symbols, their title, and labels. Legend titles related to shapes and their labels are modified with the shape.legend argument.\nShapes can be specified with the shapes argument, which allows using one of three options. The first one is a numeric value that specifies the plotting character of the symbol. A complete list of available symbols and their corresponding numbers is in the ?pch function’s documentation. \n\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\",\n             shape.scale = tm_scale(values = c(0, 2)))\n\nThe second option is to use a grob object.  \n\n# library(grid)\n# library(ggplotify)\nlibrary(ggplot2)\n\n# p1 = as.grob(~barplot(1:10))\n# p2 = as.grob(expression(plot(rnorm(10), yaxt = \"n\", xaxt = \"n\", ann = FALSE, bty = \"n\")))\n# p3 = as.grob(function() plot(sin, yaxt = \"n\", xaxt = \"n\", ann = FALSE, bty = \"n\"))\np4 = ggplotGrob(ggplot(data.frame(x = 1:5, y = 1:5), aes(x, y)) + geom_point() + theme_void())\n\n\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\",\n             shape.scale = tm_scale(values = list(p4, p4, p4)))\n\n\n\n\n\nThe last possibility is to use an icon specification created with the tmap_icons() function, that uses any png images. The tmap_icons() function accepts a vector of file paths or urls, and also allows setting the width and height of the icon. In our example, we have three distinct groups, therefore we need to create new icons based on three images – icon1.png, icon2.png, and icon3.png in this case.\n\nmy_icons = tmap_icons(c(\"images/icon1.png\", \n                        \"images/icon2.png\"))\n\nNow, we can use the prepared icons in the shapes argument (Figure 7.11 (d)). \n\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\",\n             shape.scale = tm_scale(values = my_icons))\n\n\n\n\n\n\n\n\n\n\n(a) default symbols\n\n\n\n\n\n\n\n\n\n(b) user-defined symbols\n\n\n\n\n\n\n\n\n\n(c) grob objects\n\n\n\n\n\n\n\n\n\n(d) icons\n\n\n\n\n\nFigure 7.11: Examples of maps with different symbols",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html#sec-mixing-visual-variables",
    "href": "XX-visual-variables.html#sec-mixing-visual-variables",
    "title": "7  Visual variables",
    "section": "\n7.6 Mixing visual variables",
    "text": "7.6 Mixing visual variables\nThe values of a given variable can be expressed by different categorical or sequential colors in polygons. Lines can be also colored by one variable, but also widths of the lines can represent values of another quantitative variable. When we use symbols, then we are able to use colors for one qualitative or quantitative variable, sizes for a quantitative variable, and shapes for another qualitative variable. Therefore, it is possible to mix some visual variables for symbols and lines. This section shows only some possible examples of mixing visual variables.\nFigure 7.12 (a) shows symbols, which sizes are scales based on the population variable and they are colored using the values from place. This can be set with the size and fill arguments.\n\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\",\n             fill = \"place\")\n\nWe can also modify all of the visual variables using the additional arguments explained in the next sections. For example, we can set the color style, color palette, or specify shapes (Figure 7.12 (b)).\n\ntm_shape(slo_cities) +\n  tm_symbols(fill = \"population\",\n             fill.scale = tm_scale(values = \"Greens\"),\n             shape = \"place\",\n             shape.scale = tm_scale(values = c(23, 24, 25)))\n\n\n\n\n\n\n\n\n\n\n\n(a) size and fill\n\n\n\n\n\n\n\n\n\n\n\n(b) fill and shape\n\n\n\n\n\n\nFigure 7.12: Examples of maps using two visual variables at the same time\n\n\n\nFor line data, we can present its qualitative and quantitative variables using colors and quantitative variables using sizes (line widths) (Figure 7.13).\n\n\n\n\n\n\n\nFigure 7.13: A map using two visual variables, color, and size (line width), at the same time.\n\n\n\n\n\n\n\n\nBirch, Jennifer. 2012. “Worldwide Prevalence of Red-Green Color Deficiency.” Journal of the Optical Society of America A 29 (3): 313. https://doi.org/ggkw82.\n\n\nBorland, David, and Russell Taylor Ii. 2007. “Rainbow Color Map (Still) Considered Harmful.” IEEE Computer Graphics and Applications 27 (2): 14–17. https://doi.org/cf7nms.\n\n\nCARTO. 2019. “CARTOColors Data-Driven Color Schemes.” https://carto.com/carto-colors/.\n\n\nCoombes, Kevin R., Guy Brock, Zachary B. Abrams, and Lynne V. Abruzzo. 2019. “Polychrome : Creating and Assessing Qualitative Palettes with Many Colors.” Journal of Statistical Software 90 (Code Snippet 1). https://doi.org/ggkqvs.\n\n\nCrameri, Fabio. 2018. “Geodynamic Diagnostics, Scientific Visualisation and StagLab 3.0.” Geoscientific Model Development 11 (6): 2541–62. https://doi.org/gdt4tg.\n\n\nGarnier, Simon. 2018. Viridis: Default Color Maps from ’Matplotlib’. https://CRAN.R-project.org/package=viridis.\n\n\nHarrower, Mark, and Cynthia A. Brewer. 2003. “ColorBrewer.org: An Online Tool for Selecting Colour Schemes for Maps.” The Cartographic Journal 40 (1): 27–37. https://doi.org/ch4c57.\n\n\nNeuwirth, Erich. 2014. RColorBrewer: ColorBrewer Palettes. https://CRAN.R-project.org/package=RColorBrewer.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://nowosad.github.io/rcartocolor.\n\n\nNuñez, Jamie R., Christopher R. Anderton, and Ryan S. Renslow. 2018. “Optimizing Colormaps with Consideration for Color Vision Deficiency to Enable Accurate Interpretation of Scientific Data.” Edited by Jesús Malo. PLOS ONE 13 (7): e0199239. https://doi.org/gdzkg4.\n\n\nPedersen, Thomas Lin, and Fabio Crameri. 2020. Scico: Colour Palettes Based on the Scientific Colour-Maps. https://CRAN.R-project.org/package=scico.\n\n\nQuinan, P. S., L. M. Padilla, S. H. Creem-Regehr, and M. Meyer. 2019. “Examining Implicit Discretization in Spectral Schemes.” Computer Graphics Forum 38 (3): 363–74. https://doi.org/ggb9nd.\n\n\nSharpe, Lindsay T, Andrew Stockman, Herbert Jägle, and Jeremy Nathans. 1999. “Opsin Genes, Cone Photopigments, Color Vision, and Color Blindness.” In Color Vision: From Genes to Perception, edited by T Gegenfurtner and Lindsay T Sharpe, 50. Cambridge: Cambridge University Press.\n\n\nStauffer, Reto, Georg J. Mayr, Markus Dabernig, and Achim Zeileis. 2015. “Somewhere Over the Rainbow: How to Make Effective Use of Colors in Meteorological Visualizations.” Bulletin of the American Meteorological Society 96 (2): 203–16. https://doi.org/f3sttk.\n\n\nZeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D. McWhite, Paul Murrell, Reto Stauffer, and Claus O. Wilke. 2019. “colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes.” arXiv 1903.06490. arXiv.org E-Print Archive. http://arxiv.org/abs/1903.06490.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-visual-variables.html#footnotes",
    "href": "XX-visual-variables.html#footnotes",
    "title": "7  Visual variables",
    "section": "",
    "text": "Other visual variables include position, orientation, and texture.↩︎\nLearn more about them at https://developer.r-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/ and https://developer.r-project.org/Blog/public/2019/11/21/a-new-palette-for-r/index.html.↩︎\nYou can also derive them using cols4all::c4a() function.↩︎\nThe default value of size is 1, which corresponds to the area of symbols that have the same height as one line of text.↩︎\nThey are represented in R by numbers from 21 to 25.↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Visual variables</span>"
    ]
  },
  {
    "objectID": "XX-scales.html",
    "href": "XX-scales.html",
    "title": "8  Scales",
    "section": "",
    "text": "8.1 Categorical scales\nAn example of a categorical map can be seen in Figure 8.1. We created it by providing a character variable’s name, \"region_group\", in the fill argument.\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"region_group\")\n\n\n\n\n\n\nFigure 8.1: Example of a map in which polygons are colored based on the values of a categorical variable.\nThe tm_polygons(fill = \"region_un\", fill.scale = tm_scale_categorical()) code is run automatically in the background in this case. It is possible to change the names of legend labels with the labels argument of the tm_scale() function. As mentioned in the Section 7.3 we can also change the used color palette with the values argument.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#sec-intervals-scales",
    "href": "XX-scales.html#sec-intervals-scales",
    "title": "8  Scales",
    "section": "\n8.2 Intervals scales",
    "text": "8.2 Intervals scales\n\n Intervals scales are used to represent continuous numerical variables using set of class intervals. In other words, values are divided into several groups based on their properties. Several approaches can be used to convert continuous variables to intervals, and each of them could result in different groups of values.  Most of them use the classInt package (Bivand 2020) in the background, therefore some additional information can be found in the ?classIntervals function’s documentation.\nBy default, the tm_scale_intervals() function is used in the background (Figure 8.2 (a)). It uses a style called “pretty”, which creates breaks that are whole numbers and spaces them evenly 1.\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\")\n\nIt is also possible to indicate the desired number of classes using the n argument of the tm_scale() function provided to the fill.scale argument. While not every n is possible depending on the input values, tmap will try to create a number of classes as close to possible to the preferred one.\nThe next approach is to manually select the limits of each break with the breaks argument of tm_scale() (Figure 8.2 (b)). This can be useful when we have some pre-defined breaks, or when we want to compare values between several maps. It expects threshold values for each break, therefore, if we want to have three breaks, we need to provide four thresholds. Additionally, we can add a label to each break with the labels argument.\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\", \n              fill.scale = tm_scale_intervals(breaks = c(0, 100, 150, 250),\n                                              labels = c(\"low\", \"medium\", \"high\")))\n\nAnother approach is to create breaks automatically using one of many existing classification methods with the style argument of the tm_scale() function. Three basic methods are \"equal\", \"sd\", and \"quantile\" styles. Let’s consider a variable with 100 observations ranging from 0 to 10. The \"equal\" style divides the range of values into n equal-sized intervals. This style works well when the values change fairly continuously and do not contain any outliers. In tmap, we can specify the number of classes with the n argument or the number of classes will be computed automatically . For example, when we set n to 4, then our breaks will represent four classes ranging from 0 to 2.5, 2.5 to 5, 5 to 7.5, and 7.5 to 10. The \"sd\" style represents how much values of a given variable varies from its mean, with each interval having a constant width of the standard deviation. This style is used when it is vital to show how values relate to the mean. The \"quantile\" style creates several classes with exactly the same number of objects (e.g., spatial features), but having intervals of various lengths. This method has an advantage or not having any empty classes or classes with too few or too many values. However, the resulting intervals from the \"quantile\" style can often be misleading, with very different values located in the same class.\nTo create classes that, on the one hand, contain similar values, and on the other hand, are different from the other classes, we can use some optimization method. The most common optimization method used in cartography is the Jenks optimization method implemented at the \"jenks\" style (Figure 8.2 (c)).\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\", \n              fill.scale = tm_scale_intervals(style = \"jenks\"))\n\nThe Fisher method (style = \"fisher\") has a similar role, which creates groups with maximized homogeneity (Fisher 1958). A different approach is used by the dpih style, which uses kernel density estimations to select the width of the intervals (Wand 1997). You can visit ?KernSmooth::dpih for more details.\nAnother group of classification methods uses existing clustering methods. It includes k-means clustering (\"kmeans\"), bagged clustering (\"bclust\"), and hierarchical clustering (\"hclust\"). \nFinally, there are a few methods created to work well for a variable with a heavy-tailed distribution, including \"headtails\" and \"log10_pretty\". The \"headtails\" style is an implementation of the head/tail breaks method aimed at heavily right-skewed data. In it, values of the given variable are being divided around the mean into two parts, and the process continues iteratively for the values above the mean (the head) until the head part values are no longer heavy-tailed distributed (Jiang 2013). The \"log10_pretty\" style uses a logarithmic base-10 transformation (Figure 8.2 (d)). In this style, each class starts with a value ten times larger than the beginning of the previous class. In other words, each following class shows us the next order of magnitude. This style allows for a better distinction between low, medium, and high values. However, maps with logarithmically transformed variables are usually less intuitive for the readers and require more attention from them.\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\", \n              fill.scale = tm_scale_intervals(style = \"log10_pretty\"))\n\n\n\n\n\n\n\n\n\n\n\n(a) The “pretty” method\n\n\n\n\n\n\n\n\n\n(b) The “fixed” method\n\n\n\n\n\n\n\n\n\n\n\n(c) The “jenks” method\n\n\n\n\n\n\n\n\n\n(d) The “log10_pretty” method\n\n\n\n\n\n\nFigure 8.2: Examples of four methods of creating intervals maps",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#sec-discrete-scales",
    "href": "XX-scales.html#sec-discrete-scales",
    "title": "8  Scales",
    "section": "\n8.3 Discrete scales",
    "text": "8.3 Discrete scales",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#sec-continuous-scales",
    "href": "XX-scales.html#sec-continuous-scales",
    "title": "8  Scales",
    "section": "\n8.4 Continuous scales",
    "text": "8.4 Continuous scales\n Continuous maps also represent continuous numerical variables, but without any discrete class intervals (Figure 8.3). A few continuous methods exist in tmap, including tm_scale_continuous(), tm_scale_rank(), and tm_scale_continuous_log10().\nThe tm_scale_continuous() function creates a smooth, linear gradient. In other words, the change in values is proportionally related to the change in colors. We can see that in Figure 8.3 (a), where the value change from 50 to 100 has a similar impact on the color scale as the value change from 100 to 150. The continuous scale is similar to the pretty style, where the values also change linearly. The main difference between them is that we can see differences between, for example, values of 110 and 140 in the former, while both values have exactly the same color in the later one. The continuous scale works well in situations where there is a large number of objects in vectors or a large number of cells in rasters, and where the values change continuously (do not have many outliers).\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.scale = tm_scale_continuous())\n\nHowever, when the presented variable is skewed or have some outliers, we can use either tm_scale_rank() or tm_scale_continuous_log10(). The tm_scale_rank() scale also uses a smooth gradient with a large number of colors, but the values on the legend do not change linearly (Figure 8.3 (b)).  It is fairly analogous to the \"quantile\" style, with the values on a color scale that divides a dataset into several equal-sized groups.\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.scale = tm_scale_rank())\n\nFinally, the tm_scale_continuous_log10() scale is the continuous equivalent of the \"log10_pretty\" style of tm_scale_intervals() (Figure 8.3 (c)).\n\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.scale = tm_scale_continuous_log10())\n\n\n\n\n\n\n\n\n\n\n(a) The “continuous” method\n\n\n\n\n\n\n\n\n\n(b) The “rank” method\n\n\n\n\n\n\n\n\n\n(c) The “log10” method\n\n\n\n\n\n\nFigure 8.3: Examples of three methods of creating continuous maps",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#sec-rgb-scales",
    "href": "XX-scales.html#sec-rgb-scales",
    "title": "8  Scales",
    "section": "\n8.5 RGB scales",
    "text": "8.5 RGB scales\n\nlibrary(stars)\nsat = read_stars(\"data/slovenia/slo_mosaic.tif\")\n\nThe sat object contains four bands of the Sentinel-2 image for Slovenia. The bands (blue, green, red, and near-infrared) are stored in the band dimension as B02, B03, B04, and B08. We can plot all of the bands independently or as a combination of three bands. This combination is known as a color composite image, and we can create such images with the tm_rgb() function (Figure 8.4).\nStandard composite image (true color composite) uses the visible red, green, and blue bands to represent the data in natural colors. We can specify which band in sat relates to red (third band), green (second band), and blue (first band) color in tm_rgb().    \n\ntm_shape(sat) +\n  tm_rgb(tm_vars(dimvalues = c(\"B04\", \"B03\", \"B02\"), n = 3, multivariate = TRUE),\n         col.scale = tm_scale_rgb(stretch = TRUE, probs = c(0.02, 0.98)))\n\nTrue color images are straightforward to interpret and understand, but they make subtle differences in features challenging to recognize. However, nothing stops us from using the above tools to integrate different bands to create so called false color composites. Various band combinations emphasize some spatial characteristics, such as water, agriculture, etc., and allow us to visualize wavelengths that our eyes can not see.  Figure 8.4 (b) shows a composite of near-infrared, red, and green bands, highlighting vegetation with a bright red color.\n\ntm_shape(sat) +\n  tm_rgb(tm_vars(dimvalues = c(\"B08\", \"B04\", \"B03\"), n = 3, multivariate = TRUE),\n         col.scale = tm_scale_rgb(stretch = TRUE, probs = c(0.02, 0.98)))\n\n\n\n\n\n\n\n\n\n\n\n(a) True color composite image\n\n\n\n\n\n\n\n\n\n(b) False color composite image\n\n\n\n\n\n\nFigure 8.4: Two color composite images",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#sec-bivariate-scales",
    "href": "XX-scales.html#sec-bivariate-scales",
    "title": "8  Scales",
    "section": "\n8.6 Bivariate scales",
    "text": "8.6 Bivariate scales",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#sec-asis-scales",
    "href": "XX-scales.html#sec-asis-scales",
    "title": "8  Scales",
    "section": "\n8.7 As-is scales",
    "text": "8.7 As-is scales\n\n\n\n\n\n\n\n\n\n\n\n\n\nBivand, Roger. 2020. classInt: Choose Univariate Class Intervals. https://CRAN.R-project.org/package=classInt.\n\n\nFisher, Walter D. 1958. “On Grouping for Maximum Homogeneity.” Journal of the American Statistical Association, 10. https://doi.org/gkb5sf.\n\n\nJiang, Bin. 2013. “Head/Tail Breaks: A New Classification Scheme for Data with a Heavy-Tailed Distribution.” The Professional Geographer 65 (3): 482–94. https://doi.org/f24r6j.\n\n\nWand, M. P. 1997. “Data-Based Choice of Histogram Bin Width.” The American Statistician 51 (1): 59. https://doi.org/fvsfdb.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-scales.html#footnotes",
    "href": "XX-scales.html#footnotes",
    "title": "8  Scales",
    "section": "",
    "text": "For more information visit the ?pretty() function documentation↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Scales</span>"
    ]
  },
  {
    "objectID": "XX-legends.html",
    "href": "XX-legends.html",
    "title": "\n9  Legends and titles\n",
    "section": "",
    "text": "9.1 Legends\nLegends are an essential part of most maps. They provide meaning to the symbols or colors used in the map, and often add information about the map content. They allow to interpret the map correctly, and are therefore crucial for the map readability.\nIn tmap, legends are created automatically when we add a layer with a data-driven visual variable. By default, such a legend consists of a title based on the variable name and a color/shape/symbol scale (Figure 9.1).  It is placed outside of the map frame, either on the right or on the bottom of the map, depending on the automatically determined map aspect ratio.\ntm_shape(slo_elev) +\n    tm_raster()\n\n\n\n\n\n\nFigure 9.1: A map with an automatically generated legend.\nSuch a legend is helpful for quick exploration of the data, but usually, they are not sufficient for sharing the map with others. This chapter covers how to customize the legend’s title, position, and appearance in tmap. Legends are also closely related to the visual variables and scales used in the map that were covered in chapters Chapter 7 and Chapter 8 – we recommend to read those chapters first.  Legends are customized using the tm_legend() function that is passed to *.legend arguments of the layer functions, e.g., col.legend, shape.legend, size.legend, etc.\nOften, the most important part of the legend is the title. It informs the reader about the meaning of the colors or symbols used in the map, providing also additional context such as the unit of measurement. The title is set using the title argument of the tm_legend() function (Figure 9.2 (a)).\ntm_shape(slo_elev) +\n    tm_raster(\n        col.legend = tm_legend(title = \"Elevation (m asl)\")\n    )\nIn some cases, the title is not needed, e.g., when the map is self-explanatory, and then this argument can be set to \"\". Another possibility, when only one legend is used is to remove the legend title, but specify the map variable and its unit in the map title.\nThe legend title and its text can be customized in many ways, including changing its font size (title.size and text.size), font family (title.family and text.family), and font color (title.color and text.color).\nBy default, values in the legend are ordered from low to high (i.e., from top to bottom), but this can be reversed using the reverse argument (Figure 9.2 (b)).\ntm_shape(slo_elev) +\n    tm_raster(\n        col.legend = tm_legend(title = \"Elevation (m asl)\", reverse = TRUE)\n    )\nIn our example of Slovenia, we have enough white space inside the map frame to place the legend. This can be done with the position argument of the tm_legend() function (Figure 9.2 (c)). To put the legend inside the map frame, we can use the tm_pos_in() function and specify the location of the legend using its first two arguments (Chapter 11).\ntm_shape(slo_elev) +\n    tm_raster(\n        col.legend = tm_legend(\n            title = \"Elevation (m asl)\",\n            position = tm_pos_in(\"right\", \"bottom\")\n        )\n    )\nDepending on the map content, used colors, and expected aesthetic, the legend background can be colored or made transparent. The default legend background is white, but it can be changed using the bg.color argument of the tm_legend() function. In the following example, we set the background color to gray and also make it semi-transparent using the bg.alpha argument (Figure 9.3 (a)).\ntm_shape(slo_elev) +\n    tm_raster(\n        col.legend = tm_legend(\n            title = \"Elevation (m asl)\",\n            position = tm_pos_in(\"right\", \"bottom\"),\n            bg.color = \"gray\",\n            bg.alpha = 0.5\n        )\n    )\nAll of the previous examples used the default legend orientation type, \"portrait\". Its alternative is \"landscape\", which can be set using the orientation argument of the tm_legend() function. This changes the legend layout to a horizontal orientation, which can be useful either as a mean to better fit to the map content or to change the map aesthetic.\nHere, we not only change the legend orientation, but also customize its position with tm_pos_out() (Chapter 11) 1. The three arguments used, \"center\", \"top\", and \"center\" specify the legend position in horizontal and vertical position outside the map frame and then its position relative to that placement (Figure 9.3 (b)).\ntm_shape(slo_elev) +\n    tm_raster(\n        col.legend = tm_legend(\n            title = \"Elevation (m asl)\",\n            orientation = \"landscape\",\n            position = tm_pos_out(\"center\", \"top\", pos.h = \"center\")\n        )\n    )\nTo disable the legend, we can set the show argument of the tm_legend() function to FALSE (Figure 9.3 (c)). This is useful when we want to use the same legend for multiple layers, or just when we only are interested in the map content and not in the legend – which may be the case when we are using the map for graphical purposes only.\ntm_shape(slo_elev) +\n    tm_raster(\n        col.legend = tm_legend(show = FALSE)\n    )",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Legends and titles</span>"
    ]
  },
  {
    "objectID": "XX-legends.html#sec-legends",
    "href": "XX-legends.html#sec-legends",
    "title": "\n9  Legends and titles\n",
    "section": "",
    "text": "(a) Legend with a custom title.\n\n\n\n\n\n\n\n\n\n(b) Legend with a custom title and reversed order.\n\n\n\n\n\n\n\n\n\n(c) Legend with a custom position inside the map frame.\n\n\n\n\n\n\nFigure 9.2: Legend customization examples.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Legend with a custom background color and transparency.\n\n\n\n\n\n\n\n\n\n(b) Legend with a custom orientation and position outside the map frame.\n\n\n\n\n\n\n\n\n\n(c) No legend.\n\n\n\n\n\n\nFigure 9.3: Additional legend customization examples.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Legends and titles</span>"
    ]
  },
  {
    "objectID": "XX-legends.html#sec-titles",
    "href": "XX-legends.html#sec-titles",
    "title": "\n9  Legends and titles\n",
    "section": "\n9.2 Titles",
    "text": "9.2 Titles",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Legends and titles</span>"
    ]
  },
  {
    "objectID": "XX-legends.html#footnotes",
    "href": "XX-legends.html#footnotes",
    "title": "\n9  Legends and titles\n",
    "section": "",
    "text": "By default, the \"landscape\" legend is located in the bottom right outside of the map frame↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Legends and titles</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html",
    "href": "XX-attr-layers.html",
    "title": "10  Attributes layers",
    "section": "",
    "text": "10.1 Grid lines\nThe tmap package offers two ways to draws coordinate lines - tm_grid() and tm_graticules(). The role of tm_grid() is to represent the input data’s coordinates. For example, the slo_borders object’s CRS is ETRS89-extended / LAEA Europe with the units in meters (Figure 10.1 (a)), and thus the grid lines are in meters.\ntm_shape(slo_borders) +\n  tm_polygons() +\n  tm_grid()\ntm_graticules() shows longitude lines (meridians) and latitude lines (parallels), with degrees as units. This can be seen with the degree signs in the labels (Figure 10.1 (b)).\ntm_shape(slo_borders) +\n  tm_polygons() +\n  tm_graticules()\nBoth, tm_grid() and tm_graticules() can be placed above or below the map layers as their position on the map depends on their place in the code. When tm_grid() or tm_graticules() is placed after the map layer (e.g., tm_polygons()), the grid lines are plotted on the top of the map. On the other hand, when tm_grid() or tm_graticules() is placed before the map layer code, the grid lines are plotted behind the spatial data (Figure 10.1 (c)).\ntm_shape(slo_borders) +\n  tm_graticules() +\n  tm_polygons()\nGrids and graticules can also be easily customized using several arguments, such as, x and y (x and y coordinates of the lines), n.x and n.y (number of horizontal (x) and vertical (y) lines), labels.inside.frame, ticks, lines It is also possible to customize their appearance, for example, by changing the colors of the lines (col), width (lwd) or labels’ sizes (labels.size).",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-grid-lines",
    "href": "XX-attr-layers.html#sec-grid-lines",
    "title": "10  Attributes layers",
    "section": "",
    "text": "(a) Grid lines\n\n\n\n\n\n\n\n\n\n(b) Graticules\n\n\n\n\n\n\n\n\n\n(c) Graticules behind the map layer\n\n\n\n\n\n\nFigure 10.1: Examples of grid lines and graticules.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-scale-bar",
    "href": "XX-attr-layers.html#sec-scale-bar",
    "title": "10  Attributes layers",
    "section": "\n10.2 Scale bar",
    "text": "10.2 Scale bar\nScale bar is a graphic indicator of the relation between a distance on a map and the corresponding distance in the real world. Nowadays, it is more often used than a traditional representative fraction (e.g., 1:10000). Compared to the representative fraction, scale bars work correctly on variable screen sizes or different print sizes, as their sizes change together with the rest of the map.\nThe tm_scalebar() function adds a scale bar.   It is possible, however, to manually update the values of scale bar’s breaks with the breaks argument and its size with the text.size argument (Figure 10.2).\n\ntm +\n  tm_scalebar(breaks = c(0, 15, 30), text.size = 1)\n\n\n\n\n\n\nFigure 10.2: A map with a customized scale bar.\n\n\n\n\nThe tm_scalebar() also has several additional arguments, allowing to modify its colors, and position (Section 10.3).\nImportantly, the scale bar is accurate, depending on a map projection, at standard points or lines only (Section 2.4.4) – it is never completely correct across the whole map.  The scale bar distortion increases with the true size of the area we are mapping – it is less visible on local maps, and very prominent on global maps. For example, try to add a scale bar to a world map seen in the Section 5.1. The created scale bar will be accurate for the equator, but less and less correct going to the north and south poles.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-north-arrow",
    "href": "XX-attr-layers.html#sec-north-arrow",
    "title": "10  Attributes layers",
    "section": "\n10.3 North arrow",
    "text": "10.3 North arrow\nNorth arrow, also known as a map compass or a compass rose, is a prominent orientation indicator pointing to which way is north1. The decision on whether to use north arrows or not usually requires some critical thinking. While, it can be added to every map, north arrows are not always necessary – especially on maps of large areas (e.g., continents), where the cardinal directions are obvious for most people. The north arrow is, however, necessary when the north on the map is offset (rotated) and recommended when we want to help orient the map readers.\nWe can use the tm_compass() function to add the north arrow. By default, its north is oriented toward the top of the map (the north argument of 0), and the north arrow is represented by an actual arrow (the type argument of \"arrow\"). tmap offers also a few other north arrow types, including \"4star\" (Figure 10.3), \"8star\", \"radar\", and \"rose\". The north arrow can be also further customized with the size, show.labels and cardinal.directions arguments, and its colors may be modified (text.color, color.dark, color.light) (Figure 10.3).\n\ntm +\n  tm_compass(type = \"4star\", size = 2, position = c(\"left\", \"top\"))\n\n\n\n\n\n\nFigure 10.3: A map with customized north arrow.\n\n\n\n\nThe location of the north arrow, by default, is placed automatically, but can also be changed using the position argument.     \nThe position argument also works in the same way in other functions, such as tm_scalebar(), tm_credits(), tm_logo(), and in some of the tm_layout() arguments: legend.position, title.position, or chart.position.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-text-annotation",
    "href": "XX-attr-layers.html#sec-text-annotation",
    "title": "10  Attributes layers",
    "section": "\n10.4 Text annotation",
    "text": "10.4 Text annotation\n\nText annotations, also known as map credits, are used to store additional information about the created map. They can include the source of data, the name of the author, the date of map creation, or information about the map projection.\nText annotations are created with the tm_credits() function, which can be used more than one time (Figure 10.4).\n\ntm +\n  tm_credits(\"Data source: \", fontface = \"italic\") +\n  tm_credits(\"Author: \", fontface = \"bold\")\n\n\n\n\n\n\nFigure 10.4: A map with placeholders for text annotations.\n\n\n\n\nThe first argument of tm_credits() is the text, which can be spread over multiple lines with the line break symbol \\n. When the created map has several facets (Chapter 14), it is also possible to provide each facet a different text. In that case, a vector of characters is expected, where you can use \"\" to omit the credits for specific facets. Text annotations can also be further customized, by changing their sizes (size), colors (color), positions, and fonts (Section 12.3.3).",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-logo",
    "href": "XX-attr-layers.html#sec-logo",
    "title": "10  Attributes layers",
    "section": "\n10.5 Logo",
    "text": "10.5 Logo\nLogos on maps can serve a similar purpose as text annotation or accompany them. They can represent your affiliation, funding institution, data sources logos, etc.\nThe tm_logo() function adds png images, either from a file or url, to the map (Figure 10.5).\n\ntm +\n  tm_logo(\"https://www.r-project.org/logo/Rlogo.png\",\n          height = 2) +\n  tm_logo(c(\"https://www.r-project.org/logo/Rlogo.png\",\n            \"https://www.r-project.org/logo/Rlogo.png\"),\n          height = 1)\n\n\n\n\n\n\nFigure 10.5: A map with an array of R logos.\n\n\n\n\nThere are two ways to use multiple logos. Many tm_logo() functions will places logos on top of each other, while providing a vector of png files will show them next to each other. Additional arguments include the height of the logo (height, the width is scaled automatically) and its position (position).",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-axis-labels",
    "href": "XX-attr-layers.html#sec-axis-labels",
    "title": "10  Attributes layers",
    "section": "\n10.6 Axis labels",
    "text": "10.6 Axis labels\n\ntm +\n  tm_xlab(\"X\") +\n  tm_ylab(\"Y\")",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#sec-minimap",
    "href": "XX-attr-layers.html#sec-minimap",
    "title": "10  Attributes layers",
    "section": "\n10.7 Minimap",
    "text": "10.7 Minimap\n\ntmap_mode(\"view\")\n#&gt; ℹ tmap mode set to \"view\".\n\n\ntm + \n  tm_minimap()\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n#&gt; ℹ tmap mode set to \"plot\".",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-attr-layers.html#footnotes",
    "href": "XX-attr-layers.html#footnotes",
    "title": "10  Attributes layers",
    "section": "",
    "text": "Orientation may also be shown by graticule or grid lines (Section 10.1).↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Attributes layers</span>"
    ]
  },
  {
    "objectID": "XX-positions.html",
    "href": "XX-positions.html",
    "title": "11  Positions",
    "section": "",
    "text": "11.1 Positioning\nAll of the map components can be positioned in any location in the map frame or outside of it. The positioning is done via the position argument, which can take a variety of values. The most common are:\nBoth functions can take additional arguments to control the position more precisely, including their justification and alignment.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Positions</span>"
    ]
  },
  {
    "objectID": "XX-positions.html#sec-positioning",
    "href": "XX-positions.html#sec-positioning",
    "title": "11  Positions",
    "section": "",
    "text": "tm_pos_in(): a function that allows to control the position inside the map frame (Figure 11.1). The first argument is the horizontal position and the second is the vertical position. E.g., tm_pos_in(\"left\", \"top\") locates a component in the top left corner of the map frame. This function can be used directly or through a shortcut – a character vector with two elements, where the first is the horizontal position and the second is the vertical position inside the map frame, e.g., c(\"left\", \"top\").\n\ntm_pos_out(): a function that allows the control of the position outside the map frame. For example, tm_pos_out(\"center\", \"top\") places a component in the center of the top side of the map frame.\n\n\n\n\n11.1.1 Inside the map frame\n\n\n\n\n\n\n\nFigure 11.1: Examples of positioning map components inside the map frame.\n\n\n\n\nMap legends, by default, are placed outside of the map frame – that is often expected as it does not overlap with the rest of the map content. However, we can find ourselves in a situation when our spatial data is so sparse that the legend can be placed inside the map, filling a white space. Then, we need to use the position argument of tm_legend().\nWe may use it either with a vector with two elements, or with the tm_pos_in() function (Figure 11.1). For example, position = c(\"right\", \"bottom\") or position = tm_pos_in(\"right\", \"bottom\") are equivalent. The first element of the vector is the horizontal position and the second is the vertical position inside the map frame. These elements can be either in lower case letters, UPPER CASE LETTERS, or numbers between 0 and 1.\nLowercase letters, e.g., \"right,\" \"bottom\", place the selected map component in the right bottom corner but leave some margin to the map frame (Figure 11.2 (a)).\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = c(\"right\", \"bottom\")))\n# same as:\n# tm_shape(slo_elev) +\n#     tm_raster(col.legend = tm_legend(position = tm_pos_in(\"right\", \"bottom\")))\n\nUppercase letters, e.g., \"RIGHT,\" \"BOTTOM\", also places the map component in the bottom right corner but directly touch the map frame (Figure 11.2 (b)).\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = c(\"RIGHT\", \"BOTTOM\")))\n\nNumbers between 0 and 1, e.g., c(0.8, 0.4) places the map component in the right bottom corner but with a margin of 20% of the map frame size (Figure 11.2 (c)).\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = c(0.8, 0.4)))\n\n\n\n\n\n\n\n\n\n\n(a) With lowercase letters: “right”, “bottom”\n\n\n\n\n\n\n\n\n\n(b) With uppercase letters: “RIGHT”, “BOTTOM’”\n\n\n\n\n\n\n\n\n\n(c) With numbers: 0.8, 0.4\n\n\n\n\n\n\nFigure 11.2: Positioning legends inside the map frame.\n\n\nThere is one important difference between specifying the position with a vector and with the tm_pos_in() function. The latter allows to control the position more precisely with additional arguments – just.h, just.v, align.h, and align.v. The just.h and just.v only work when the position is specified with numbers between 0 and 1, and they arguments control the justification of the map component to that position.\nThe align.h and align.v arguments are used when many map components are grouped together, which is explained in Section 11.2.\n\n11.1.2 Outside the map frame\n\n\n\n\n\n\n\nFigure 11.3: Examples of positioning map components outside the map frame.\n\n\n\n\nIn general, there are eight locations for map components outside the map frame – each of them can be specified with tm_pos_out() (Figure 11.3). We may place a map component either on one of the sides of the map frame (e.g., tm_pos_out(\"center\", \"top\")), or in its corner (e.g., tm_pos_out(\"left\", \"top\")).\nAt the same time, placing a map component outside a map frame brings some additional complexity. Now, we can not only put a component in a specified place, but also arrange it in that place. For example, tm_pos_out(\"center,\" \"top\") puts the specified component to the top of the map frame but is positioned to the left. What should we do if we want to center it?\nThe tm_pos_out() has four sets of arguments that control the position of a map component outside the map frame:\n\n\ncell.h and cell.v: the horizontal and vertical position of the map component outside the map frame.\n\npos.h and pos.v: the horizontal and vertical position of the map component inside the cell defined by cell.h and cell.v.\n\njust.h and just.v: the justification of the map components in relation to the position of the map component inside the cell – only used when pos.h and pos.v are specified as numbers between 0 and 1.\n\nalign.h and align.v: the alignment of the components is only used when many components are grouped together (Section 11.2).\n\nLet’s see how these arguments work in practice. The cell.h and cell.v arguments are the first two arguments of the tm_pos_out() function and they define the cell in which the map component will be placed (Figure 11.4 (a); Figure 11.4 (b)).\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"center\", \"bottom\")))\n\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"left\", \"center\")))\n\nThen, we may to control the location of the map component inside the cell with pos.h and pos.v arguments. The pos.h argument controls the horizontal position of the map component inside the cell, while the pos.v argument – the vertical position. The former is mostly useful when our legend is on the top of the map frame and the latter is useful when it is on the left or right side of the map frame (Figure 11.4 (c); Figure 11.4 (d)).\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"center\", \"bottom\", pos.h = \"center\")))\n\n\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"left\", \"center\", pos.v = \"center\")))\n\n\n\n\n\n\n\n\n\n\n(a) With cell.h = \"center\" and cell.v = \"bottom\"\n\n\n\n\n\n\n\n\n\n(b) With cell.h = \"left\" and cell.v = \"center\"\n\n\n\n\n\n\n\n\n\n\n\n(c) With pos.h = \"center\" in cell (cell.h = \"center\", cell.v = \"bottom\")\n\n\n\n\n\n\n\n\n\n(d) With pos.v = \"center\" in cell (cell.h = \"left\", cell.v = \"center\")\n\n\n\n\n\n\nFigure 11.4: Positioning legends outside the map frame.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Positions</span>"
    ]
  },
  {
    "objectID": "XX-positions.html#sec-position-many-components",
    "href": "XX-positions.html#sec-position-many-components",
    "title": "11  Positions",
    "section": "\n11.2 Many components",
    "text": "11.2 Many components\nVarious map components can be positioned at the same time – either to different locations or to the same one. For example, we can place a scale bar outside the map frame and a legend inside the map frame (Figure 11.5 (a)).\n\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(position = c(\"right\", \"bottom\"))) +\n  tm_scalebar(position = tm_pos_out(\"left\", \"center\"))\n\nNow, you may be wondering what happens if we want to place two (or more) components in the same location. As you can see in Figure 11.5 (b), they will be stacked on top of each other inside one frame.\n\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(position = tm_pos_out(\"right\", \"center\"))) +\n  tm_scalebar(position = tm_pos_out(\"right\", \"center\"))\n\n\n\n\n\n\n\n\n\n\n(a) Two components in different locations\n\n\n\n\n\n\n\n\n\n(b) Two components in the same location\n\n\n\n\n\n\nFigure 11.5: Positioning many map components.\n\n\nThe tmap package also has a mechanism to group map components together and then position and organize them as a single unit. This requires two steps:\n\nSpecifying the group_id argument in the map component that we want to group together – this should be a unique integer number.\nUsing the tm_comp_group() function to select which group of map components we want to position together and where.\n\nIn the following example, we have three map components – a legend, a scale bar, and credits – and we want to group the scale bar and credits (Figure 11.6 (a)). First, we specify the group_id argument in the map components functions, and then we use the tm_comp_group() function to position them together. Here, the position argument works exactly as we already described in the previous sections, i.e., it can be specified with a vector or with the tm_pos_in() or tm_pos_out() functions.\n\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(group_id = 1)) +\n  tm_scalebar(group_id = 2) +\n  tm_credits(\"My credits\", group_id = 2) +\n  tm_comp_group(1, position = tm_pos_in(\"right\", \"bottom\")) +\n  tm_comp_group(2, position = tm_pos_in(\"left\", \"top\"))\n\nThe tm_comp_group() function can also be used to customize the arrangement of map components in the same location. For example, we can stack them vertically (stack = \"vertical\", default) or horizontally (stack = \"horizontal\") (Figure 11.6 (b)).\n\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(group_id = 1)) +\n  tm_scalebar(group_id = 2) +\n  tm_credits(\"My credits\", group_id = 2) +\n  tm_comp_group(1, position = tm_pos_in(\"right\", \"bottom\")) +\n  tm_comp_group(2, position = tm_pos_in(\"left\", \"top\"), stack = \"horizontal\")\n\n\n\n\n\n\n\n\n\n\n(a) Two groups of map components in different locations\n\n\n\n\n\n\n\n\n\n(b) Two groups of map components in the same location, one stacked horizontally\n\n\n\n\n\n\nFigure 11.6: Grouping map components together.\n\n\nEach additional map component is placed on the bottom of the previous one if they are in the same location. This can be controlled with the z argument of the map component functions – lower the number the component is placed on the top.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Positions</span>"
    ]
  },
  {
    "objectID": "XX-layout.html",
    "href": "XX-layout.html",
    "title": "12  Map layout",
    "section": "",
    "text": "12.1 Colors\nThe most basic map layout customization is the color of the map background. Actually, there are a few separate zones on the map that can be colored – it includes, among others, the map background, the outer space background, and the map legend background (Figure 12.2). They can be customized with the bg.color, outer.bg.color, and legend.bg.color arguments of the tm_layout() function.\ntm + \n  tm_layout(bg.color = \"lightgreen\",\n            outer.bg.color = \"forestgreen\",\n            legend.bg.color = \"lightblue\")\n#&gt; [plot mode] legend/component: Some components or legends are too \"high\" and are\n#&gt; therefore rescaled.\n#&gt; ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\nFigure 12.2: Customized map layout colors: background, outer space, and legend background.\nThe tm_layout() function also has tools to modify the complete map color style with arguments such as color.saturation, color.sepia_intensity, and color_vision_deficiency_sim. The first one represents the saturation of all colors on the map, including the backgrounds, as well as visual variables such as the fill or color of polygons and lines. The color.saturation parameter accepts a value between 0 and 1, where 0 means no color saturation (i.e., the map is black and white), and 1 means full-color saturation (i.e., the map is colorful, default) (Figure 12.3).\nThe color.sepia_intensity argument allows to apply a sepia filter to the map.  Its value can be set between 0 and 1, where 0 means no sepia filter (i.e., the map is colorful, default), and 1 means full sepia filter (i.e., the map is brownish) (Figure 12.4).\nBoth of the above options aim to change the overall map look and feel. The color_vision_deficiency_sim has a different purpose: it enables us to visualize how the map would appear to people with different color vision deficiencies. Three main types of color vision deficiencies are: protanopia (red-green color blindness, \"protan\"), deuteranopia (red-green color blindness, \"deutan\"), and tritanopia (blue-yellow color blindness, \"tritan\").",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-lcolors",
    "href": "XX-layout.html#sec-lcolors",
    "title": "12  Map layout",
    "section": "",
    "text": "tm + \n  tm_layout(color.saturation = 0)\ntm + \n  tm_layout(color.saturation = 0.4)\ntm + \n  tm_layout(color.saturation = 0.7)\n\n\n\n\n\n\n\n\n\n(a) Value: 0\n\n\n\n\n\n\n\n\n\n(b) Value: 0.4\n\n\n\n\n\n\n\n\n\n(c) Value: 0.7\n\n\n\n\n\n\nFigure 12.3: Impact of the color.saturation argument on the map layout.\n\n\n\ntm + \n  tm_layout(color.sepia_intensity = 0.4)\ntm + \n  tm_layout(color.sepia_intensity = 0.7)\ntm + \n  tm_layout(color.sepia_intensity = 1)\n\n\n\n\n\n\n\n\n\n(a) Value: 0.4\n\n\n\n\n\n\n\n\n\n(b) Value: 0.7\n\n\n\n\n\n\n\n\n\n(c) Value: 1\n\n\n\n\n\n\nFigure 12.4: Impact of the color.sepia_intensity argument on the map layout.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Value: \"protan\"\n\n\n\n\n\n\n\n\n\n(b) Value: \"deutan\"\n\n\n\n\n\n\n\n\n\n(c) Value: \"tritan\"\n\n\n\n\n\n\nFigure 12.5: Impact of the color_vision_deficiency_sim argument on the map layout.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-lframe",
    "href": "XX-layout.html#sec-lframe",
    "title": "12  Map layout",
    "section": "\n12.2 Frame",
    "text": "12.2 Frame\nAnother possibility to change the map look is to customize the frame around the map content. Its style depends on several arguments of the tm_layout() function. For example, frame.color, frame.alpha, and frame.lwd change the frame color, transparency (0-1), and line width, respectively (Figure 12.6 (a)). \n\ntm + \n  tm_layout(frame.color = \"black\",\n            frame.alpha = 0.6,\n            frame.lwd = 8)\n\nOther arguments that can be used to customize the frame are frame.r and frame.double_line (Figure 12.6 (b)). The first one makes the corners of the frame rounded – the value of 0 means no rounding, while 30 means that the corners are rounded with a radius of 30.    The second one allows to add a second frame line around the frame.\n\ntm + \n  tm_layout(frame.r = 30,\n            frame.double_line = TRUE)\n\nFinally, we can remove the frame completely by setting the frame argument to FALSE (Figure 12.6 (c)). \n\ntm + \n  tm_layout(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n(a) No frame\n\n\n\n\n\n\n\n\n\n(b) Custom color, alpha, and width\n\n\n\n\n\n\n\n\n\n(c) Rounded double line\n\n\n\n\n\n\nFigure 12.6: Impact of the frame arguments on the map layout.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-ltypography",
    "href": "XX-layout.html#sec-ltypography",
    "title": "12  Map layout",
    "section": "\n12.3 Typography",
    "text": "12.3 Typography\n\nThe decision about the used fonts is often neglected when creating programmable plots and maps. Most often, the default fonts are used in these kinds of graphs. This, however, could be a missed opportunity. A lot of map information is expressed by text, including text labels (Section 6.4), legend labels, text in attribute layers (Chapter 10), or the map title (?sec-layout-elements). The used fonts impact the tone of the map (Guidero 2017), and their customization allows for a map to stand out from maps using default options.\n\n\nAs we mentioned above, many different map elements can be expressed or can use fonts. In theory, we are able to set different fonts to each of them. However, this could result in a confusing visual mix that would hinder our map information. Therefore, the decision on the used fonts should be taken after considering the main map message, expected map audience, other related graph styles, etc. In the following three sections, we explain font families and font faces, and give some overall tips on font selections, show how to define used fonts, and how to customize fonts on maps.\n\n12.3.1 Font families and faces\n\n\n\n\n\n\n\n\n\n(a) Font families\n\n\n\n\n\n\n\n\n\n(b) Font faces\n\n\n\n\n\n\nFigure 12.7: Basic font families, and font faces implemented in the tmap package.\n\n\nIn tmap, fonts are represented by a font family (Figure 12.7 (a)) and a font face (Figure 12.7 (b)). A font family is a collection of closely related lettering designs. Examples of font families include Times, Helvetica, Courier, Palatino, etc. On the other hand, font faces, such as italic or bold, influence the orientation or width of the fonts. A font is, thus, a combination of a selected font family and font face.\nThere are a few general font families, such as serifs, sans serifs, and monospaced fonts. Fonts from the serif family have small lines (known as a serif) attached to the end of some letters. Notice, for example, short horizontal lines on the bottom of letters r, i, and f or vertical lines at the ends of the letter s in the top row of Figure 12.7 (a). The fonts in this family are often viewed as more formal. On the other hand, the sans serif family do not have serifs and is considered more informal and modern. The last font family, monospaced fonts, is often used in computer programming (IDEs, software text editors), but less often on maps. A distinguishing feature of the monospaced fonts is that each letter or character in this family has the same width. Therefore, letters, such as i and a will occupy the same space in the monospaced fonts. \nMixing the use of serif and sans serif fonts often works well for maps. However, a rule of thumb is not to mix more than two font families on one map. A sans serif font can be used to label cultural objects, while serif fonts to label physical features. Then, italics, for example, can be used to distinguish water areas. The role of bold font faces, together with increased font size, is to highlight the hierarchy of labels – larger, bold fonts indicate more prominent map features. Additionally, customizing the fonts’ colors can be helpful to distinguish different groups of map objects. \nThe decision on which fonts to use should also relates to the expected map look and feel. Each font family has a distinct personality (creates a “semantic effect”), which can affect how the map is perceived.  Some fonts are more formal, some are less. Some fonts have a modern look, while others look more traditional.  Another important concern is personal taste or map branding. We should filter the decision about the used fonts based on our preferences or even our sense of beauty as it could create more personal and unique maps. We just need to remember about the readability of the fonts – they should not be too elaborate as it can hinder the main map message.\n\n\n12.3.2 Fonts available in tmap\n\nBefore we discuss how to set a font family and its face, it is important to highlight that a different set of fonts could exist for each operating system (and even each computer). Additionally, which fonts are available and how they are supported depends on the used graphic device. A graphic device is a place where a plot or map is rendered. The most commonly it is a some kind of a screen device, where we can see our plot or map directly after running the R code. Other graphic devices allow for saving plots or maps as files in various formats (e.g., .png, .jpg, .pdf). Therefore, it is possible to get different fonts on your map on the screen, and a (slightly) different one when saved to a file. Visit ?Devices or read the Graphic Devices chapter of Peng (2016) to learn more about graphic devices.\nThe tmap package has two mechanism to select a font family. The first one is by specifying on of three general font families: \"serif\", \"sans\", or \"monospace\". It tries to match selected general font family with a font family existing on the operating system.  For example, \"serif\" could the \"Times\" font family, \"sans\" – \"Helvetica\" or \"Arial\", and \"monospace\" – \"Courier\" (Figure 12.7 (a)). The second mechanism allows to select a font family based on its name (e.g., \"Times\" or \"Palatino\"). Next, a member of the selected font families can be selected with one of the font faces: \"plain\", \"italic\", \"bold\", and \"bold.italic\" (Figure 12.7 (b)).\n\nAs mentioned before, available fonts depend on the computer setup (including operating system) and used graphic device. Fonts available on the operating system can be checked with the system_fonts() function of the systemfonts package (Pedersen, Ooms, and Govett 2021) (result not shown).\n\nlibrary(systemfonts)\nsystem_fonts()\n\nInformation on installing and debugging custom fonts can be found in a blog post by June Choe and in the showtext package (Qiu and See file AUTHORS for details. 2021) documentation.\nThe next step is to either view or save the map. This also means that we need to carry over our fonts to the output window/file, which largely depends on the selected graphic device. In general, screen device or graphical raster output formats, such as PNG, JPEG, or TIFF, works well with custom fonts as they rasterize them during saving. In case of any problems with graphical raster outputs, it is possible to try alternative graphics devices implemented in the ragg package (Pedersen and Shemanarev 2021). On the other hand, graphical vector formats, such as PDF or SVG, could have some problems with saving maps containing custom fonts1. The PDF device in R, by default, adds metadata about the used fonts, but does not store them. When the PDF reader shows the document, it tries to locate the font on your computer, and use other fonts when the expected one does not exist. An alternative approach is called embedding, which adds a copy of each necessary font to the PDF file itself. Gladly, the creation of a PDF with proper fonts can be achieved in a few ways. Firstly, it could be worth trying some alternative graphic devices such as cairo_pdf or svglite::svglite. The second option is to use the showtext package (Qiu and See file AUTHORS for details. 2021), which converts text into color-filled polygonal outlines for graphical vector formats.  Thirdly, the extrafont (Chang 2014) package allows embedding the fonts in the PDF file, which makes PDFs properly displayed on computers that do not have the given font. \n\n12.3.3 Fonts on maps\n\nBy default, tmap uses the \"sans\" font family with the \"plain\" font face (Figure 12.7). There are, however, three ways to customize the used fonts. The first one is to change all of the fonts and font faces for the whole map at once (Figure 12.8 (a)). This can be done with the text.fontfamily and text.fontface arguments of tm_layout().\n\ntm +\n    tm_layout(\n        text.fontface = \"italic\",\n        text.fontfamily = \"serif\"\n    )\n\nThe second way is to specify just some text elements independently (Figure 12.8 (b)). Many tmap functions, such as tm_text() or tm_credits(), have their own fontfamily and fontface arguments that can be adjusted. Additionally, tm_layout() allows to customize fonts for other map elements using prefixed arguments, such as, title.fontface or legend.title.fontfamily.\n\ntm +\n    tm_layout(\n        title.fontface = \"bold.italic\",\n        legend.title.fontfamily = \"monospace\"\n    )\n\n\n\n\n\n#&gt; [plot mode] legend/component: Some components or legends are too \"high\" and are\n#&gt; therefore rescaled.\n#&gt; ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n#&gt; [plot mode] legend/component: Some components or legends are too \"high\" and are\n#&gt; therefore rescaled.\n#&gt; ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n(a) One font for all elements\n\n\n\n\n\n\n\n\n\n\n\n(b) Different fonts for different elements\n\n\n\n\n\n\nFigure 12.8: Examples of one font (font family and font face) used for all of the map elements (title, text labels, legend, and text annotation), and different fonts used for different map elements.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-scale",
    "href": "XX-layout.html#sec-scale",
    "title": "12  Map layout",
    "section": "\n12.4 Scale",
    "text": "12.4 Scale\nThe tmap package has a set of default sizes and widths for various map elements, such as the frame, text, borders, symbol sizes, and more. In the previous parts of this book, we modify some of these values for selected elements, such as the frame width or text size. At the same time, we can also change the size of all of the map elements at once – this is a role of the scale argument of the tm_layout() function.  \n\n\n\n\n\n\n\n\n\n(a) scale = 0.5\n\n\n\n\n\n\n\n\n\n(b) scale = 1.5\n\n\n\n\n\n\nFigure 12.9: Impact of the scale argument on the map layout.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-design-mode",
    "href": "XX-layout.html#sec-design-mode",
    "title": "12  Map layout",
    "section": "\n12.5 Design mode",
    "text": "12.5 Design mode\nMaps consist of various components, including the map content (with its frame), additional map elements (e.g., credits or a title), and the legend, which are often located in different places. They also have numerous margins – spaces between data and the frame, spaces between the frame and the plotting, spaces between the icons and the labels, etc.\nMany of these properties can be customized, however, it may be difficult to understand the effect of the changes.  To make it easier, tmap has a design mode that can be turned on by setting the tmap_design_mode() function to TRUE. When the design mode is turned on, the map is displayed in a special way: it shows all of the created map content, but also adds various lines and colored areas to the map. We may see an example of a map in the design mode in Figure 12.10:\n\n\nAdditionally, it returns a small table in the R console with sizes and an aspect ratio of the device, plot, facets, and map areas. \nThe design mode is useful to understand how the map is constructed and how the various arguments of the tm_layout() function impact the map layout.\n\n\ntmap_design_mode(TRUE)\n#&gt; design.mode: ON\ntm\n#&gt; ----------------W (in)--H (in)--asp---\n#&gt; | device        6.00 3.70 1.62 |\n#&gt; | plot area     5.76 3.02 1.91 |\n#&gt; | facets area   3.69 2.62 1.41 |\n#&gt; | map area      3.59 2.52 1.42 |\n#&gt; --------------------------------\n#&gt; [plot mode] legend/component: Some components or legends are too \"high\" and are\n#&gt; therefore rescaled.\n#&gt; ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\nFigure 12.10\n\n\n\n\nThis mode is in place until the tmap_design_mode() function is set to FALSE. In the next few sections, we will show how the design mode can help us to understand the impact of various arguments of the tm_layout() function on the aspect ratio and margins of the map.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-aspect",
    "href": "XX-layout.html#sec-aspect",
    "title": "12  Map layout",
    "section": "\n12.6 Aspect ratio",
    "text": "12.6 Aspect ratio\n\nThe aspect ratio specifies the relation between the width and height of the map area of the plot. For statistical plots, aspect ratios usually adjust to the plotting space – thus, customization of an aspect ratio is usually not needed. For maps, this is not the case – we should not change the relation between the width and height of the data in a map as it has a specific projection that determines the spatial relation between the map features.\nBy default, the aspect ratio of the tmap is set to NA, which means that it is adjusted to the used shapes (Figure 12.1). \n\n\n\n\n\n\n\n\n\n(a) asp = 0\n\n\n\n\n\n\n\n\n\n(b) asp = 0.5\n\n\n\n\n\n\n\n\n\n\n\n(c) asp = 1\n\n\n\n\n\n\n\n\n\n(d) asp = 2\n\n\n\n\n\n\nFigure 12.11: Impact of the aspect ratio on the map layout.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#sec-lmargins",
    "href": "XX-layout.html#sec-lmargins",
    "title": "12  Map layout",
    "section": "\n12.7 Margins",
    "text": "12.7 Margins\nMargins are spaces around the map content, which can be used to separate the map from other elements, such as the legend or the title or separate the map from the extent of the plotting area. They may serve various purposes, such as to make the map more readable, to avoid overlapping the map content with other elements, to create space for additional elements. On the other hand, making margins smaller can help to increase the map area or make the map more condensed.\nThere are several arguments in tm_layout() related to margins. All of the margin arguments can be customized either with a single value (which is then applied to all sides) or with a vector of four values, which represent the bottom, left, top, and right margins.   The most important margins arguments are inner.margins and outer.margins. \n\nThe inner margins are spaces between the map content (e.g., symbols, lines, polygons, raster) and the frame of the map (Figure 12.12). By default, the inner margins are set to c(0.02, 0.02, 0.02, 0.02), which means that there is a 2% margin on each side of the map content (Figure 12.1). An exception to this rule is raster maps, where the inner margins are set to c(0, 0, 0, 0) – meaning that there are no margins around the raster map content – by default. Increasing the inner margins can help to avoid overlapping of the map content with other elements, such as the legend or the title – for example, we could add some margin on the right side of the map and then place the legend there.  \n\n\n\n\n\n\n\n\n\n(a) No margins\n\n\n\n\n\n\n\n\n\n(b) c(0.8, 0.4, 0.2, 0)\n\n\n\n\n\n\nFigure 12.12: Impact of the inner.margins argument on the map layout.\n\n\n\nOuter margins are spaces between the map frame and the plotting area (Figure 12.13). By default, they are always set to c(0.02, 0.02, 0.02, 0.02), which means that there is a 2% margin outside of the map frame – giving a small “breathing space” around the map (Figure 12.1). We can increase it on a specific side, for example, to create more space for the legend or other map elements or we can remove it completely to, for example, arrange the map in a grid with other maps (?sec-arranging-maps) (Figure 12.13). \n\n\n\n\n\n\n\n\n\n(a) No margins\n\n\n\n\n\n\n\n\n\n(b) c(0.08, 0.04, 0.02, 0)\n\n\n\n\n\n\nFigure 12.13: Impact of the outer.margins argument on the map layout.\n\n\n\n\n\n\nNow, as we have seen how the design mode can help us to understand the impact of various arguments of the tm_layout() function, we can turn it off.\n\ntmap_design_mode(FALSE)\n#&gt; design.mode: OFF\n\n\n\n\n\nChang, Winston. 2014. Extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nGuidero, Elaine. 2017. “Typography.” In Geographic Information Science & Technology Body of Knowledge, edited by John P. Wilson. Vol. 2017. University Consortium for Geographic Information Science (UCGIS).\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2021. Systemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2021. Ragg: Graphic Devices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPeng, Roger. 2016. Exploratory Data Analysis with R. United States: LeanPub.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file AUTHORS for details. 2021. Showtext: Using Fonts More Easily in r Graphs. https://CRAN.R-project.org/package=showtext.",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-layout.html#footnotes",
    "href": "XX-layout.html#footnotes",
    "title": "12  Map layout",
    "section": "",
    "text": "You can get the invalid font type error when saving the file.↩︎",
    "crumbs": [
      "Building blocks",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Map layout</span>"
    ]
  },
  {
    "objectID": "XX-small-multiples.html",
    "href": "XX-small-multiples.html",
    "title": "14  Small multiples",
    "section": "",
    "text": "14.1 Vector data",
    "crumbs": [
      "Expanding the toolbox",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Small multiples</span>"
    ]
  },
  {
    "objectID": "XX-small-multiples.html#raster-data",
    "href": "XX-small-multiples.html#raster-data",
    "title": "14  Small multiples",
    "section": "\n14.2 Raster data",
    "text": "14.2 Raster data",
    "crumbs": [
      "Expanding the toolbox",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Small multiples</span>"
    ]
  },
  {
    "objectID": "XX-options.html",
    "href": "XX-options.html",
    "title": "18  tmap options",
    "section": "",
    "text": "18.1 Raster resolution\nRaster data is represented by a grid of cells (Section 2.2.2), and the number of cells impacts the time to render a map. Rasters with hundreds of cells will be plotted quickly, while rasters with hundreds of millions or billions of cells will take a lot of time (and RAM) to be shown.  Therefore, the tmap package downsamples large rasters by default to be below 10,000,000 cells in the plot mode and 1,000,000 cells in the view mode.  This values can be adjusted with the raster.max_cells argument of tmap_options(), which expects a named vector with two elements - plot and view (Figure 18.1).\ntmap_options(raster.max_cells = c(plot = 5000, view = 2000))\ntm_shape(worldelevation) +\n  tm_raster(\"worldelevation.tif\")\n\n\n\n\n\n\nFigure 18.1: A raster map with the decreased resolution",
    "crumbs": [
      "Advanced topics",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>tmap options</span>"
    ]
  },
  {
    "objectID": "XX-options.html#resetting-the-options",
    "href": "XX-options.html#resetting-the-options",
    "title": "18  tmap options",
    "section": "\n18.2 Resetting the options",
    "text": "18.2 Resetting the options\nAny tmap options can be reset (set to default) with tmap_options_reset().\n\ntmap_options_reset()",
    "crumbs": [
      "Advanced topics",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>tmap options</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Birch, Jennifer. 2012. “Worldwide Prevalence of Red-Green Color\nDeficiency.” Journal of the Optical Society of America A\n29 (3): 313. https://doi.org/ggkw82.\n\n\nBivand, Roger. 2020. classInt: Choose Univariate Class\nIntervals. https://CRAN.R-project.org/package=classInt.\n\n\nBorland, David, and Russell Taylor Ii. 2007. “Rainbow Color\nMap (Still) Considered Harmful.”\nIEEE Computer Graphics and Applications 27 (2): 14–17. https://doi.org/cf7nms.\n\n\nCARTO. 2019. “CARTOColors\nData-Driven Color Schemes.”\nhttps://carto.com/carto-colors/.\n\n\nChang, Winston. 2014. Extrafont: Tools for Using Fonts. https://CRAN.R-project.org/package=extrafont.\n\n\nCoombes, Kevin R., Guy Brock, Zachary B. Abrams, and Lynne V. Abruzzo.\n2019. “Polychrome :\nCreating and Assessing Qualitative Palettes\nwith Many Colors.” Journal of Statistical\nSoftware 90 (Code Snippet 1). https://doi.org/ggkqvs.\n\n\nCrameri, Fabio. 2018. “Geodynamic Diagnostics, Scientific\nVisualisation and StagLab 3.0.” Geoscientific\nModel Development 11 (6): 2541–62. https://doi.org/gdt4tg.\n\n\nFisher, Walter D. 1958. “On Grouping for\nMaximum Homogeneity.” Journal of the American\nStatistical Association, 10. https://doi.org/gkb5sf.\n\n\nGarnier, Simon. 2018. Viridis: Default Color Maps from\n’Matplotlib’. https://CRAN.R-project.org/package=viridis.\n\n\nGuidero, Elaine. 2017. “Typography.” In Geographic\nInformation Science & Technology Body of\nKnowledge, edited by John P. Wilson. Vol. 2017.\nUniversity Consortium for Geographic Information Science\n(UCGIS).\n\n\nHarrower, Mark, and Cynthia A. Brewer. 2003.\n“ColorBrewer.org: An Online Tool for\nSelecting Colour Schemes for Maps.”\nThe Cartographic Journal 40 (1): 27–37. https://doi.org/ch4c57.\n\n\nJiang, Bin. 2013. “Head/Tail Breaks: A New\nClassification Scheme for Data with a\nHeavy-Tailed Distribution.” The\nProfessional Geographer 65 (3): 482–94. https://doi.org/f24r6j.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2025.\nGeocomputation with R. Second. CRC\nPress.\n\n\nNeuwirth, Erich. 2014. RColorBrewer: ColorBrewer Palettes. https://CRAN.R-project.org/package=RColorBrewer.\n\n\nNowosad, Jakub. 2018. ’CARTOColors’ Palettes. https://nowosad.github.io/rcartocolor.\n\n\nNuñez, Jamie R., Christopher R. Anderton, and Ryan S. Renslow. 2018.\n“Optimizing Colormaps with Consideration for Color Vision\nDeficiency to Enable Accurate Interpretation of Scientific Data.”\nEdited by Jesús Malo. PLOS ONE 13 (7): e0199239. https://doi.org/gdzkg4.\n\n\nPedersen, Thomas Lin, and Fabio Crameri. 2020. Scico: Colour\nPalettes Based on the Scientific Colour-Maps. https://CRAN.R-project.org/package=scico.\n\n\nPedersen, Thomas Lin, Jeroen Ooms, and Devon Govett. 2021.\nSystemfonts: System Native Font Finding. https://CRAN.R-project.org/package=systemfonts.\n\n\nPedersen, Thomas Lin, and Maxim Shemanarev. 2021. Ragg: Graphic\nDevices Based on AGG. https://CRAN.R-project.org/package=ragg.\n\n\nPeng, Roger. 2016. Exploratory Data Analysis with\nR. United States: LeanPub.\n\n\nQiu, Yixuan, and authors/contributors of the included software. See file\nAUTHORS for details. 2021. Showtext: Using Fonts More Easily in r\nGraphs. https://CRAN.R-project.org/package=showtext.\n\n\nQuinan, P. S., L. M. Padilla, S. H. Creem-Regehr, and M. Meyer. 2019.\n“Examining Implicit Discretization in Spectral\nSchemes.” Computer Graphics Forum 38 (3): 363–74.\nhttps://doi.org/ggb9nd.\n\n\nŠavrič, Bojan, Tom Patterson, and Bernhard Jenny. 2019. “The\nEqual Earth Map Projection.” International\nJournal of Geographical Information Science 33 (3): 454–65. https://doi.org/cs8v.\n\n\nSharpe, Lindsay T, Andrew Stockman, Herbert Jägle, and Jeremy Nathans.\n1999. “Opsin Genes, Cone Photopigments, Color Vision, and Color\nBlindness.” In Color Vision: From Genes to\nPerception, edited by T Gegenfurtner and Lindsay T\nSharpe, 50. Cambridge: Cambridge University\nPress.\n\n\nStauffer, Reto, Georg J. Mayr, Markus Dabernig, and Achim Zeileis. 2015.\n“Somewhere Over the Rainbow:\nHow to Make Effective Use of\nColors in Meteorological\nVisualizations.” Bulletin of the American\nMeteorological Society 96 (2): 203–16. https://doi.org/f3sttk.\n\n\nWand, M. P. 1997. “Data-Based Choice of\nHistogram Bin Width.” The American\nStatistician 51 (1): 59. https://doi.org/fvsfdb.\n\n\nZeileis, Achim, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D.\nMcWhite, Paul Murrell, Reto Stauffer, and Claus O. Wilke. 2019.\n“colorspace: A Toolbox for\nManipulating and Assessing Colors and Palettes.” arXiv\n1903.06490. arXiv.org E-Print Archive. http://arxiv.org/abs/1903.06490.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "XX-data_processing.html",
    "href": "XX-data_processing.html",
    "title": "Appendix A — Data preparation",
    "section": "",
    "text": "A.1 Data simplification\nGeometries in spatial vector data consists of sets of coordinates (Section 2.2.1). Spatial vector objects grow larger with more features to present and more details to show, and this also has an impact on time to render a map.  Figure A.1 (a) shows a map of countries from the worldvector object.\ntm_shape(worldvector) +\n  tm_polygons()\nThis level of detail can be good for some maps, but sometimes the number of details can make reading the map harder. To create a simplified (smoother) version of vector data, we can use the ms_simplify function of the rmapshaper package. . It expects a numeric value from 0 to 1 – a proportion of vertices in the data to retain. In the example below, we set keep to 0.05, which keeps 5% of vertices (Figure A.1 (b)).\nlibrary(rmapshaper)\nworldvector_s1 = ms_simplify(worldvector, keep = 0.05)\ntm_shape(worldvector_s1) +\n  tm_polygons()\nThe process of simplification can also be more controlled. By default, the underlining algorithm (called the Visvalingam method, learn more at https://bost.ocks.org/mike/simplify/), removes small features, such as islands in our case. This could have far-reaching consequences - in the process of simplification, we could remove some countries! To prevent the deletion of small features, we also need to set keep_shapes to TRUE. In the case of one country consisting of many small polygons, only one is sure to be retained. For example, look at New Zealand, which is now only represented by Te Waipounamu (the South Island). To keep all of the spatial geometries (even the smallest of islands), we should also specify explode to TRUE.\nworldvector_s2 = ms_simplify(worldvector, keep = 0.05,\n                             keep_shapes = TRUE, explode = TRUE)\ntm_shape(worldvector_s2) +\n  tm_polygons()\nFigure A.1 (c) contains a simplified map, where each spatial geometry of the original map still exists, but in a less detailed form.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data preparation</span>"
    ]
  },
  {
    "objectID": "XX-data_processing.html#sec-data-simplification",
    "href": "XX-data_processing.html#sec-data-simplification",
    "title": "Appendix A — Data preparation",
    "section": "",
    "text": "(a) original data\n\n\n\n\n\n\n\n\n\n(b) simplified data with 5% of vertices kept\n\n\n\n\n\n\n\n\n\n(c) simplified data with 5% of vertices, all features, and all polygons kept\n\n\n\n\n\n\nFigure A.1: A map of world’s countries based on:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Data preparation</span>"
    ]
  },
  {
    "objectID": "XX-glossary.html",
    "href": "XX-glossary.html",
    "title": "Appendix B — Glossary",
    "section": "",
    "text": "Table B.1\n\n\n\n\n    \n\n      \n\n..\n              \nTerm\n                Explanation\n              \n\n\n\nAuxiliary map layer\n                  An auxiliary (or non-data-driven) map layer is a visual representation of geographic information that does not come from a spatial object, but uses the map's coordinates. Examples: `tm_grid()`/`tm_graticules()` and `tm_basemap()`.\n                \n\nData-driven map layer\n                  A data-driven map layer is a visual representation of a spatial object. E.g., `tm_polygons()` or `tm_raster()`.\n                \n\nFacets\n                  Multiple maps in one plot. Also called 'small multiples'.\n                \n\nFeatures\n                  Elementary spatial data objects. For instance, a row in an `sf` data.frame or a single raster cell.\n                \n\nGlyph\n                  Mini charts that are used as proportional symbols. See the extension package `tmap.glyphs`.\n                \n\nLayout\n                  All aspects that specify the plot apart from the map layers and map components. Examples: margins, background color, aspect ratio, font sizes, etc. These can be set via `tm_layout`. These layout options form a subset of all tmap options (see **options**).\n                \n\nMap component\n                  A visual plot object with a position independent of map coordinates. Examples: a legend, a compass, a title.\n                \n\nMap layer\n                  A map layer is a visual representation of geographical information. We distinguish two types: *data-driven* and *auxiliary* map layers. The former requires spatial objects whereas the latter only the geographic information (bounding box and coordinate reference system).\n                \n\nOptions\n                  In the context of tmap, we refer to the options as settings, which can be configured using `tm_options`. These can be *layout* options (see **layout**) or otherwise (e.g., `'show.messages'`).\n                \n\nProportional symbols\n                  Proportional symbols are symbols that are drawn at geographic locations and that are sized proportionally with a data variable. The result is known as a 'proportional symbol map'. These symbols are usually bubbles (filled circles), but can also be small charts, called **glyphs**.\n                \n\nScale function\n                  A scale function determines how to scale a data variable to either a visual variable or a transformation variable. Examples: `tm_scale_continuous`, `tm_scale_categorical`.\n                \n\ntmap element\n                  A `tm_` object that can be stacked with the `+` operator. These are: `tm_shape()`, map layer functions (such as `tm_polygons()`), facet specification function `tm_facets()`, map components (such as `tm_compass()`), and layout/option specification functions, such as `tm_layout()`.\n                \n\nShape (object)\n                  'Shape' is a nickname for a spatial data object. It is used in `tm_shape()`.\n                \n\nShape (visual variable)\n                  The shape is a visual variable for some map layer functions, most prominently `tm_symbols()`. It determines the shape/design of the symbols.\n                \n\nStyle\n                  The overall layout of the map. Similar to ggplot2's 'theme' (see **theme**).\n                \n\nTheme\n                  tmap stands for 'thematic maps', where *theme* refers to the topic of the data plotted on a map. Note that in ggplot2, a 'theme' refers to the overall layout, e.g. `ggplot2::theme_minimal()`. In tmap, we use **style** for this.\n                \n\nTransformation variable\n                  A variable of a data-driven map layer that determines a *transformation* of the spatial object. (TO DO: exact definition). For instance, `tm_cartogram(size = \"var\")`.\n                \n\nVisual variable\n                  A variable of a data-driven map layer that determines a *visual* aspect. This can be data-driven, e.g. `tm_polygons(fill = \"var\")`, where `var` is the name of an `sf` column, or a constant value, such as `tm_polygons(fill = \"blue\")`.\n                \n\nChart\n                  A small non-spatial data visualization. In tmap for several purposes: 1) an addition to a legend `tm_polygons(fill = \"var\", fill.chart = tm_chart_histogram())`, 2) a glyph (see **glyphs**), 3) a custom chart plotted as an inset.\n                \n\nInset\n                  A visual object that is plotted on a specific (pre-defined) location. It can be a small map (**minimap**) or a **chart**.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Glossary</span>"
    ]
  }
]