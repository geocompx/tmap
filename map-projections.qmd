```{r map-projections-1}
#| echo: false
source("code/before_script.R")
```

# Map projections {#map-projections}

<!-- https://r-tmap.github.io/tmap/articles/foundations_crs -->
<!-- maybe also include map_boundary stuff here -->

<!-- global: -->

```{r}
#| message: false
library(tmap)
library(sf)
library(stars)
worldelevation = read_stars("data/worldelevation.tif")
worldvector = read_sf("data/worldvector.gpkg")
worldcities = read_sf("data/worldcities.gpkg")
```

## Specifying map projections

```{r}
#| label: mproj1
#| eval: false
tm = tm_shape(worldvector) +
  tm_polygons() +
  tm_shape(worldcities) +
  tm_dots() +
  tm_text("name") +
  tm_crs("EPSG:4326")
tm
```

```{r}
#| label: mproj2
#| eval: false
tm +
  tm_crs("+proj=eck4")
```

```{r}
#| label: fig-mproj12
#| fig-cap: "Map projections examples."
#| fig-subcap:
#|   - "EPSG:4326 (WGS 84)"
#|   - "Eckert IV"
#| echo: false
#| message: false
#| fig-asp: 0.5
#| layout-nrow: 2
<<mproj1>>
<<mproj2>>
```

```{r map-projections-4}
#| label: fig-mproj-auto
#| fig-cap: "Map with data projected into the automatically selected projection."
#| fig-asp: 0.5
tm + 
  tm_crs("auto")
```

## Global map projections

<!-- tm + tm_style("natural") -->

```{r}
#| label: fig-mproj3
#| fig-cap: "Map with data projected into Eckert IV and with a customized style."
tm +
  tm_crs("+proj=eck4") +
  tm_layout(bg.color = "lightblue",
            earth_boundary = TRUE)
```

```{r}
#| label: fig-exprojs
#| message: false
#| echo: false
#| fig-asp: 1
#| fig-cap: "Examples of map projections for the whole world."
world_projs_code = c("boggs", "eck1", "eck4", "eqearth", "goode", 
                     #"hatano", 
                     "moll", "nell", "robin", "times", "wag1", "wintri",
                     "vandg4")
world_projs_names = c("Boggs", "Eckert I", "Eckert IV", "Equal Earth", 
                      "Goode Homolosine",
                      #"Hatano",
                      "Mollweide", "Nell-Hammer",
                      "Robinson", "Times", "Wagner I", "Winkel Tripel", 
                      "Van der Grinten IV")
world_projs = cbind(world_projs_code, world_projs_names)

# create a tmap for each of them
tms = lapply(1:nrow(world_projs), function(p) {
  tm_shape(worldvector) +
    tm_polygons() +
    tm_crs(paste0("+proj=", world_projs[p, 1])) +
    tm_layout(panel.labels = world_projs[p, 2]) +
    tm_layout(bg.color = "lightblue",
            earth_boundary = TRUE)
})
tmap_arrange(tms, ncol = 3)
```

<!-- https://proj.org/en/stable/operations/projections/index.html -->

<!-- maybe bbox could be a part of tm_crs? -->

```{r map-projections-7}
#| label: fig-mproj-ortho
#| fig-cap: "Orthographic projection examples."
#| layout-ncol: 2
tm_shape(worldvector, bbox = "FULL") +
  tm_polygons() +
  tm_graticules(labels.show = FALSE) +
  tm_crs("+proj=ortho +lat_0=30 +lon_0=0")+
  tm_layout(bg.color = "lightblue",
            earth_boundary = TRUE,
            frame = FALSE)
# tm_shape(worldvector, bbox = "FULL") +
#   tm_polygons() +
#   tm_graticules(labels.show = FALSE) +
#   tm_crs("+proj=ortho +lat_0=0 +lon_0=100")+
#   tm_layout(bg.color = "lightblue",
#             earth_boundary = TRUE,
#             frame = FALSE)
```


```{r}
#| echo: false
#| eval: false
tm_shape(worldvector, bbox = "FULL", crs = "+proj=ortho +lat_0=0 +lon_0=100") +
  tm_polygons() +
  tm_graticules(labels.show = FALSE) +
  # tm_crs()+
  tm_layout(bg.color = "lightblue",
            earth_boundary = TRUE,
            frame = FALSE)
```

## Local map projections

<!-- local? -->
```{r}
#| echo: false
# slo_regions = read_sf("data/slovenia/slo_regions.gpkg")
# slo_regions = subset(worldvector, name == "Chile")
# tm_shape(slo_regions) +
#   tm_polygons() +
#   tm_crs("auto", property = "area")
# tm_shape(slo_regions) +
#   tm_polygons() +
#   tm_crs("auto", property = "distance")
# tm_shape(slo_regions) +
#   tm_polygons() +
#   tm_crs("auto", property = "shape")
```

<!-- properies -->

<!-- specific: south pole? -->
