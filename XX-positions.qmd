```{r}
#| echo: false
source("code/before_script.R")
```

```{r}
#| echo: false
boxy = function(text, fill) {
  grid::gList(
    grid::rectGrob(gp = grid::gpar(fill = "gold")), 
    grid::circleGrob(r = .45), 
    grid::textGrob(text)
  )
}
g = \(text) boxy(text, fill = "gold")
b = \(text) boxy(text, fill = "steelblue")
```

# Positions {#sec-positions}

```{r}
#| message: false
library(sf)
library(stars)
library(tmap)
slo_elev = read_stars("data/slovenia/slo_elev.tif")
tm = tm_shape(slo_elev) +
    tm_raster()
```

This chapter focuses on how to move map components, such as legends, scale bars, and insets, freely in the map.
They can be placed both inside and outside the map frame -- with some being in and some being out (@sec-positioning).
Moreover, map components can be grouped together, which allows to move them and arrange them as a single unit (@sec-grouping).

## Positioning {#sec-positioning}

All of the map components can be positioned in any location in the map frame or outside of it. 
The positioning is done via the `position` argument, which can take a variety of values. The most common are:

- `tm_pos_in()`: a function that allows to control the position inside the map frame (@fig-positions-in-scheme).
The first argument is the horizontal position and the second is the vertical position. 
E.g., `tm_pos_in("left", "top")` locates a component in the top left corner of the map frame.
This function can be used directly or through a shortcut -- a character vector with two elements, where the first is the horizontal position and the second is the vertical position inside the map frame, e.g., `c("left", "top")`.
- `tm_pos_out()`: a function that allows to control the position outside the map frame.
For example, `tm_pos_out("center", "top")` places a component in the center of the top side of the map frame.

Both functions can take additional arguments to control the position more precisely, including their justification and alignment.

<!-- a short intro to the rest of the section with refs -->

### Inside the map frame

```{r}
#| echo: false
#| message: false
#| dpi: 150
#| label: fig-positions-in-scheme
#| fig-cap: "Examples of positioning map components inside the map frame."
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(show = FALSE)) +
    tm_inset(g('"left", "top"'), position = c("left", "top")) +
    tm_inset(g('"right", "bottom"'), position = c("right", "bottom")) +
    tm_inset(g('"LEFT", "BOTTOM"'), position = c("LEFT", "BOTTOM")) +
    tm_inset(g('"left", "center"'), position = c("left", "center")) +
    tm_inset(b('0.5, 0.5'), position = c(0.5, 0.5)) +
    tm_inset(b('0.6, 1'), position = c(0.6, 1))
```

Map legends, by default, are placed outside of the map frame -- that is often expected as it does not overlap with the rest of the map content.
However, we can find ourselves in a situation when our spatial data is so sparse that the legend can be placed inside the map, filling a white space.
Then, we need to use the `position` argument of `tm_legend()`.

We may use it either with a vector with two elements, or with the `tm_pos_in()` function (@fig-positions-in-scheme).
For example, `position = c("right", "bottom")` or `position = tm_pos_in("right", "bottom")` are equivalent.
The first element of the vector is the horizontal position and the second is the vertical position inside the map frame.
These elements can be either in lower case letters, UPPER CASE LETTERS, or numbers between 0 and 1.

Lower case letters, e.g., `"right", "bottom"`, which places the selected map component in the right bottom corner but leaves some margin to the map frame (@fig-positions-in-1).

```{r}
#| label: position-in1
#| eval: false
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(position = c("right", "bottom")))
# same as:
# tm_shape(slo_elev) +
#     tm_raster(col.legend = tm_legend(position = tm_pos_in("right", "bottom")))
```

UPPER CASE LETTERS, e.g., `"RIGHT", "BOTTOM"`, also places the map component in the bottom right corner but directly touching the map frame (@fig-positions-in-2).

```{r}
#| label: position-in2
#| eval: false
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(position = c("RIGHT", "BOTTOM")))
```

Numbers between 0 and 1, e.g., `c(0.8, 0.4)` places the map component in the right bottom corner but with a margin of 20% of the map frame size (@fig-positions-in-3).

```{r}
#| label: position-in3
#| eval: false
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(position = c(0.8, 0.4)))
```

```{r}
#| label: fig-positions-in
#| warning: false
#| echo: false
#| layout-nrow: 3
#| fig-cap: "Positioning legends inside the map frame."
#| fig-subcap:
#|   - "With lower case letters: \"right\", \"bottom\""
#|   - "With UPPER CASE LETTERS: \"RIGHT\", \"BOTTOM'\""
#|   - "With numbers: 0.8, 0.4" 
#| #fig-asp: 0.69
<<position-in1>>
<<position-in2>>
<<position-in3>>
```

<!-- explain more control with tm_pos_in() -->
<!-- tm_pos_in() -- middle of a cell -->

### Outside the map frame

```{r}
#| echo: false
#| message: false
#| dpi: 150
#| fig-asp: 1
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(show = FALSE)) + 
    tm_inset(g('"center", "center"'), position = tm_pos_on_top(pos.h = "center", pos.v = "center")) +
    tm_inset(g('"left", "center"'), position = tm_pos_out("left", "center", pos.v = "center")) +
    tm_inset(g('"right", "center"'), position = tm_pos_out("right", "center", pos.v = "center")) +
    tm_inset(g('"left", "top"'), position = tm_pos_out("left", "top")) +
    tm_inset(g('"center", "top"'), position = tm_pos_out("center", "top", pos.h = "center")) +
    tm_inset(g('"right", "top"'), position = tm_pos_out("right", "top")) +
    tm_inset(g('"left", "bottom"'), position = tm_pos_out("left", "bottom")) +
    tm_inset(g('"center", "bottom"'), position = tm_pos_out("center", "bottom", pos.h = "center")) +
    tm_inset(g('"right", "bottom"'), position = tm_pos_out("right", "bottom")) +
    tm_layout(asp = 1, frame.lwd = 2)
```


```{r}
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(position = tm_pos_out("left", "center")))
```

```{r}
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(position = tm_pos_out("left", "center", pos.v = "center")))
```


```{r}
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(position = tm_pos_out("center", "center",
                                                           pos.h = "left", pos.v = "bottom")))
```


```{r}
#| echo: false
#| message: false
#| dpi: 150
#| fig-asp: 1
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(show = FALSE)) + 
    tm_inset(g("pos.v = \"top\" in\ncell (\"left\", \"center\")"), 
      position = tm_pos_out("left", "center", pos.v = "top")) +
    tm_inset(g("pos.v = \"bottom\" in\ncell (\"right\", \"center\")"), 
      position = tm_pos_out("right", "center", pos.v = "bottom")) +
    tm_inset(g("pos.h = \"center\" in\ncell (\"center\", \"top\")"), 
      position = tm_pos_out("center", "top", pos.h = "center")) +
    tm_inset(g("pos.h = \"right\" in\ncell (\"center\", \"bottom\")"), 
      position = tm_pos_out("center", "bottom", pos.h = "right")) +
    tm_layout(asp = 1, frame.lwd = 2)
```

```{r}
tm_shape(slo_elev) +
  tm_raster(col.legend = tm_legend(position = tm_pos_out("left", "center"))) +
  tm_scalebar(position = tm_pos_out("left", "center", pos.v = "bottom"))
```

```{r}
#| echo: false
#| message: false
#| dpi: 150
tm_shape(slo_elev) +
    tm_raster(col.legend = tm_legend(show = FALSE)) +
    tm_inset(b("pos.h = 0.5\npos.v = 0.5\nin center cell"),
               position = tm_pos_in(pos.h = 0.5, pos.v = 0.5)) +
    tm_inset(b("pos.h = 0.5\npos.v = 0.5\nin center cell"),
               position = tm_pos_in(pos.h = 1, pos.v = 1,
                                    just.h = "right", just.v = "top")) +
    tm_inset(b("pos.h = 0.5\npos.v = 0.5\nin center cell"),
               position = tm_pos_in(pos.h = 0, pos.v = 0.5,
                                    just.h = "left", just.v = "center"))
```

```{r}
tm_shape(slo_elev) +
  tm_raster(col.legend = tm_legend(position = tm_pos_out("left", "center"))) +
  tm_scalebar(position = tm_pos_out("left", "center"))
```

```{r}
tm_shape(slo_elev) +
  tm_raster() +
  tm_scalebar() +
  tm_layout(component.position = tm_pos_out("left", "center"))
```

## Grouping {#sec-grouping}

```{r}
tm_shape(slo_elev) +
  tm_raster(col.legend = tm_legend(group_id = 1)) +
  tm_scalebar(group_id = 2) +
  tm_credits("My credits", group_id = 2) +
  tm_comp_group(1, position = tm_pos_in("right", "bottom")) +
  tm_comp_group(2, position = tm_pos_in("left", "top"))
```

```{r}
tm_shape(slo_elev) +
  tm_raster(col.legend = tm_legend(group_id = 1)) +
  tm_scalebar(group_id = 2) +
  tm_credits("My credits", group_id = 2) +
  tm_comp_group(1, position = tm_pos_in("right", "bottom")) +
  tm_comp_group(2, position = tm_pos_in("left", "top"), stack = "horizontal")
```

<!-- z -- order -->
<!-- , frame_combine = FALSE -->
<!-- equalize = FALSE -->
<!-- , offset = 0, stack_margin = 1 -->
<!-- frame = TRUE, bg.color = "purple", bg.alpha = 0.5 -->