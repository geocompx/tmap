{
  "hash": "7f4240ff65ff229b0a7d0780e4fa20c3",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n\n# Charts {#sec-charts}\n\nThematic maps usually represent one or more variables using colors, shapes, or sizes.\nThen, the map legend is used to explain the meaning of these visual variables (@sec-legends).\nSuch a legend can be expanded (or even replaced, @sec-charts-customization) with a chart that provides more information about the distribution of the variable values.\n\nThe **tmap** package provides several chart types that can be used in the map legend (@tbl-layers-table).\nThey are specified in one of the `*.chart` arguments of a layer function, e.g., `fill.chart` of `tm_polygons()`, `size.chart` of `tm_dots()`, etc.\nThe use of a chart type depends on the type of data we want to represent, i.e., whether it is numerical or categorical, and whether it is univariate or bivariate.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\n<!-- Martijn, why do we need `tm_chart_none()`? -->\n\n\n\n\n\n::: {#tbl-layers-table .cell layout-align=\"center\" tbl-cap='Available chart types.'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_lbzwpy41b8f1ocz3enr9(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_lbzwpy41b8f1ocz3enr9\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_lbzwpy41b8f1ocz3enr9');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_lbzwpy41b8f1ocz3enr9(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_lbzwpy41b8f1ocz3enr9\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 7, j: 1 },  ], css_id: 'tinytable_css_4io4fd32jm8lxpo8i2z1',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_lvaok9ny0cmnuu9v1ub7',}, \n          { positions: [ { i: 7, j: 0 },  ], css_id: 'tinytable_css_fj8i7a6pgov4iz0dghed',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 6, j: 0 },  ], css_id: 'tinytable_css_hriimk9js5kju5lj4j71',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_8upsikl2m15eul1rzwm6',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_lbzwpy41b8f1ocz3enr9(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_4io4fd32jm8lxpo8i2z1, .table th.tinytable_css_4io4fd32jm8lxpo8i2z1 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_lvaok9ny0cmnuu9v1ub7, .table th.tinytable_css_lvaok9ny0cmnuu9v1ub7 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_fj8i7a6pgov4iz0dghed, .table th.tinytable_css_fj8i7a6pgov4iz0dghed { font-family: monospace; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_hriimk9js5kju5lj4j71, .table th.tinytable_css_hriimk9js5kju5lj4j71 { font-family: monospace; }\n      .table td.tinytable_css_8upsikl2m15eul1rzwm6, .table th.tinytable_css_8upsikl2m15eul1rzwm6 { font-family: monospace; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_lbzwpy41b8f1ocz3enr9\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Function</th>\n                <th scope=\"col\">Description</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>tm_chart_histogram()</td>\n                  <td>Histogram</td>\n                </tr>\n                <tr>\n                  <td>tm_chart_box()</td>\n                  <td>Box plot</td>\n                </tr>\n                <tr>\n                  <td>tm_chart_violin()</td>\n                  <td>Violin plot</td>\n                </tr>\n                <tr>\n                  <td>tm_chart_bar()</td>\n                  <td>Bar chart</td>\n                </tr>\n                <tr>\n                  <td>tm_chart_donut()</td>\n                  <td>Donut chart</td>\n                </tr>\n                <tr>\n                  <td>tm_chart_heatmap()</td>\n                  <td>Heatmap</td>\n                </tr>\n                <tr>\n                  <td>tm_chart_none()</td>\n                  <td>No chart</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n\nFor the examples in this chapter, we will use the Slovenian regions dataset that contains information about the population density, region group, and the percentage of the population aged 65 or more in each region.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nslo_regions = read_sf(\"data/slovenia/slo_regions.gpkg\")\n```\n:::\n\n\n\n\n\n## Numerical data\n\nThe first group of charts is used for numerical data, i.e., data that can take any value within a range.\nIt includes histograms, box plots, violin plots, and donut charts.\n\nHistograms are the most common chart type used to represent the distribution of a numerical variable.\nThey show how often each range of values occurs in the data -- helping to understand which values are more common and if there are any outliers.\nTo add a histogram to the map, we use the `tm_chart_histogram()` function in the `fill.chart` argument of the `tm_polygons()` function (@fig-chart-hist-1).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_symbols(fill = \"pop_dens\",\n             fill.chart = tm_chart_histogram())\n```\n:::\n\n\n\n\n\nSuch a histogram, like other charts, is automatically placed along the map legend.\nHowever, we can position them independently of the map legend using the `position` argument of the `tm_chart_*()` and `tm_legend()` functions (@fig-chart-hist-2).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.chart = tm_chart_histogram(\n                position = tm_pos_out(\"left\", \"center\")\n                ),\n              fill.legend = tm_legend(\n                position = tm_pos_out(\"right\", \"center\")\n                )\n              )\n```\n:::\n\n::: {#fig-chart-hist .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Default histogram](figures/fig-chart-hist-1.png){#fig-chart-hist-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![Repositioned histogram](figures/fig-chart-hist-2.png){#fig-chart-hist-2 fig-align='center' width=100%}\n:::\n\nHistogram added to a map to represent the distribution of a variable.\n:::\n\n\n\n\n\n@fig-chart-num shows additional three chart types that can be used for numerical data: box plots, violin plots, and donut charts.\nThey can be added to the map using the `tm_chart_box()`, `tm_chart_violin()`, and `tm_chart_donut()` functions, respectively.\nAs you may notice, these charts show similar messages, e.g., than the middle value range is the most common.\nOn the other hand, box plots directly show the median and quartiles of the data, violin plots also show the density of the data distribution, and donut charts show the proportions of the data.\nThey also have different aesthetics.\nThus, the choice of the chart type depends on the message we want to convey and the aesthetics we prefer.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# box plot\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.chart = tm_chart_box())\n# violin plot\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.chart = tm_chart_violin())\n# donut plot\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.chart = tm_chart_donut())\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Charts for numerical data.](figures/fig-chart-num-1.png){#fig-chart-num fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n## Categorical data\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"region_group\",\n              fill.chart = tm_chart_donut())\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"region_group\",\n              fill.chart = tm_chart_bar())\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Charts for categorical data.](figures/fig-chart-cat-1.png){#fig-chart-cat fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n## Bivariate data\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(fill = tm_vars(c(\"pop_dens\", \"pop65perc\"), multivariate = TRUE),\n              fill.scale = tm_scale_bivariate(values = \"purplegold\"),\n              fill.chart = tm_chart_heatmap())\n```\n\n::: {.cell-output-display}\n![Bivariate charts used in case of representing a relationship between two numerical variables.](figures/fig-chart-bivariate-1.png){#fig-chart-bivariate fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n## Additional customization {#sec-charts-customization}\n\n<!-- with ggplot2 package and/or book reference -->\n<!-- https://github.com/geocompx/tmap/issues/10#issuecomment-3007409988 -->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.chart = tm_chart_histogram(\n                plot.axis.x = TRUE,\n                extra.ggplot2 = list(theme(plot.background = element_rect(fill = \"lightgray\")))\n              ))\n```\n\n::: {.cell-output-display}\n![Customizing charts with ggplot2.](figures/fig-chart-ggplot1-1.png){#fig-chart-ggplot1 fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\",\n              fill.chart = tm_chart_histogram(\n                plot.axis.x = TRUE,\n                plot.axis.y = TRUE,\n                extra.ggplot2 = list(theme(plot.background = element_rect(fill = \"#FFC067\"),\n                                           plot.title = ggplot2::element_text(size = 10)),\n                                     coord_flip(),\n                                     labs(title = \"Population density\")),\n                position = tm_pos_in(\"LEFT\", \"TOP\"),\n                width = 20,\n              ),\n              fill.legend = tm_legend(show = FALSE))\n```\n\n::: {.cell-output-display}\n![Using chart as a map legend.](figures/fig-chart-ggplot2-1.png){#fig-chart-ggplot2 fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}