{
  "hash": "88fde0576dba17b4514881e408794f88",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# Arranging maps {#sec-arranging-maps}\n\nThe **tmap** package offers several tools for arranging multiple maps within a single layout.\nWhen we want to display one main map and one or more additional maps, we can use `tm_minimap()` or `tm_inset()`.\nThe first function adds a small overview map to the main map using a fixed, non-customizable style (@sec-minimap).\nMore advanced arrangements can be made with the `tm_inset()` function, which adds a graphical object (including a `tmap` object) to the main map (@sec-inset-maps).\n\nTo create a layout with multiple maps, we have two main options.\nThe first one, which is the focus of this chapter, is to use the `tmap_arrange()` function.\nIt takes two or more `tmap` objects and arranges them in a grid layout as you can learn in @sec-arrangements and @sec-customizing-arrangements.\nThe second option is to create facets with the `tm_facet()` function, which is described in @sec-facets.\nThe main difference is that `tmap_arrange()` combines multiple maps, often based on different data, while `tm_facet()` creates a single map with numerous panels based on the same data.\n\n## Inset maps {#sec-inset-maps}\n\nInset maps are a powerful way to add additional context or details to a main map.\nThey are typically smaller maps that show a specific area of interest, such as a zoomed-in view of a region, or a different data layer that complements the main map.\nIn **tmap**, insets may be based on image files, **ggplot2** objects, a bounding box, or another `tmap` object.\nTo add an inset map to a main map, we can use the `tm_inset()` function.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(stars)\n#> Loading required package: abind\n#> Loading required package: sf\n#> Linking to GEOS 3.13.0, GDAL 3.10.3, PROJ 9.6.0; sf_use_s2() is TRUE\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\ntm_shape(slo_elev) +\n  tm_raster() +\n  tm_inset(tmaptools::bb(\"Maribor\")) +\n  tm_inset(tmaptools::bb(\"Ljubljana\")) +\n  tm_inset(tmaptools::bb(\"Bled\"))\n#> [scale] tm_raster:() the data variable assigned to 'col' contains positive and negative values, so midpoint is set to 0. Set 'midpoint = NA' in 'fill.scale = tm_scale_intervals(<HERE>)' to use all visual values (e.g. colors)\n#> [plot mode] legend/component: Some components or legends are too \"high\" and are\n#> therefore rescaled.\n#> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n```\n\n::: {.cell-output-display}\n![](figures/unnamed-chunk-1-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(stars)\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\ntm_shape(slo_elev) +\n  tm_raster(\n    col.scale = tm_scale_continuous(values = \"geyser\", midpoint = NA)\n  ) +  \n  tm_title(\"Maribor\", position = c(\"right\", \"bottom\")) +\n  tm_inset(tmaptools::bb(\"Maribor\"), position = c(\"right\", \"bottom\")) +\n  tm_title(\"Ljubljana\", position = c(\"right\", \"bottom\")) +\n  tm_inset(tmaptools::bb(\"Ljubljana\"), position = c(\"right\", \"bottom\")) +\n  tm_title(\"Bled\", position = c(\"left\", \"top\")) +\n  tm_inset(tmaptools::bb(\"Bled\"), position = c(\"left\", \"top\"))\n```\n\n::: {.cell-output-display}\n![](figures/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nworldelevation = read_stars(\"data/worldelevation.tif\")\n\ntm_slo_elev = tm_shape(slo_elev) +\n  tm_raster(\n    col.scale = tm_scale_continuous(values = \"geyser\", midpoint = NA,\n                                    limits = c(-500, 6500)),\n    col.legend = tm_legend(show = FALSE)\n  )\n\ntm_shape(worldelevation) +\n  tm_raster(\n    col.scale = tm_scale_continuous(values = \"geyser\", midpoint = NA,\n                                    limits = c(-500, 6500))\n  ) +\n  tm_title(\"Slovenia\", position = c(\"LEFT\", \"CENTER\")) +\n  tm_inset(tm_slo_elev, position = c(\"LEFT\", \"CENTER\")) +\n  tm_crs(\"+proj=eqearth\") +\n  tm_layout(earth_boundary = TRUE,\n            space.color = \"red\")\n#> [plot mode] fit legend/component: Some legend items or map compoments do not\n#> fit well, and are therefore rescaled.\n#> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n```\n\n::: {.cell-output-display}\n![](figures/unnamed-chunk-3-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n<!-- ggplot2 insets? -->\n<!-- image insets? -->\n\n::: {.callout-note}\nInsets are not usually needed in the interactive mode, as we can zoom in and out of the main map.\nThus, the `tm_inset()` function calls only work in plot mode.\n:::\n\n## Basic arrangements {#sec-arrangements}\n\nLet's see how the `tmap_arrange()` function works based on two maps of Slovenia, each based on different data sources.\nThe first map is based on the GDP per capita of Slovenia's regions, represented as polygons.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nslo_regions = read_sf(\"data/slovenia/slo_regions.gpkg\")\ntm1 = tm_shape(slo_regions) +\n  tm_polygons(\"gdppercap\") +\n  tm_title(\"GDP per capita in Slovenia\")\n```\n:::\n\n\n\n\nThe second map is based on the elevation of Slovenia, represented as a raster layer.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(stars)\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\ntm2 = tm_shape(slo_elev) +\n  tm_raster() +\n  tm_title(\"Elevation in Slovenia\")\n```\n:::\n\n\n\n\nIn both cases, we also added titles to the maps using the `tm_title()` function to clarify what each map represents, and assigned them to the objects `tm1` and `tm2`.\nNow, we may arrange these two maps in a single layout using the `tmap_arrange()` function (@fig-arrangements1).\nThe `tmap_arrange()` function can take any number of `tmap` objects as input or even a list of `tmap` objects.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntmap_arrange(tm1, tm2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![Arranging two maps in one layout.](figures/fig-arrangements1-1.png){#fig-arrangements1 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nIn the example above, we used our two maps and specified the number of columns in the layout using the `ncol` argument.\nWe can also specify the number of rows using the `nrow` argument, the aspect ratio of the maps using the `asp` argument, and the widths and heights of the maps using the `widths` and `heights` arguments, respectively.\n\n## Customizing arrangements {#sec-customizing-arrangements}\n\nThe `tmap_arrange()` does not align layouts of multiple maps -- you may notice that the frames of the two maps in @fig-arrangements1 are not equal in height.\nTo align the frames of the maps, we can use the `meta.margins` argument in the `tm_layout()` function for each map.\nThis argument allows us to specify the margins around the map frame available for map elements, such as titles and legends, in the order of `c(bottom, left, top, right)`.\n<!-- Martijn, is the above statement correct? -->\n\nHere, we set the bottom margin to `0.3`<!-- units? --> for both maps, which will align their frames vertically.\nSee the effect of this change in @fig-arrangements2.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm1a = tm1 +\n  tm_layout(meta.margins = c(0.3, 0, 0, 0))\ntm2a = tm2 +\n  tm_layout(meta.margins = c(0.3, 0, 0, 0))\ntmap_arrange(tm1a, tm2a, ncol = 2)\n```\n\n::: {.cell-output-display}\n![Arranging two maps in one layout with aligned frames.](figures/fig-arrangements2-1.png){#fig-arrangements2 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nYou may also notice that, as we set the top margin of the second map to `0`, the titles of both maps were moved inside the map frames.\nIf you want to keep the titles outside, you can set the top margin of the second map to a small value, such as `0.05`.\n\n::: {.callout-note}\nThe outcomes of the `tmap_arrange()` function also work in the **tmap** view mode, which allows you to explore a few maps at once interactively.\n:::\n\n<!-- widths, heights -->\n<!-- any better example idea? -->\n<!-- tmap_arrange(tm1a, tm2a, nrow = 2, heights = c(0.8, 0.2)) -->\n<!-- possibly add a tm_add_legend example plus a ref -->\n\n::: {.callout-note}\nThe `tmap_arrange()` function call can be saved to an object, which can then be used in other functions, such as `tmap_save()`, to save the arranged maps to a file.\nFor more information on saving maps, see @sec-save.\n:::\n\n<!-- tmap_grob? -->\n<!-- should the tm_inset be moved here? -->\n",
    "supporting": [
      "arrangements_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}