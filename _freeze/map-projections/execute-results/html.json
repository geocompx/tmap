{
  "hash": "40bb000be14d806e15c46b98bfa8a7a7",
  "result": {
    "engine": "knitr",
    "markdown": "\n::: {.cell}\n\n:::\n\n\n# Map projections {#sec-map-projections}\n\nThis chapter gives a background on why do we need map projections and how to translate spatial data from an ellipsoid into a flat surface or computer screen.\nThen, it explains basic terms, gives an overview of map projections, and provides guidelines for choosing a suitable map projection for a specific application.\nFinally, it shows how to use R and the **tmap** package to specify and customize map projections.\n\n## What are map projections? {#sec-crs-intro}\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\\index{map projections}\nWe use maps so often in everyday life that most of us probably forget that a map is just a two-dimensional representation of a three-dimensional object, namely the Earth.\nFor centuries, geographers and mathematicians wondered what the best way is to do this.\nLet us wonder with them for a second.\n\nThe world is depicted as an orange in @fig-orange, not just to stimulate your appetite for this subject, but also because an orange peel serves as a good analogy for a two-dimensional map.\nA world map can be seen as an orange peel laid out on the table.\nThe question is how to peel the orange and how to put the peel flat on the table.\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![How to peel an orange?](images/orange_world.png){#fig-orange fig-align='center' fig-pos='t' fig-scap='How to peel an orange?' width=100%}\n:::\n:::\n\n\nWhen we peel the orange, ideally, we want to rip the peel near areas of the Earth that are less interesting. \nWhat is interesting depends on the application -- for applications where land mass is more important than water mass, it is a good idea to make the rips in the oceans.\nThe (interrupted) Goode homolosine projection (@fig-crs-goode) embodies this idea. \nAll continents and countries are preserved except Antarctica and Greenland.\nThere is also a version of the Goode homolosine projection that focuses on preserving the oceans.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The (interrupted) Goode homolosine projection.](figures/fig-crs-goode-1.png){#fig-crs-goode fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nTo make the analogy between the orange peel and the surface of the Earth complete, we have to assign two fictitious properties to the orange peel, namely that it is stretchable and deformable.\nThese properties are needed in order to make a non-interrupted map, as we will see in the following sections.\n\n\\index{map projections}\n\\index{coordinate reference system (CRS)}\nA method to flatten down the Earth, for which the Goode homolosine projection shown in @fig-crs-goode is an example, is called a *map projection*. \nTechnically, it is also known as a *coordinate reference system* (*CRS*), which specifies the corresponding coordinate system, as well as the transformations to other map projections.\n\n## A model of the Earth {#sec-crs-earth}\n\n\\index{ellipsoid}\nThe orange and the Earth have another thing in common: both are spheres, but not perfect ones.\nThe Earth is metaphorically speaking a little fat: the circumference around the equator is 40,075 km, whereas around the circumference that crosses both poles is 40,009 km.\nTherefore, the Earth can better be described as an ellipsoid.\nThe same applies to an orange: every orange is a little different, but probably very few oranges are perfect spheres.\n\nAlthough the ellipsoid is a good mathematical model to describe the Earth's surface, keep in mind that the surface of the Earth is not smooth -- land mass usually lies at a higher altitude than sea level.\nWe could potentially map each point on the surface of the Earth using a three-dimensional $(x, y, z)$ Cartesian coordinate system with the center of the mass of the Earth being the origin (0, 0, 0).\nHowever, since this has many mathematical complications, the ellipsoid is often sufficient as a model of the surface of the Earth.\n\n\\index{datum}\nThis ellipsoid model and its translation to the Earth's surface is called a *(geodetic) datum*.\nMany datums exist, for global and local applications.\nThe most popular global datum is WGS84, which was introduced in 1984 as an international standard and was last revised in 2004.\nThen, there are many local datums, which are often tailored for specific regions or countries.\nFor instance, NAD83, ETRS89, and GDA94 are slightly better models for North America, Europe, and Australia, respectively.\nHowever, since WGS84 is a very good approximation of the Earth as a whole, it has been widely adopted worldwide and is also used by the Global Positioning System (GPS).\n\n\\index{latitude and longitude}\nWhen we have specified a datum, we are able to describe geographic locations with two familiar variables, namely *latitude* and *longitude*.\nThe latitude defines the north-south position in degrees, where latitude = 0$^\\circ$ is the equator.\nThe latitudes for the north and south poles are 90$^\\circ$ and $-90^\\circ$, respectively.\nThe longitude specifies the east-west position in degrees, where by convention, the longitude = 0$^\\circ$ meridian crosses the Royal Observatory in Greenwich, UK.\nThe longitude range is -180$^\\circ$ to 180$^\\circ$, and since this is a full circle, -180$^\\circ$ and $^\\circ$ specify the exact longitude.\n\n\\index{graticule}\nWhen we see the Earth in its three-dimensional form, as in @fig-orange, the latitude parallels are the horizontal lines around the Earth, and the longitude meridians are the vertical lines around the Earth.\nThe set of longitude meridians and latitude parallels is also referred to as *graticule*.\nIn all the figures in this section, latitude parallels are shown as gray lines for $-60^\\circ$, $-30^\\circ$, $0^\\circ$, $30^\\circ$ and $60^\\circ$, and longitude meridians from $-180^\\circ$ to $180^\\circ$ at every $30^\\circ$.\n\nPlease keep in mind that only a latitude and longitude are not sufficient to specify a geographic location.\nA datum is required.\nWhen people exchange latitude-longitude data, it is often safe to assume that they implicitly have used the WGS84 datum.\nHowever, it is good practice to specify the datum explicitly.\n\n## Platte Carrée and Web Mercator {#sec-crs-projections}\n\n\\index{web mercator}\n\\index{EPSG}\nLet's take a closer look at two widely used map projections, namely the plain latitude-longitude coordinate system (using the WGS84 datum) and the Web Mercator projection, which is currently the de facto standard for interactive maps. \nThese projections are indexed as `EPSG:4326` and `EPSG:3857` respectively.\n[EPSG](https://epsg.org) is a database of standard map projections.\n\n<!--https://geographx.co.nz/map-projections/-->\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Latitude longitude coordinates (EPSG:4326).](figures/fig-crs-04-1.png){#fig-crs-04 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nWhen we fictitiously make little holes in the orange peel at both poles, and stretch these open so wide that they have the same width as the equator, we obtain the cylinder depicted in @fig-crs-04 (left).\nNote that the longitude lines have become straight vertical lines.\nWhen we unroll this cylinder, we obtain a map where the $x$ and $y$ coordinates are the longitude and latitude, respectively. \nThis CRS, which is known as `EPSG:4326`, is shown in Figure @fig-crs-04 (right).\n\n\\index{coordinate reference system (CRS)}\n\\index{unprojected coordinate reference system (CRS)}\n\\index{projected coordinate reference system (CRS)}\n`EPSG:4326` is an *unprojected* CRS since the longitude and latitude have not been transformed.\nWith *projected* CRSs, the $x$ and $y$ coordinates refer to specific measurement units, usually meters.\nThe projected variant of this CRS is called the *Platte Carrée* (`EPSG:4087`), and is exactly the same map as shown in Figure @fig-crs-04 (right), but with other $x$ and $y$ value ranges.\n<!-- what value ranges? -->\n\nObserve since we stretched the poles open, the area near the poles has been stretched out as well.\nMore specifically, the closer the land is to one of the poles, the more it has been stretched out.\nSince the stretching direction is only horizontal, the shapes of the areas have become wider.\nA good example is Greenland, which is naturally elongated from north to south (as can be seen in @fig-orange).\n\n\\index{web mercator}\n<!-- Martijn, is the below statement true (that Mercator tried to fix the area deformation by stretching the poles vertically)?? -->\nIn order to fix these deformed areas, Gerardus Mercator, a Flemish geographer in the 16th century, introduced a method to compensate for this by inflating the areas near the poles even more, but now only in a vertical direction.\nThis projection is called the Mercator projection.\nFor web applications, this projection has been slightly modified and renamed to the Web Mercator projection (`EPSG:3857`).\nThe cylinder and plain map that uses this projection are shown in @fig-crs-05.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Web Mercator projection (EPSG:3857).](figures/fig-crs-05-1.png){#fig-crs-05 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nAlthough the areas near the poles have been inflated quite a lot, especially Antarctica and Greenland, the shape of the areas is more or less correct, in particular regarding small regions (which can be seen by comparing with @fig-orange).\nThe Mercator projection is very useful for navigational purposes and has therefore been embraced by sailors ever since.\nAlso, today, the Web Mercator is the de facto standard for interactive maps and navigation services.\nHowever, for maps that show data, the (Web) Mercator projection should be used with great caution because the hugely inflated areas influence how we perceive spatial data.\nWe discuss this in the next section.\n\n## Types of map projections {#sec-proj-types}\n\n<!-- https://en.wikipedia.org/wiki/List_of_map_projections\nhttp://www.geog.uoregon.edu/shinker/geog311/Labs/lab02/properties.htm\nhttps://www.researchgate.net/publication/303311220_Projection_Wizard_-_An_Online_Map_Projection_Selection_Tool\nhttps://projectionwizard.org/\nhttps://kartoweb.itc.nl/geometrics/Map%20projections/body.htm\nhttp://www.geo.hunter.cuny.edu/~jochen/gtech201/lectures/lec6concepts/map%20coordinate%20systems/how%20to%20choose%20a%20projection.htm\nhttps://books.google.nl/books?id=E0JZDwAAQBAJ&pg=PA244&lpg=PA244&dq=Equidistant+projections+important&source=bl&ots=UqDt0ZBgEP&sig=ACfU3U3R1XN0i33v6Izh8fQZGJbpLF9ULw&hl=en&sa=X&ved=2ahUKEwi84tT_68rqAhUQ26QKHRcWD3AQ6AEwEHoECAgQAQ#v=onepage&q=Equidistant%20projections%20important&f=false\n-->\n\n\\index{map projections}\nLet us return to the original question: how can we create a two-dimensional representation of our three-dimensional Earth? \nAlthough there are many ways, four basic map projection types can be distinguished. \nThese are depicted in @fig-crs-types.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Four types of map projections.](figures/fig-crs-types-1.png){#fig-crs-types fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n\\index{cylindrical map projections}\nExamples of cylindrical projections have already been given in the previous section: both Platte Carrée and Web Mercator are cylindrical. \nAnother widely used cylindrical map projection is the *Universal Transverse Mercator (UTM)*.\nIts cylinder is not placed upright but horizontally.\nThere are 60 positions in which this cylinder can be placed, where in each position, the cylinder faces a longitude range of 6 degrees.\nIn other words, the UTM is not a single projection, but a series of 60 projections.\n\nThere are many projections that are pseudo-cylinders in the sense that the radius around the poles is smaller than around the equator.\nAn example is the Robinson projection shown in @fig-crs-robin.\nAlmost all commonly used standard World map projections are (pseudo-)cylindrical.\n<!-- why? -->\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The Robinson projection, which is pseudo-cylindrical.](figures/fig-crs-robin-1.png){#fig-crs-robin fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n\\index{conic map projections}\nAn example of a conic map projection is shown in @fig-crs-conic-planar-1.\nAs a result of unfolding a cone on a flat surface, a gap is created.\nThe size (angle) of this gap depends on the width of the cone.\nThere are also pseudo-conic map projections in which some meridians (longitude lines) are curved.\nConic map projections are useful for mid-latitude areas where the Earth's surface and the cone are nearly parallel to each other. \n\n\\index{planar map projections}\nPlanar map projections, also known as azimuthal projections, project the Earth on a disk.\nThis can be done in several ways.\nOne effective method is to use the position of an imaginary light source.\nThe light source can be positioned in three different ways: inside the globe, at the surface of the globe opposite the disk, or at an infinite distance from the disk.\nThe corresponding families of projections are called gnomonic, stereographic, and orthogonal projections.\n\nPlanar map projections are often used for a specific country or continent.\nAn example is the Lambert Azimuthal Equal-Area projection (`EPSG:3035`), shown in @fig-crs-conic-planar-2, which is optimized for Europe.\nIt can be classified as a stereographic projection, although the light beams are not straight but curved.\nAnother example of a planar map projection is the orange shown in @fig-orange.\nThis is an orthogonal projection.\n\n\n::: {#fig-crs-conic-planar .cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![World Equidistant Conic projection](figures/fig-crs-conic-planar-1.png){#fig-crs-conic-planar-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![Lambert Azimuthal Equal-Area projection](figures/fig-crs-conic-planar-2.png){#fig-crs-conic-planar-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of a conic and a planar projection.\n:::\n\n\n\\index{interrupted map projections}\nThe (interrupted) Goode homolosine projection shown in @fig-crs-goode is an example of an interrupted projection.\nA special class of these projections are polyhedral projections, which consist of planar faces. \nIn @fig-crs-types a polyhedral of six faces is illustrated. \nThere is no limit to the number of faces, as the myriahedral projections <!--(TODO reference Van Wijck paper)--> illustrate.\n\n## Which projection to choose? {#sec-crs-choose}\n\n\\index{map projections}\nHopefully, it is clear that there is no perfect projection, as each has its pros and cons.\nWhether a projection is suitable for a certain application depends on two factors.\nThe first factor is the type of application and, in particular, which map projection properties are useful or even required for that application (@sec-map-projection-properties).\nFor instance, navigation requires other map projection properties than statistical maps.\nThe second factor is the area of interest (@sec-area-of-interest).\nIs the whole World visualized or only a part, and in the latter case, which part?\nIn this section, guidelines are provided to help you choose a suitable projection based on these two aspects.\n\nBefore we delve deeper into selecting a projection, it is worth noting that for many countries and continents, government agencies have already chosen projections to be the standard for mapping spatial data.\nFor instance, a standard for Europe, used by Eurostat (the statistical agency of the European Union), is the Lambert Azimuthal Equal-Area projection, shown in @fig-crs-conic-planar-2.\nIf the area of interest has such a standard, it is recommended to use it, because it can be safely assumed that this standard is a proper projection, and moreover, it makes cooperation and communication with other parties easier.\nHowever, be aware of the limitations that this particular projection may have, and that there may be better alternatives out there.\n\n### Map projection properties {#sec-map-projection-properties}\n\n\\index{map projection: properties}\nThe type of application is important for the choice of a map projection.\nHowever, it would be quite tedious to list all possible applications and provide projection recommendations for each of them.\nInstead, we focus on four map projection properties.\nThe key step is to find out which of these properties are useful or even required for the target application.\nThe four properties are listed in @tbl-crs-properties.\n\n\n::: {#tbl-crs-properties .cell layout-align=\"center\" tbl-cap='Map projection properties.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"font-size: 12px; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:left;\">  </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Property </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Conformal </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Equal area </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Equidistant </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Azimuthal </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Preserves </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Local angle (shape) </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Area </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Distance </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Direction </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Applications </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Navigation, climate </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Statistics </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Geology </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Geology </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Examples (cyclindrical) </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Mercator </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Gall-Peters, Eckert IV </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Equirectangular </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> none </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Examples (conic) </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Lambert conformal conic </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Albers conic </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Equidistant conic </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> none </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Examples (planar) </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Stereographic </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Lambert azimuthal equal-area </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Azimuthal equidistant </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Stereographic, Lambert azimuthal equal-area </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 2.5cm; font-weight: bold;\"> Examples (interrupted) </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Myriahedral </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> Goode homolosine, Myriahedral </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> none </td>\n   <td style=\"text-align:left;width: 2.5cm; \"> none </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\\index{conformal map projections}\nA *conformal* projection means that local angles are preserved. \nIn practice, that means, for instance, that a map of a crossroad preserves the angles between the roads.\nTherefore, this property is required for navigational purposes.\nAs a consequence, local angles are preserved, and local shapes are also preserved. \nThat means that a small island are drawn on a map in its true shape, as seen from the sky perpendicular above it.\nThe Web Mercator, as shown in @fig-crs-05, satisfies this property.\nThe closer an area is to one of the poles, the more it is enlarged, but since this is done in both dimensions (latitude and longitude), local shapes are preserved.\n\n\\index{equal-area map projections}\nA map projection is called *equal-area* if the areas are proportional to the true areas.\nThis is strongly recommended for maps that display statistics to prevent perceptual bias.\n@fig-crs-bias shows two World maps of population density per country, one in the Web Mercator projection and the other in Eckert IV projection.\nThe perception of the World population is different in these maps -- in (a) the vast lands in low-populated areas seem to be Canada, Greenland, and Russia, whereas in (b) also North Africa and Australia emerge as vast low-populated areas.\n\n\n::: {#fig-crs-bias .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Web Mercator is not equal-area](figures/fig-crs-bias-1.png){#fig-crs-bias-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![Eckert IV is equal-area](figures/fig-crs-bias-2.png){#fig-crs-bias-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nComparison of Web Mercator and Eckert IV projections.\n:::\n\n\n\\index{equidistant map projections}\n\\index{azimuthal map projections}\nThe other two map projection properties are related to one central point on the map.\nA map projection is called *equidistant* if the distances to any other point in the map are preserved and *azimuthal* if the directions to any other point are preserved.\nThese properties are, in particular, useful in the field of geology.\nOne example is a seismic map around the epicenter of a recent earthquake, where it is crucial to show how far and in which direction the vibrations are spreading.\n\n\\index{compromise map projections}\nA map projection can satisfy at most two of these properties. \nMany map projections do not fulfill any property but are intended as a compromise.\nAn example is the Robinson projection, shown in @fig-crs-robin.\n<!-- maybe add one more sentence explaining what the Robinson projection compromises? -->\n\n### Area of interest {#sec-area-of-interest}\n\n\\index{map projection: area of interest}\nThe next aspect that is important for the choice of a map projection is the area of interest.\nIn general, the larger the area, the more concessions have to be made, since the larger the area, the more difficult it is to create a two-dimensional projection.\n\nThe following @tbl-crs-recommendations provides recommendations for map projection types based on the area size and latitude of the area.\n\n\n::: {#tbl-crs-recommendations .cell layout-align=\"center\" tbl-cap='Recommended projections for different areas.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"font-size: 12px; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> View </th>\n   <th style=\"text-align:left;\"> Low latitude (equator) </th>\n   <th style=\"text-align:left;\"> Mid latitude </th>\n   <th style=\"text-align:left;\"> High latitude (poles) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 3cm; \"> World </td>\n   <td style=\"text-align:left;width: 3cm; \"> Pseudo-cylindrical </td>\n   <td style=\"text-align:left;width: 3cm; \"> Pseudo-cylindrical </td>\n   <td style=\"text-align:left;width: 3cm; \"> Pseudo-cylindrical </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 3cm; \"> Hemisphere </td>\n   <td style=\"text-align:left;width: 3cm; \"> Azimuthal </td>\n   <td style=\"text-align:left;width: 3cm; \"> Azimuthal </td>\n   <td style=\"text-align:left;width: 3cm; \"> Azimuthal </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 3cm; \"> Continent or smaller </td>\n   <td style=\"text-align:left;width: 3cm; \"> Cylindrical or azimuthal </td>\n   <td style=\"text-align:left;width: 3cm; \"> Conic or azimuthal </td>\n   <td style=\"text-align:left;width: 3cm; \"> Azimuthal </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nFor World maps, pseudo-cylindrical map projections, such as the Robinson projection (@fig-crs-robin) and the Eckert IV projection (@fig-crs-bias-2) are very popular because they have less distortion than other map projections. \nFor areas that cover half of the sphere, i.e., a hemisphere, azimuthal map projections are recommended. \nFour hemispheres are often used: the Northern and Southern Hemispheres, with the North and South Poles as their centers, the Western Hemisphere consisting of the Americas, and the Eastern Hemisphere, which includes the other continents. \nHowever, other hemispheres are often used implicitly, such as a hemisphere centered on Europe used in the Lambert Azimuthal Equal-Area projection shown in @fig-crs-conic-planar-2.\n\nFor areas with the size of a continent or country, the azimuthal map projection type can be used when centered on the area of interest.\nIn particular, the Lambert Azimuthal Equal-Area projection is used when equal area is required, and the Azimuthal Equidistant projection is used when preserving distances is essential.\nAlternatively, cylindrical and conic map projection types can be used for areas at low and mid-latitudes, respectively.\nAnother alternative is to use a UTM projection.\nHowever, this is only recommended when the target area spans less than 6 degrees longitude and does not cross the UTM zone lines.\n\n## CRS in R {#sec-crs-in-r}\n\n\\index{coordinate reference system (CRS)}\n\\index{PROJ}\nCoordinate Reference Systems (CRSs) are implemented in the software library [**PROJ**](https://proj.org/).\nWith implementation, we mean specifying a CRS and transforming coordinates from one CRS to another.\n**PROJ** is used by every popular software application for spatial data, in particular, **ArcGIS**, **QGIS**, and **GRASS GIS**, and also by many programming languages, including R. \nThe **sf** and **terra** packages integrate the **PROJ** capabilities into R.   \n\nA CRS is represented in **sf** by an object of class `crs`, which can be retrieved or set with the function `st_crs()`.\nIn the following example, a `crs` object is created from an EPSG code, in this case, 3035, the Lambert Azimuthal Equal-Area projection for Europe.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(sf)\n# CRS Lambert Azimuthal Equal-Area projection\nst_crs(\"EPSG:3035\")\n#> Coordinate Reference System:\n#>   User input: EPSG:3035 \n#>   wkt:\n#> PROJCRS[\"ETRS89-extended / LAEA Europe\",\n#>     BASEGEOGCRS[\"ETRS89\",\n#>         ENSEMBLE[\"European Terrestrial Reference System 1989 ensemble\",\n#>             MEMBER[\"European Terrestrial Reference Frame 1989\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1990\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1991\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1992\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1993\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1994\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1996\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 1997\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 2000\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 2005\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 2014\"],\n#>             MEMBER[\"European Terrestrial Reference Frame 2020\"],\n#>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n#>                 LENGTHUNIT[\"metre\",1]],\n#>             ENSEMBLEACCURACY[0.1]],\n#>         PRIMEM[\"Greenwich\",0,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>         ID[\"EPSG\",4258]],\n#>     CONVERSION[\"Europe Equal Area 2001\",\n#>         METHOD[\"Lambert Azimuthal Equal Area\",\n#>             ID[\"EPSG\",9820]],\n#>         PARAMETER[\"Latitude of natural origin\",52,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433],\n#>             ID[\"EPSG\",8801]],\n#>         PARAMETER[\"Longitude of natural origin\",10,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433],\n#>             ID[\"EPSG\",8802]],\n#>         PARAMETER[\"False easting\",4321000,\n#>             LENGTHUNIT[\"metre\",1],\n#>             ID[\"EPSG\",8806]],\n#>         PARAMETER[\"False northing\",3210000,\n#>             LENGTHUNIT[\"metre\",1],\n#>             ID[\"EPSG\",8807]]],\n#>     CS[Cartesian,2],\n#>         AXIS[\"northing (Y)\",north,\n#>             ORDER[1],\n#>             LENGTHUNIT[\"metre\",1]],\n#>         AXIS[\"easting (X)\",east,\n#>             ORDER[2],\n#>             LENGTHUNIT[\"metre\",1]],\n#>     USAGE[\n#>         SCOPE[\"Statistical analysis.\"],\n#>         AREA[\"Europe - European Union (EU) countries and candidates. Europe - onshore and offshore: Albania; Andorra; Austria; Belgium; Bosnia and Herzegovina; Bulgaria; Croatia; Cyprus; Czechia; Denmark; Estonia; Faroe Islands; Finland; France; Germany; Gibraltar; Greece; Hungary; Iceland; Ireland; Italy; Kosovo; Latvia; Liechtenstein; Lithuania; Luxembourg; Malta; Monaco; Montenegro; Netherlands; North Macedonia; Norway including Svalbard and Jan Mayen; Poland; Portugal including Madeira and Azores; Romania; San Marino; Serbia; Slovakia; Slovenia; Spain including Canary Islands; Sweden; Switzerland; Türkiye (Turkey); United Kingdom (UK) including Channel Islands and Isle of Man; Vatican City State.\"],\n#>         BBOX[24.6,-35.58,84.73,44.83]],\n#>     ID[\"EPSG\",3035]]\n```\n:::\n\n\n\\index{crs objects}\nA `crs` object contains Well Known Text (WKT).\nIt includes a specification of the used datum as well as information on how to transform it into other CRSs.\nUnderstanding the exact content of the WTK is not important for most users, since it is not needed to write a WKT yourself.\n\n\\index{crs objects}\n\\index{EPSG}\n\\index{proj4}\nA `crs` object can be created in several ways:\n<!--to improve in the future-->\n\n1. The first is with an EPSG number as a user input specification, as shown above. <!--it can be also some other \"provider\", e.g. \"ESRI:37001\"-->\n2. The second is also with a user input specification, but with a so-called *proj4* character string. \nThe *proj4* character string for the LAEA projection is `\"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs\"`.\nHowever, *proj4* character strings should be used with caution since they often lack important CRS information regarding datums and CRS transformations.\nAlso note that the name *proj4* stands for the **PROJ** library version 4, while the current major version of **PROJ** at the time of writing is already 9.\n<!--update-->\n3. The third way is to provide a WKT definition of the projection. <!--...-->\n4. The last way to create a `crs` object is to extract it from an existing spatial data object (e.g., an **sf**, **terra**, or **stars** object) using the `st_crs()` function.\n\nA `crs` object can define a new spatial object's projection or transform an existing spatial object into another projection.\nIn the example below, we created a new object, `waterfalls`, with names and coordinates of three famous waterfalls.\nNext, we converted it into a spatial object of the `sf` class, `waterfalls_sf()` with `st_as_sf()`.\nWe can see that our object's coordinate reference system is not defined with the `st_crs()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# create a data frame of three famous waterfalls\nwaterfalls = data.frame(name = c(\"Iguazu Falls\", \"Niagara Falls\", \"Victoria Falls\"), \n                        lat = c(-25.686785, 43.092461, -17.931805), \n                        lon = c(-54.444981, -79.047150, 25.825558))\n# create sf object (without specifying the crs)\nwaterfalls_sf = st_as_sf(waterfalls, coords = c(\"lon\", \"lat\"))\n# extract crs (not defined yet)\nst_crs(waterfalls_sf)\n#> Coordinate Reference System: NA\n```\n:::\n\n\nThis function also allows us to specify CRS of our object -- in this example, coordinates of our object are in the WGS84 coordinate system, and thus we can use the EPSG code of 4326.\nWe can also confirmed that our operation was successful also using `st_crs()`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# specify crs\nst_crs(waterfalls_sf) = \"EPSG:4326\"\n# extract crs\nst_crs(waterfalls_sf)\n#> Coordinate Reference System:\n#>   User input: EPSG:4326 \n#>   wkt:\n#> GEOGCRS[\"WGS 84\",\n#>     ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n#>         MEMBER[\"World Geodetic System 1984 (Transit)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G730)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G873)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G1150)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G1674)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G1762)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G2139)\"],\n#>         MEMBER[\"World Geodetic System 1984 (G2296)\"],\n#>         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n#>             LENGTHUNIT[\"metre\",1]],\n#>         ENSEMBLEACCURACY[2.0]],\n#>     PRIMEM[\"Greenwich\",0,\n#>         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>     CS[ellipsoidal,2],\n#>         AXIS[\"geodetic latitude (Lat)\",north,\n#>             ORDER[1],\n#>             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>         AXIS[\"geodetic longitude (Lon)\",east,\n#>             ORDER[2],\n#>             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>     USAGE[\n#>         SCOPE[\"Horizontal component of 3D system.\"],\n#>         AREA[\"World.\"],\n#>         BBOX[-90,-180,90,180]],\n#>     ID[\"EPSG\",4326]]\n```\n:::\n\n\nAlternatively, it is possible to set the CRS when creating a new `sf` object, as you can see below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwaterfalls_sf = st_as_sf(waterfalls, \n                         coords = c(\"lon\", \"lat\"), crs = \"EPSG:4326\")\n```\n:::\n\n\nThe `st_transform()` function is used to convert the existing vector spatial object's coordinates into another projection.\nFor example, let's transform our `waterfalls_sf` object to the Equal Earth projection (`EPSG:8857`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwaterfalls_sf_trans = st_transform(waterfalls_sf, \"EPSG:8857\")\nwaterfalls_sf_trans\n#> Simple feature collection with 3 features and 1 field\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -6580000 ymin: -3240000 xmax: 2420000 ymax: 5260000\n#> Projected CRS: WGS 84 / Equal Earth Greenwich\n#>             name                  geometry\n#> 1   Iguazu Falls POINT (-4969711 -3244138)\n#> 2  Niagara Falls  POINT (-6583123 5261565)\n#> 3 Victoria Falls  POINT (2416945 -2285044)\n```\n:::\n\n\n@fig-crs-trans-plot shows the example data in the WGS84 coordinate system on the top and in the Equal Earth projection on the bottom.\nYou can see here that the decision of the projection used has an impact not only on the coordinates (notice the grid values), but also on the continents' shapes.\n\n\n::: {#fig-crs-trans-plot .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![WGS84 coordinate system](figures/fig-crs-trans-plot-1.png){#fig-crs-trans-plot-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![Equal Earth projection](figures/fig-crs-trans-plot-2.png){#fig-crs-trans-plot-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nComparison between the same dataset of three waterfalls.\n:::\n\n\n## Specifying map projections within **tmap**\n\nNow that the concepts of map projections are established, we can examine how to specify map projections in **tmap**.\nHere, we expand on the short introduction from @sec-map-projection-intro and show how to use various tools available in the `tm_crs()` function.\n\n### Vector data\n\nFirst, see how to specify a map projection for vector data.\nWe use the `worldvector.gpkg` and `worldcities.gpkg` datasets -- the first one uses the Equal Earth projection (`EPSG:8857`), and the second one uses the WGS 84 coordinate system (`EPSG:4326`).\nAdditionally, to show the effect of map projections, we transform the `worldvector` data into the WGS 84 coordinate system, namely `worldvector_wgs84`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nworldvector = read_sf(\"data/worldvector.gpkg\")\nworldcities = read_sf(\"data/worldcities.gpkg\")\nworldvector_wgs84 = st_transform(worldvector, \"EPSG:4326\")\n```\n:::\n\n\n@fig-mproj12-1 shows the map of the world in the WGS 84 coordinate system created with the code below.\nWe often see this coordinate system used in various global maps.\nHowever, as discussed earlier in this chapter, it is not the best choice for visualizing the whole World -- WGS 84 is an unprojected coordinate system, and thus it has a lot of distortions, especially going further from the equator.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm = tm_shape(worldvector_wgs84) +\n  tm_polygons() +\n  tm_shape(worldcities) +\n  tm_dots() +\n  tm_text(\"name\")\ntm\n```\n:::\n\n\nWe can improve this map by changing the projection to a more suitable one, such as Equal Earth, directly in the map creation code (@fig-mproj12-2).\nWe just need to add the `tm_crs()` function with the desired projection, e.g., `tm_crs(\"+proj=eqearth\")`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_crs(\"+proj=eqearth\") # or \"EPSG:8857\"\n```\n:::\n\n\n\n::: {#fig-mproj12 .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![WGS 84 (EPSG:4326)](figures/fig-mproj12-1.png){#fig-mproj12-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![Equal Earth projection (EPSG:8857)](figures/fig-mproj12-2.png){#fig-mproj12-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nMap projections examples.\n:::\n\n\nThe `tm_crs()` function is actually a small toolbox for managing map projections.\nAs you have seen above, if we know the projection's name (`\"+proj=eqearth\"`) or code (`\"EPSG:8857\"`) we can specify it directly.\nYou can also use the `tm_crs()` function if you do not know the projection's name or code -- it accepts the `\"auto\"` argument.\nIt  automatically select a suitable projection based on the data's extent and the map's properties.\nFor example, if the map is global, it selects the pseudocylindrical projection Equal Earth (@fig-mproj-auto).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm + \n  tm_crs(\"auto\")\n```\n\n::: {.cell-output-display}\n![Map with data projected into the automatically selected projection.](figures/fig-mproj-auto-1.png){#fig-mproj-auto fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nWith the `tm_crs()` function set to `\"auto\"`, we may also specify the map projection property, such as `\"area\"`, `\"distance\"`, or `\"shape\"`.\nThe `\"area\"` property (*equal area*) uses the Lambert Azimuthal Equal Area projection, `\"distance\"` (*equidistant*) uses the Azimuthal Equidistant projection, and `\"shape\"` (*conformal*) uses the Stereographic projection.\n@fig-mproj-auto2 displays the map with the `\"distance\"` property -- this means that our data is projected into the Azimuthal Equidistant projection, in this case, with the center on the coordinates of zero latitude and zero longitude.\nThen, every point on the map is equidistant from that center.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldvector_wgs84) +\n  tm_polygons() +\n  tm_shape(worldcities) +\n  tm_dots() +\n  tm_text(\"name\") +\n  tm_crs(\"auto\", property = \"distance\")\n```\n\n::: {.cell-output-display}\n![Map with data projected into the automatically selected projection with distance property.](figures/fig-mproj-auto2-1.png){#fig-mproj-auto2 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n### Raster data\n\nThe above features of the `tm_crs()` function also apply to raster data.\nHowever, at the same time, reprojecting raster data is more complex than reprojecting vector data.\nReprojections of vector data are usually straightforward because each spatial coordinate is reprojected individually.\n<!-- mention invalid geometries? -->\nReprojecting of raster data, on the other hand, is more complex and requires using one of two approaches.\nThe first approach applies raster warping, which is a name for two separate spatial operations: the creation of a new regular raster object and the computation of new pixel values through resampling (for more details, read Chapter 7 of @lovelace_geocomputation_2025).\nThis is the default option in **tmap**; however, it has some limitations, and it is not always possible to use it.\nThe second approach involves transforming the coordinates of the raster cells, resulting in a curvilinear grid.\nLet's see how to use these two approaches in **tmap** based on the `worldelevation.tif` raster data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(terra)\nworldelevation = rast(\"data/worldelevation.tif\")\n```\n:::\n\n\n@fig-tm-map-proj-1 shows the World elevation raster reprojected to Equal Earth.\nSome of you can quickly notice that certain areas, such as parts of Antarctica, New Zealand, Alaska, and the Kamchatka Peninsula, are presented twice, with one version being largely distorted.\nAnother limitation of `raster.warp = TRUE` is the use of the nearest neighbor resampling only -- while it can be a proper method to use for categorical rasters, it can have some unintended consequences for continuous rasters (such as the `\"worldelevation.tif\"` data).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation) +\n  tm_raster(col.scale = tm_scale(values = terrain.colors(8))) +\n  tm_crs(\"+proj=eqearth\") # or \"EPSG:8857\"\n```\n:::\n\n\nThe second approach (`tm_options(raster.warp = FALSE)`) computes new coordinates for each raster cell, keeping all of the original values, and results in a curvilinear grid.\nThis calculation could deform the shapes of original grid cells, and usually curvilinear grids take a longer time to plot^[For more details of the first approach, see `?stars::st_warp()` and of the second approach, see `?stars::st_transform()`.].\n\n@fig-tm-map-proj-2 illustrates an example of the second approach, which yielded a better result in this case without any spurious land.\nHowever, the creation of the (b) map takes about ten times longer than the (a) map.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation) +\n  tm_raster(col.scale = tm_scale(values = terrain.colors(8))) +\n  tm_crs(\"+proj=eqearth\") +\n  tm_options(raster.warp = FALSE)\n```\n:::\n\n\n\n::: {#fig-tm-map-proj .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![created using raster.warp = TRUE](figures/fig-tm-map-proj-1.png){#fig-tm-map-proj-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![created using raster.warp = FALSE](figures/fig-tm-map-proj-2.png){#fig-tm-map-proj-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nTwo elevation maps in the Equal Earth projection.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n<!-- add our recommendations -->\n<!-- about reprojecting first vs later - why and how -->\n\n## Customizing maps for global projections\n\nThe **tmap** package also offers several additional features that can be used to customize maps with global projections.\nFor instance, the `tm_layout()` function has an argument `earth_boundary` that can be set to `TRUE` to add a boundary around the Earth.\nThen, we can also set the `bg.color` argument to specify the background color of the map, which only applies to the area inside the Earth's boundary for a given projection (@ @ @fig-mproj3).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_crs(\"+proj=eqearth\") +\n  tm_layout(earth_boundary = TRUE,\n            bg.color = \"lightblue\")\n```\n\n::: {.cell-output-display}\n![Map with data projected into Equal Earth and with a customized style.](figures/fig-mproj3-1.png){#fig-mproj3 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nThese features can be used to create more visually appealing maps.\nThey are available to a large set of projections^[Find more projections in the PROJ documentation at  <https://proj.org/en/stable/operations/projections>], some of which are shown in @fig-exprojs.\nYou may notice that these projections have not only different visual styles but also different shapes of the Earth's boundary and focus on preserving different map projection properties.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Examples of map projections for the whole world.](figures/fig-exprojs-1.png){#fig-exprojs fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n<!-- Martijn, is there any way to add proper grid lines/graticules for the maps above? -->\n\nOne particular projection that is worth mentioning is the *orthographic projection*.\nIt is a planar projection that represents the Earth as if it were viewed from space, with the center of the projection at a specific latitude and longitude.\nWe can use the `tm_crs()` function to apply the orthographic projection with the `+proj=ortho` argument, and then set the `lat_0` and `lon_0` parameters to specify the center of the projection.\n@fig-mproj-ortho shows two examples of the orthographic projection centered on different coordinates: the first one is centered on 30$^\\circ$N, 0$^\\circ$E, and the second one is centered on 0$^\\circ$N/S, 100$^\\circ$E.\n\n\n::: {#fig-mproj-ortho .cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_graticules(labels.show = FALSE) +\n  tm_crs(\"+proj=ortho +lat_0=30 +lon_0=0\", bbox = \"FULL\")+\n  tm_layout(bg.color = \"lightblue\",\n            earth_boundary = TRUE,\n            frame = FALSE)\ntm +\n  tm_graticules(labels.show = FALSE) +\n  tm_crs(\"+proj=ortho +lat_0=0 +lon_0=100\", bbox = \"FULL\")+\n  tm_layout(bg.color = \"lightblue\",\n            earth_boundary = TRUE,\n            frame = FALSE)\n```\n\n::: {.cell-output-display}\n![centered on 30°N, 0°E](figures/fig-mproj-ortho-1.png){#fig-mproj-ortho-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![centered on 0°N/S, 100°E](figures/fig-mproj-ortho-2.png){#fig-mproj-ortho-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nOrthographic projection examples.\n:::\n\n\n::: {.callout-note}\nNote that in these examples, the `bbox` argument is set to `\"FULL\"`, which means that the whole Earth is displayed -- it is useful when the extent of the data is smaller than the whole Earth.\n:::\n\n<!-- ## Local map projections in **tmap** -->\n\n<!-- local? -->\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n<!-- properies -->\n<!-- specific: south pole? -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}