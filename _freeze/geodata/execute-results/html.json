{
  "hash": "bc7a2f12575a43ec1cf602911e1b8315",
  "result": {
    "engine": "knitr",
    "markdown": "# Spatial data in R {#sec-geodata}\n<!-- # Geographic data in R {#geodata} -->\n<!-- to discuss -->\n\n\\index{spatial data}\n\n## Introduction {#sec-intro-geodata}\n\nVector and raster data models are two basic models used to represent spatial data.\nThese spatial data models are closely related to map making, with each model having its own pros and cons. \n<!-- - few introduction sections -->\n<!-- - mention GDAL, PROJ, and GEOS -->\n<!-- - maybe also mention some data sources -->\nThis chapter starts by describing these two popular spatial data models, and their extensions, spatial vector and raster data cubes (@sec-data-models).\nEach data model is introduced, explained how it is built, and how it is stored using different file formats.\nNext, this chapter presents how these different data models are implemented in R (@sec-spatial-data-representations-in-r).\nIt includes showing how to read different spatial data formats, how to understand spatial R objects, and where to find more information about preprocessing spatial data.\n<!-- - maybe also references to some books (either here or in the next section or both) -->\n<!-- geocompr, spatial data science, some crs book? -->\n<!-- explain that often there is a need to prepare spatial data before mapping -->\n\n## Data models {#sec-data-models}\n\nTraditionally, spatial data is described by two basic data models: \nvector data model aimed at (@sec-vector-data-model) representing the world using points, lines, and polygons, and raster data model focused on representing surfaces (@sec-raster-data-model).\nAdditionally, now we have an abundance of available spatial data and a variety of ways to obtain it.\nIt includes having many district variables and repeated measurements for the same area.\nTherefore, we also present the concept of spatial data cubes (@sec-spatial-data-cubes).\n\n### Vector data model {#sec-vector-data-model}\n\n\\index{vector data model}\n\\index{spatial geometries}\n\\index{spatial attributes}\nThe vector data model represent the world as a set of spatial geometries with non-spatial attributes (@fig-vector-data-model). \nThe role of geometry is to describe the location and shape of spatial objects.\nAttributes, on the other hand, are used to store the properties of the data.\n\n\\index{spatial geometries}\nThere are three basic types of geometries: points, lines, and polygons, all of them are made up of coordinates (left part of @fig-vector-data-model).\nA point is represented by a pair of coordinates, usually described as X and Y, allowing for locating this point in some space.\nX and Y could be unitless, in degrees, or in some measure units, such as meters  (extended discussion on coordinates and related topics is in @sec-map-projections).\nPoints can represent features on different spatial scales, from a GPS position, location of a bench in a park, to a city on a small scale map.\nThey are also used to express abstract features, such as locations of map labels.\nProperties of points<!--,such as ...--> can be expressed on maps by different point sizes, colors, or shapes<!--(markers/images) -->.\nA line extends the idea of a point.\nIt consists of several points with coordinates (called vertices) that are arranged in some order.\nConsecutive points are connected by straight lines.\nTherefore, a straight spatial line consists of two points (two pairs of coordinates), while complex spatial lines could be created based on a large number of points.<!--to rewrite-->\nIt gives the illusion that the line is curved. \nLines are used to representing linear features, such as roads, rivers, boundaries, footpaths, etc. \nIn this case, we can express line features' attributes using either lines' color or their widths.\n<!-- ways to adjust lines aesthetics: colors, lwd (line width) -->\n<!-- in theory lty could be also used - but it is not implemented in tmap -->\nA polygon is again a set of ordered points (vertices) connected by straight lines. \nIts only difference from the line is that the first and the last point in a polygon has the same coordinates, and thus close the object.\n<!-- examples of polygons -->\nThe polygon representation is used to represent shapes and locations of different objects, from a lake or a patch of vegetation, through a building or a city block, to some administrative units. \nPolygons also have one unique feature - they could have holes. \nA polygon hole represents an area inside of the polygon but does not belong to it.\nFor example, a lake with an island can be depicted as a polygon with a hole.\nThe values of polygons' attributes can be represented by the areas (fill) colors.\n\n\\index{spatial attributes}\nThe second part of the vector data model relates to non-spatial attributes (right part of @fig-vector-data-model). \nAttributes are usually stored as a table, in which each column depicts some property, such as an identification number, a name of a feature, or a value of some characteristic.\nEach row, on the other hand, relates to a single spatial geometry. \n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Instances of spatial vector data model: POINTS, LINES, and POLYGONS.](geodata_files/figure-html/fig-vector-data-model-1.png){#fig-vector-data-model width=480}\n:::\n:::\n\n\n\n\n\\index{simple feature}\nThe above ideas could be implemented in many ways. <!--...-->\nCurrently, [the Simple Feature Access](http://portal.opengeospatial.org/files/?artifact_id=25355) seems to be the most widely used standard.\nIn it, a feature is every object or concept that have spatial location or extent. \n\nSimple feature standard makes a clear distinction between single- and multi-element features.\nWe can have a POINT feature and a MULTIPOINT feature, and similarly LINESTRING and MULTILINESTRING, and POLYGON and MULTIPOLYGON.\nThe main difference between single element features (such as POINT or POLYGON) and multi-element features (such as MULTIPOINT or MULTIPOLYGON) can be clearly seen by looking at attribute tables. \nFor example, six points stored as POINT features fill six separate rows, while six points stored as just one MULTIPOINT feature occupy just one row.\n<!-- redundancy -->\nExamples of single- and multi-element features can be seen in @fig-vector-data-model. \nThe top example shows point data represented as MULTIPOINT feature: although we have seven points (seven distinct pairs of coordinates), they are gathered into two groups, green and orange, which can be seen in the associated attribute table.\nThe central example, on the other hand, uses single-element features, where each line geometry relates to one row in the attribute table.\nFinally, the bottom example again uses multi-element features, where the second feature (`Country B`) consist of two separate geometries.\nThe simple feature standard also describes a number of additional geometry types, including Curve, Surface, or Triangle.\nFinally, GeometryCollection exists that contains all of the possible geometry types.\n\n<!-- JN: maybe too much information-->\n<!-- simple features standard also defines possible topological rules -->\n\n\\index{spatial file formats}\nA couple hundreds of file formats exist to store spatial vector data.\nOne of the simplest ways to store spatial data is in the form of a text file (`.csv`) or as a spreadsheet (`.xls` or `.xlsx`). \nWhile it makes storing point data simple, with two columns representing coordinates, it is not easy to store more complex objects in this way.\nText files are also not suitable for storing information about the coordinate reference system used (@sec-map-projections).\nHistorically, the shapefile format (`.shp`) developed by the ESRI company gained a lot of interest and become the most widely supported spatial vector file format. \nDespite its popularity, this format has a number of shortcomings, including the need to store several files, attribute names limited to ten characters, the ability to store up to 255 attributes and files up to 2GB, and many more.\nA fairly recent file format, OGC GeoPackage (`.gpkg`), was developed as an alternative. \nIt is a single file database free from the limitation of the shapefile format.\nOther popular spatial vector file formats include GeoJSON (`.geojson`), GPX (`.gpx`), and KML (`.kml`). \n<!-- FlatGeobuf?? -->\n<!-- - advantages/disadvantages -->\n\n### Raster data model {#sec-raster-data-model}\n\n\\index{raster data model}\nThe raster data model represents the world using a continuous grid of cells<!--pixels-->, where each cell has a single associated value (@fig-raster-intro).\nDepending on the type of values, we can distinguish continuous and categorical rasters.\nIn continuous rasters, such as elevation or precipitation, values vary progressively.\nCategorical rasters, on the other hand, uses integer values to represent classes.\nTheir examples include land cover or soil types maps.\nRaster data can also contain cells for which we do not know the value (@fig-raster-intro).\nFor example, data for this part of the area was not collected, or these locations are outside of our area of interest.\n\n\n\n\n::: {#fig-raster-intro .cell layout-ncol=\"3\"}\n::: {.cell-output-display}\n![Cell IDs](geodata_files/figure-html/fig-raster-intro-1.png){#fig-raster-intro-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Cell values](geodata_files/figure-html/fig-raster-intro-2.png){#fig-raster-intro-2 width=672}\n:::\n\n::: {.cell-output-display}\n![A raster map](geodata_files/figure-html/fig-raster-intro-3.png){#fig-raster-intro-3 width=672}\n:::\n\nBasic representations of the raster data model\n:::\n\n\n\n\n\\index{raster data grid types}\nWhen we think about raster data, most of the time we are referring to regular grids (@fig-grid-types).\nIn regular grids, each cell has the same, constant size, and coordinates change from top to bottom and from left to right^[Regular grids can also have coordinated changing in different directions, e.g., from bottom to top.].\n<!-- I know it is a simplification-->\nRegular rasters can be transformed into rotated and sheared rasters (@fig-grid-types).\nRotated grids are the result of transforming both coordinated, $x$ and $y$ using the same rotation coefficients.\nSheared grids are created when the rotation coefficients are not equal.\nRectilinear grids, on the other hand, have orthogonal axes, but consist of rectangular cells with different sizes and shapes (@fig-grid-types).\nIn the last type of raster data grids, curvilinear grids, cells are cuboids of different sizes and shapes (@fig-grid-types).\n\n<!-- Q:should the counting in the below figure start from bottom left? -->\n\n\n\n::: {#fig-grid-types .cell layout-ncol=\"5\"}\n::: {.cell-output-display}\n![Regular](geodata_files/figure-html/fig-grid-types-1.png){#fig-grid-types-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Rotated](geodata_files/figure-html/fig-grid-types-2.png){#fig-grid-types-2 width=672}\n:::\n\n::: {.cell-output-display}\n![Sheared](geodata_files/figure-html/fig-grid-types-3.png){#fig-grid-types-3 width=672}\n:::\n\n::: {.cell-output-display}\n![Rectilinear](geodata_files/figure-html/fig-grid-types-4.png){#fig-grid-types-4 width=672}\n:::\n\n::: {.cell-output-display}\n![Curvilinear](geodata_files/figure-html/fig-grid-types-5.png){#fig-grid-types-5 width=672}\n:::\n\nMain types of raster data grids\n:::\n\n\n\n\nContrary to spatial vector data, a basic raster data stores just one attribute.\nIt is, however, possible to stack together many single rasters (also known as raster layers).\nThis allows us to store and operate on many rasters having the same dimensions at the same time.\nExamples of multi-layer rasters include satellite imageries or temporal rasters.\nSatellite imageries usually consist of many bands (layers) for different wavelengths.\nThe most basic bands, representing the colors red, green, and blue, can be connected together to create one composite image with true colors (@fig-rgb-raster).\nTemporal rasters store one attribute, but for many moments in time.\n<!-- + comparing different attributes for the same area -->\nAdditional information about multi-layer rasters can be also found in @sec-spatial-data-cubes.\n\n\n\n\n::: {#fig-rgb-raster .cell layout-ncol=\"4\"}\n::: {.cell-output-display}\n![Red](geodata_files/figure-html/fig-rgb-raster-1.png){#fig-rgb-raster-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Green](geodata_files/figure-html/fig-rgb-raster-2.png){#fig-rgb-raster-2 width=672}\n:::\n\n::: {.cell-output-display}\n![Blue](geodata_files/figure-html/fig-rgb-raster-3.png){#fig-rgb-raster-3 width=672}\n:::\n\n::: {.cell-output-display}\n![Composite](geodata_files/figure-html/fig-rgb-raster-4.png){#fig-rgb-raster-4 width=672}\n:::\n\nExample of three satellite imagery bands: red, green, blue, and the composite image with true colors created using these three bands.\n:::\n\n\n\n\n\\index{spatial file formats}\nSimilarly to vector data, a large number of raster file formats exists.\n<!-- text files ?-->\nCurrently, the GeoTIFF format (`.tif` or `.tiff`) is one of the most popular spatial raster formats.\nIt is an extended image TIF format that stores spatial metadata (e.g., map projection) along the values.\nAnother popular spatial raster formats include Arc ASCII (`.asc`) and ERDAS Imagine (`.img`).\n<!-- ncdf??? -->\n\n### Spatial data cubes {#sec-spatial-data-cubes}\n\n\\index{spatial data cubes}\nTraditionally, spatial vector and raster data models refer to a unique set of locations.\nFor example, each feature in a polygon dataset and each cell in a raster dataset refer to one specific area.\nHowever, to solve real-life problems, we need to store and operate on more complex data structures.\nIt includes situations when we have many attributes, often for several moments in time.\n\n\\index{spatial vector data cubes}\nStoring multiple attributes is not a problem for the vector data model, when an attribute table can have many columns.\nThe question is how to extend the spatial vector data model to include measurements for many times.\nFor example, let's consider a polygon data with many attributes representing shares of land-use types for several years (@fig-vector-data-cubes).\nOne approach would be to create a separate column for each variable in each year.<!--wide--><!--pros and cons-->\nAlternatively, we can have one column representing the year and one column for each attribute, however, this approach would require multiplying each geometry as many times as we have time stamps.\n<!--long--><!--pros and cons-->\nThe third approach involves separating geometries from attributes, and where attributes for each moment are stored independently.\nThe last idea is used in spatial vector data cubes (@sec-the-stars-package).\nAn example of the spatial vector data cubes idea can be seen in @fig-vector-data-cubes.\nIt consists of two elements: a geometry (MULTIPOLYGON) of provinces of the Netherlands and an array connected to it that stores shares of land-use types for several years. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Vector data cube.](geodata_files/figure-html/fig-vector-data-cubes-1.png){#fig-vector-data-cubes width=576}\n:::\n:::\n\n\n\n\n\\index{spatial raster data cubes}\nA single raster dataset can store just one variable for a given area.\nTo store several attributes, we can connect rasters representing different attributes for the same extent, creating multi-layer rasters (@sec-raster-data-model).\nAdditionally, each of the aforementioned rasters can be collected for many moments in time, adding other layers to the data.\n<!--pros and cons-->\nThe question here is how to efficiently store multi-layer raster data to understand what layers relate to which attribute and time.\nSimilarly to spatial vector data cubes, we can think of separating spatial dimensions from non-spatial attributes and create spatial raster data cubes (@sec-the-stars-package).\n@fig-raster-data-cubes gives an example of a raster data cube.\nIt consists of several single-layer rasters with the same spatial properties, such as resolution, extent, and CRS.\nThese rasters are organized to store four-dimensions of the data: latitude, longitude, time, and attributes.\nIt has values of three attributes for five moments in time in total.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Raster data cube.](geodata_files/figure-html/fig-raster-data-cubes-1.png){#fig-raster-data-cubes width=672}\n:::\n:::\n\n\n\n\nSpatial data cubes are suitable for many real-life applications.\nFor example, time-series of climate measurements for several stations, demographic data on a country level gathered for many years, or satellite imageries over some period of time.\n\n\\index{spatial file formats}\nOne way to create spatial data cubes is by connecting many independent vector or raster objects.\n<!-- mention it in the stars section? -->\nSecond way is to read a spatial data cube from one of the file formats allowing for storing complex data.\nIt includes formats such as NetCDF (`.nc`) and HDF (`.hdf`).\n<!-- spatial vector data cubes file formats? -->\n\n<!-- converting between spatial vector data cube and spatial raster data cube -->\n\n## Spatial data representations in R {#sec-spatial-data-representations-in-r}\n\n\\index{vector data model}\nR has several packages aimed to represent spatial vector data.\n<!-- Recently, the **terra** package has been released containing a new vector data representation. -->\nFor more than a decade, the **sp** package <!--REF--> was a standard of vector data representation in R.\nHowever, now this package is in the maintenance mode only, and its successor, **sf** is recommended.\nThe **tmap** package has been using **sf** since version 2.0.\n\n\\index{raster data model}\n\\index{spatial data cubes}\nSeveral R packages can be used to represent spatial raster data, including **raster** and its successor **terra**. \nThe **raster** package was used as a backbone of raster data visualization until **tmap** version 3.0.\nCurrently, the **terra** package's raster objects can be used in **tmap**.\nAdditionally, the **stars** package is used by **tmap** to operate on raster data and spatial data cubes.\n\nIn the three next sections, we introduce the **sf** package (@sec-the-sf-package), the **terra** (@sec-the-terra-package), the **stars** package (@sec-the-stars-package).\n\n<!-- spatial data cubes -->\n<!-- https://github.com/appelmar/gdalcubes_R -->\n<!-- https://ropensci.org/blog/2019/11/05/tidync/ -->\n\n### The sf package {#sec-the-sf-package}\n\n\\index{sf}\n\\index{sf (package)|see {sf}}\n\nThe **sf** package implements ideas behind the Simple Feature standard, which describe how to represent spatial vector data.\nIts main class, `sf`, has the form of an extended data frame, where each row is a spatial feature.\nIn it, attributes of the vector data are stored as columns. \nIt also has one additional column, most often named `geom` or `geometry`^[However, any other names are also possible.].\nThis column contains geometries in a form of well-known text (WKT), storing all of the coordinates.\n\n<!-- - how to read sf objects from files -->\nThe **sf** package can read all of the spatial data formats mentioned in @sec-vector-data-model using the `read_sf()` function^[It is also possible to read spatial vector data using the `st_read()` function, which differs from `read_sf()` by having different default arguments.].\n<!--improve example-->\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nworldvector = read_sf(\"data/worldvector.gpkg\")\n```\n:::\n\n\n\n\nThe new object, `worldvector`, has a `sf` class. \nIt has 185 features (rows or geometries) and 15 fields (columns with attributes). \nThere is also an 16th column, `geom`, that stores geometries of each feature.\nObjects of class `sf` also display a header containing spatial metadata.\nIt includes geometry type, dimension (`XY`, `XYZ`, `XYM`, `XYZM`), bounding box (`bbox`), and information about the used Coordinate Reference System (`CRS`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworldvector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 185 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -16331900 ymin: -8392908 xmax: 16886150 ymax: 8315884\nProjected CRS: WGS 84 / Equal Earth Greenwich\n# A tibble: 185 × 16\n   GEO   name    wb_region wb_income_region population CO2_emissions gdp_per_cap\n   <chr> <chr>   <chr>     <chr>                 <dbl>         <dbl>       <dbl>\n 1 AUS   Austra… East Asi… High income        42900000       15.3          56800\n 2 AZE   Azerba… Europe &… Upper middle in…    9190000        3.94          5770\n 3 BIH   Bosnia… Europe &… Upper middle in…    1640000        6.38          6030\n 4 BGD   Bangla… South As… Lower middle in…  151000000        0.474         1200\n 5 BEL   Belgium Europe &… High income        12500000        8.32         47200\n 6 BFA   Burkin… Sub-Saha… Low income         83200000        0.162          712\n 7 BGR   Bulgar… Europe &… Upper middle in…    3590000        5.85          8650\n 8 BDI   Burundi Sub-Saha… Low income         50900000        0.0447         211\n 9 BEN   Benin   Sub-Saha… Low income         47200000        0.614          897\n10 BRN   Brunei  East Asi… High income          390000       22.2          31400\n# ℹ 175 more rows\n# ℹ 9 more variables: life_expectancy <dbl>, corruption_perception_index <dbl>,\n#   democracy_score <dbl>, hdi <dbl>, energy_use_per_cap <dbl>,\n#   literacy_rate <dbl>, demo_corr <dbl>, demo_corr_rank <int>,\n#   geom <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n\n\n\nThe `worldvector` object has MULTIPOLYGON geometry type, where each feature (row) can consist of one or more polygons.\nEach polygon's vertices are represented by a pair of values (`dimension: XY`).\nBounding box allows to quickly understand the spatial extension of the input data. \n<!--...--> \nFinally, it has projected CRS named WGS 84 / Equal Earth Greenwich.\nYou can learn more about Coordinate Reference Systems in @sec-map-projections.\n<!-- ref to CRS section -->\n\nSpatial vector data of class `sf` can be also obtained using some of other R data packages.\n<!-- add REFs--> \nFor example, **rnaturalearth** allows to download world map data, **osmdata** imports OpenStreetMap data as `sf` objects, and **tigris** loads TIGER/Line data.\n<!-- add reference to geocompr -->\n<!-- add reference to https://cran.r-project.org/web/views/Spatial.html (after my updates) -->\n\nThe **tmap** package accepts spatial vector data objects from both **sf** and **sp** packages.\nIn case of having vector objects in a different representation, they should be converted into `sf` objects first, before making maps.\nThe **sf** package has the `st_as_sf()` function that translates objects of many classes, including `Spatial` (from the **sp** package), `ppp`, `psp`, and `lpp` (from the **spatstat** package), to the objects of class `sf`.\nThe `st_as_sf()` function also allows to turn data frames into `sf` objects - the user needs to provide the input data frame, names of columns with coordinates, and additionally definition of the CRS of the data.\nFor example `my_sf = st_as_sf(my_df, coords = c(\"Xcolumn\", \"Ycolumn\"), crs = \"EPSG:4326\")`.\n\nIf you want to learn more about operating on `sf` objects, we recommend visiting the package website and vignettes at <https://r-spatial.github.io/sf/> and reading [the Geocomputation with R book](https://geocompr.github.io/) [@lovelace_geocomputation_2025].\n<!-- - vector simplification? -->\n\n### The terra package {#sec-the-terra-package}\n\n\\index{terra}\n\\index{terra (package)|see {terra}}\n\nThe **terra** package represents and processes spatial raster data in R.\nIt has many high-performance functions, allowing for efficient transformation and analysis of raster data.\n\nTo read raster data, the **terra** package has the `rast()` function^[This function can also be used to create a new raster from scratch].\nThis way, we create a new object of the class `SpatRaster,` which is the main class for raster data in the **terra** package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nworldelevation1 = rast(\"data/worldelevation.tif\")\n```\n:::\n\n\n\n\nTo see the properties of the `worldelevation1` object, we just need to type its name.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworldelevation1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \nsize        : 540, 1080, 1  (nrow, ncol, nlyr)\nresolution  : 0.3333333, 0.3333333  (x, y)\nextent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : worldelevation.tif \nname        : worldelevation \n```\n\n\n:::\n:::\n\n\n\n\nNow, we can see the number of rows and columns, resolution, extent, coordinate reference system (CRS), and the source and name of the raster layer.\nIn the case of raster data from a file, the **terra** package uses a proxy approach, where only metadata is read into computer memory, and the actual values are read only when needed and processed in fitting-in-memory chunks.\n\nThe **terra** package has many functions for raster data processing, including `merge()`, `aggregate()`, `resample()`, and many more.\nIt also enables interactions between raster and vector data, including cropping rasters to vector geometries and masking rasters with vector geometries using the `crop()` and `mask()` functions, respectively.\n<!-- what else should we add here? -->\n\nPractical examples of using the **terra** package can be found on the [Spatial Data Science with R and “terra”](https://rspatial.org/) website and in the [Geocomputation with R book](https://geocompr.github.io/) [@lovelace_geocomputation_2025].\n\n### The stars package {#sec-the-stars-package}\n\n\\index{stars}\n\\index{stars (package)|see {stars}}\n\n<!-- intro stars -->\nThe **stars** package allows for reading and processing raster data in R. \nThis package also has support for both spatial vector and raster data cubes.\nIts main class, `stars`, is built as a list of matrices or arrays with metadata describing their dimensions.\nThe **stars** package is also well integrated with **sf**, with many `st_` functions (such as `st_crs()`) working also on `stars` objects.\n\n<!-- - how to read stars objects from files -->\nThe `read_stars()` function allow to read both simple and multidimensional spatial raster data from a file^[The **stars** package also has a function `read_ncdf()` aimed at improved reading of NetCDF files.].\nThis function requires at least one argument with a filename to be read. \n<!--improve example-->\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stars)\nworldelevation2 = read_stars(\"data/worldelevation.tif\")\n```\n:::\n\n\n\n\nThe new object, `worldelevation2`, is of a `stars` class. \nIt has two dimensions, `x` and `y`, and one attribute `worldelevation.tif`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworldelevation2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                    Min. 1st Qu. Median     Mean 3rd Qu. Max.   NA's\nworldelevation.tif  -412     218    608 1139.982    1941 6410 389580\ndimension(s):\n  from   to offset   delta refsys point x/y\nx    1 1080   -180  0.3333 WGS 84 FALSE [x]\ny    1  540     90 -0.3333 WGS 84 FALSE [y]\n```\n\n\n:::\n:::\n\n\n\n\nThe `worldelevation.tif` attribute is a matrix, where each cell represents an elevation value.\nThe `x` dimension has 1080 elements (columns), starting from a coordinate (`offset`) of a cell boundary of `-180`. \nNext, the coordinates of further cells increase by `0.333333` (`delta`) -- resolution in the `x` dimension.\nThe `y` dimension has 540 elements (rows), starting from a coordinate (`offset`) of a cell boundary of `90`. \nFor the `y` dimension, each further cell's coordinated decreases by `0.333333` (notice the negative value of `delta`) -- resolution in the `y` dimension.\nBoth dimensions also have the same CRS -- `WGS 84`.\n\n`read_stars()` also has several additional arguments including `RasterIO`, which gives control over the input data extent and resolution.\nFor example, the below code will read just the first and second bands -- in this case, the average montly temperatures for January and February in Slovenia (results not shown).\n<!-- - including reading chunks, changing resolution, and selecting bands -->\n<!--improve example-->\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslo_tavg_fp = \"data/slovenia/slo_tavg.tif\"\nslo_tavg12 = read_stars(slo_tavg_fp, RasterIO = list(bands = c(1, 2)))\n```\n:::\n\n\n\n\nInternally, a `stars` object is a list of `matrix` or `array` objects with additional attributes describing spatial metadata, such as a number of columns and rows, resolution, coordinate reference system, etc.\nAll of this information is read from the input file.\n\nStars objects are constructed by dimensions and attributes.\nDimensions relate to what kind of objects are stored as list elements. \nFor example, when it is a `matrix` then we just have two dimensions representing columns and rows.\nHowever, it is also possible to store multidimensional `array`s, which allow having many additional dimensions for bands, times, etc.\nAttributes, on the other hand, are stored as list elements.\nEach attribute can relate, for example to a different variable.\n\nReading a simple GeoTIFF file would result in having just two dimensions and one attribute (a `matrix`).\nOn the other hand, reading complex raster file formats, such as NetCDF could result in having more than two dimensions (e.g. time) and many attributes (e.g., an `array` with temperature, precipitation, humidity).\n<!-- how it relates to mapping? -->\n\n<!-- - stars proxy -->\n<!-- more than 1e8 cells to read -->\nBefore reading the file, the **stars** package checks if the input data is a curvilinear grid and what is the number of cells in the data.\nWhen the input data is small or curvilinear then the full data is read in computer memory.\nOtherwise, a `stars proxy` approach is used, where only metadata is read including pointers to where the complete data is.\nWhen we want to plot large raster data, then it is read at a lower resolution than the native one.\n<!-- ref to the section where we are explaining max.plot options -->\n\nThe **stars** package also has support for vector data cubes, where each geometry is just stored once (as a dimension), and each attribute is a `matrix` or an `array` with the number of rows equals to the number of geometries, the number of columns equals to another dimension (e.g., time), and possibly the number of `array` layers equals for additional dimensions.\n<!-- can we plot them in tmap? -->\n<!-- if so - there should be an example in the book + reference -->\n\n<!-- The **tmap** package accepts spatial raster data objects from both **stars** and **raster** packages. -->\n\nMore information on how the `stars` objects are organized and how to operate on them can be found in the **stars** package vignettes at <https://r-spatial.github.io/stars>. \n<!-- - advice: sometimes/often it is better to prepare spatial object before the mapping, than trying to over-customize the map -->\n",
    "supporting": [
      "geodata_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}