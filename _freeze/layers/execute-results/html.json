{
  "hash": "64cfecf9a7be1e19b050bd19f7fbea64",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n\n# Layers {#sec-layers}\n\n<!-- make sure that the order of the table is consistent with the rest of the chapter! -->\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\nMap layers are the main building blocks of a map.\nThey specify how the specific data should be visualized -- for example, as polygons, symbols, lines, text labels, or raster.\nThere is also an interplay between the data and the map layers: raster data can be plotted with the `tm_raster()` or `tm_rgb()` functions, while point data can be visualized with `tm_symbols()`, `tm_dots()`, `tm_bubbles()`, `tm_markers()`, or `tm_squares()`.\nMoreover, some data types can be simplified and shown with a different geometry, such as polygons that are usually visualized with `tm_polygons()` but can also converted into centroids and plotted with `tm_symbols()`.\n\nEach dataset may have one or more layers, and each layer can be visualized in different ways.\nFor example, a dataset with polygons can be visualized using `tm_polygons()` to display the polygon areas, and then the names of the polygons can be added with `tm_text()`.\n\n@tbl-layers-table shows the available map layers in **tmap**.\nThey are divided into two groups: basic functions and derived functions.\nThe basic functions are the main functions for visualizing data, are useful for most cases, and are highly customizable.\nThe derived functions are built on top of the basic functions but with different default values aimed at specific use cases.\n\n\n\n\n\n::: {#tbl-layers-table .cell layout-align=\"center\" tbl-cap='Available map layers.'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_obuep9lbzwpy41b8f1oc(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_obuep9lbzwpy41b8f1oc\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow_z3enr98upsikl2m15eul(i, colspan, content) {\n        var table = document.getElementById('tinytable_obuep9lbzwpy41b8f1oc');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_obuep9lbzwpy41b8f1oc(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_obuep9lbzwpy41b8f1oc\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\nwindow.addEventListener('load', function () { insertSpanRow_z3enr98upsikl2m15eul(8, 3, 'Derived functions') });\nwindow.addEventListener('load', function () { insertSpanRow_z3enr98upsikl2m15eul(1, 3, 'Basic functions') });\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 17, j: 1 }, { i: 17, j: 2 },  ], css_id: 'tinytable_css_jiuqqsi4jld5s6taplof',}, \n          { positions: [ { i: 1, j: 1 }, { i: 9, j: 1 }, { i: 1, j: 2 }, { i: 9, j: 2 },  ], css_id: 'tinytable_css_5w96d8nis96uawcxbzsk',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_o8i2z1bpbqytcuqt74lp',}, \n          { positions: [ { i: 17, j: 0 },  ], css_id: 'tinytable_css_9v1ub74io4fd32jm8lxp',}, \n          { positions: [ { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 6, j: 0 }, { i: 7, j: 0 }, { i: 8, j: 0 }, { i: 5, j: 0 }, { i: 10, j: 0 }, { i: 11, j: 0 }, { i: 12, j: 0 }, { i: 13, j: 0 }, { i: 14, j: 0 }, { i: 15, j: 0 }, { i: 16, j: 0 },  ], css_id: 'tinytable_css_0dghedlvaok9ny0cmnuu',}, \n          { positions: [ { i: 1, j: 0 }, { i: 9, j: 0 },  ], css_id: 'tinytable_css_lj4j71fj8i7a6pgov4iz',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_1rzwm6hriimk9js5kju5',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_obuep9lbzwpy41b8f1oc(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_jiuqqsi4jld5s6taplof, .table th.tinytable_css_jiuqqsi4jld5s6taplof { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_5w96d8nis96uawcxbzsk, .table th.tinytable_css_5w96d8nis96uawcxbzsk { font-weight: bold; color: white; background-color: gray; }\n      .table td.tinytable_css_o8i2z1bpbqytcuqt74lp, .table th.tinytable_css_o8i2z1bpbqytcuqt74lp { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_9v1ub74io4fd32jm8lxp, .table th.tinytable_css_9v1ub74io4fd32jm8lxp { padding-left: 1em; font-family: monospace; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_0dghedlvaok9ny0cmnuu, .table th.tinytable_css_0dghedlvaok9ny0cmnuu { padding-left: 1em; font-family: monospace; }\n      .table td.tinytable_css_lj4j71fj8i7a6pgov4iz, .table th.tinytable_css_lj4j71fj8i7a6pgov4iz { font-weight: bold; color: white; background-color: gray; font-family: monospace; }\n      .table td.tinytable_css_1rzwm6hriimk9js5kju5, .table th.tinytable_css_1rzwm6hriimk9js5kju5 { font-family: monospace; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_obuep9lbzwpy41b8f1oc\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\">Function</th>\n                <th scope=\"col\">Element</th>\n                <th scope=\"col\">Geometry</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>tm_polygons()</td>\n                  <td>polygons (borders and fill)</td>\n                  <td>polygons</td>\n                </tr>\n                <tr>\n                  <td>tm_symbols()</td>\n                  <td>symbols</td>\n                  <td>points, polygons, and lines</td>\n                </tr>\n                <tr>\n                  <td>tm_lines()</td>\n                  <td>lines</td>\n                  <td>lines</td>\n                </tr>\n                <tr>\n                  <td>tm_text()</td>\n                  <td>text</td>\n                  <td>points, polygons, and lines</td>\n                </tr>\n                <tr>\n                  <td>tm_raster()</td>\n                  <td>raster</td>\n                  <td>raster</td>\n                </tr>\n                <tr>\n                  <td>tm_basemap()</td>\n                  <td>tile</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>tm_tiles()</td>\n                  <td>tile</td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td>tm_borders()</td>\n                  <td>polygons (borders)</td>\n                  <td>polygons</td>\n                </tr>\n                <tr>\n                  <td>tm_fill()</td>\n                  <td>polygons (fill)</td>\n                  <td>polygons</td>\n                </tr>\n                <tr>\n                  <td>tm_bubbles()</td>\n                  <td>bubbles</td>\n                  <td>points, polygons, and lines</td>\n                </tr>\n                <tr>\n                  <td>tm_dots()</td>\n                  <td>dots</td>\n                  <td>points, polygons, and lines</td>\n                </tr>\n                <tr>\n                  <td>tm_markers()</td>\n                  <td>marker symbols</td>\n                  <td>points, polygons, and lines</td>\n                </tr>\n                <tr>\n                  <td>tm_square()</td>\n                  <td>squares</td>\n                  <td>points, polygons, and lines</td>\n                </tr>\n                <tr>\n                  <td>tm_iso()</td>\n                  <td>lines with text labels</td>\n                  <td>lines</td>\n                </tr>\n                <tr>\n                  <td>tm_rgb()/tm_rgba()</td>\n                  <td>raster (RGB image)</td>\n                  <td>raster</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n\n<!--JN: Idea - add available aesthetics to the above table-->\n\n<!--JN: Idea - also add a simple viz showing different kind of layers here (visual summary)-->\n\nIn this chapter, we focus on what map layers are available in **tmap** and how they differ.\n@sec-visual-variables, on the other hand, is all about how to present information given in variables using colors, sizes, and shapes.\n<!-- ... -->\n\n<!-- maybe also we should add info about packages that tmap accepts (e.g., sf, sp, raster, stars, terra?) -->\n\n## Polygons {#sec-polygons}\n\n<!-- intro -->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nslo_borders = read_sf(\"data/slovenia/slo_border.gpkg\")\n```\n:::\n\n\n\n\n\nThe main function of visualizing polygons is `tm_polygons()`.\nBy default, it plots areas of polygons in light gray (`gray85`) and polygons borders in slightly dark gray (`gray25`).\n<!-- https://github.com/r-tmap/tmap/blob/master/R/tmap_options.R -->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_polygons()\n```\n:::\n\n\n\n\n\nBoth, colors of areas (polygons' fillings) and colors of borders can be modified using the `fill` and `col` arguments (@fig-tmpolygonsder-1).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_polygons(fill = \"lightblue\", col = \"black\", lwd = 0.5, lty = \"dashed\")\n```\n:::\n\n\n\n\n\nIn fact, `tm_polygons()` is a combination of two separate functions: `tm_fill()` and `tm_borders()`.\nThe `tm_fill()` function fills polygons with a fixed color or a color palette representing a selected variable (@fig-tmpolygonsder-2).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_fill(fill = \"lightblue\")\n```\n:::\n\n\n\n\n\nThe `tm_borders()` function draws the borders of the polygons only (@fig-tmpolygonsder-3).\nIt allows you to change the colors of borders, their widths, or the lines type.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders(col = \"black\", lwd = 0.5, lty = \"dashed\")\n```\n:::\n\n::: {#fig-tmpolygonsder .cell layout-nrow=\"1\" layout-align=\"center\"}\n::: {.cell-output-display}\n![tm_polygons()](figures/fig-tmpolygonsder-1.png){#fig-tmpolygonsder-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![tm_fill()](figures/fig-tmpolygonsder-2.png){#fig-tmpolygonsder-2 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![tm_borders()](figures/fig-tmpolygonsder-3.png){#fig-tmpolygonsder-3 fig-align='center' width=100%}\n:::\n\nExample of a map created using:\n:::\n\n\n\n\n\nMore information on colors and how they can be applied and modified is explained in detail in @sec-colors.\n\n## Symbols {#sec-symbols}\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nslo_cities = read_sf(\"data/slovenia/slo_cities.gpkg\")\n```\n:::\n\n\n\n\n\nSymbols are a very flexible layer type. \nThey are usually used to represent point data but can also be used for lines and polygons.\nIn the latter cases, they are located in the centroid coordinates of each feature.\nTheir flexibility is also related to the ways symbols can be visualized -- it is possible to show values of a given variable by colors of symbols, their sizes, or shapes (more about that is explained in @sec-visual-variables).\n\nThe `tm_symbols()` is the main function in **tmap**, allowing to use and modify symbol elements (@fig-tmsymbols1).\nBy default, this function draws a gray circle symbol with a black border for each element of an input feature.\n\n\n\n\n\n::: {.cell layout-align=\"center\" asp='0.25'}\n::: {.cell-output-display}\n![A map showing the default tmap symbols.](figures/fig-tmsymbols1-1.png){#fig-tmsymbols1 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\nIn the above example, each symbol is related to one feature (row) in the `slo_cities` object.\nHowever, in a case when we provide multi-element features (such as MULTIPOINT; @sec-vector-data-model), each multi-element object is first split into a number of single-element features and then plotted.\n\nThe `tm_symbols()` is a very flexible function with a large number of arguments.\nWhile this allows adjusting its results to almost any need, it also makes this function complicated.\nTherefore, four additional layers are implemented in **tmap**: `tm_squares()`, `tm_bubbles()`, `tm_dots()`, `tm_markers()`.\nAll of them use `tm_symbols()`, but with different default values.\n\n`tm_squares()` uses square symbols (`shape = 22`) instead of circles (`shapes = 21`) (@fig-tmsymbols2-1).\n<!--scale is 4/3 instead of 1-->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_squares()\n```\n:::\n\n\n\n\n\n<!-- JN: what is the main difference between symbols and bubbles?? -->\n(@fig-tmsymbols2-2)\n<!--scale is 4/3 instead of 1-->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_bubbles()\n```\n:::\n\n\n\n\n\nThe main role of `tm_dots()` is to present many locations at the same time.\nTo do this, this layer has a small size value (`0.02`) at the default (@fig-tmsymbols2-3).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_dots()\n```\n:::\n\n\n\n\n\nThe last additional layer is `tm_markers()`, which uses a marker icon by default (@fig-tmsymbols2-4).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_markers()\n```\n:::\n\n::: {#fig-tmsymbols2 .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![tm_squares()](figures/fig-tmsymbols2-1.png){#fig-tmsymbols2-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![tm_bubbles()](figures/fig-tmsymbols2-2.png){#fig-tmsymbols2-2 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![tm_dots()](figures/fig-tmsymbols2-3.png){#fig-tmsymbols2-3 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![tm_markers()](figures/fig-tmsymbols2-4.png){#fig-tmsymbols2-4 fig-align='center' width=100%}\n:::\n\nMaps showing default visualizations using various types of symbols.\n:::\n\n\n\n\n\n## Lines {#sec-lines}\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nslo_railroads = read_sf(\"data/slovenia/slo_railroads.gpkg\")\n```\n:::\n\n\n\n\n\nThe `tm_lines()` function allows the visualization of different types of line data (@fig-tmlines).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_railroads) + \n  tm_lines()\n```\n\n::: {.cell-output-display}\n![Example of a map created with tm_lines().](figures/fig-tmlines-1.png){#fig-tmlines fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\nLines can be presented using different colors, widths, or types (@sec-visual-variables).\nThis allows to show a hierarchy (for example, increased line widths for higher capacity roads) or distinguish between types of objects (for example, blue rivers comparing to gray roads).\n\n## Text {#sec-text}\n\n<!-- tm_labels? -->\n\nText labels are often an integral part of many maps.\nThey can serve several functions, from naming features, indicating relations between them, or representing a given variable's values.\nThe main function for creating text labels is `tm_text()`, which adds a label to each spatial feature (@fig-tmtext).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_text(text = \"name\", size = \"population\")\n```\n\n::: {.cell-output-display}\n![Example of a map created with tm_text().](figures/fig-tmtext-1.png){#fig-tmtext fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\nWe can adjust sizes (`size`; @sec-sizes), colors (`col`), font faces (`fontface`), and background colors (`bgcol`)  of labels either by providing a single value or a name of a data variable.\nText labels can be further modified with the `opt_tm_text()` function provided to the `options` argument.\nIt includes a set of arguments that allow to adjustment of the text labels' appearance, such as `remove_overlap,` `along_lines,` and `shadow.`\n<!-- ref to the text section?? -->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```\n#> [plot mode] legend/component: Some components or legends are too \"high\" and are\n#> therefore rescaled.\n#> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n```\n\n::: {.cell-output-display}\n![](figures/unnamed-chunk-7-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n<!-- to update -->\nText labels can be added to spatial (multi-)points, (multi-)lines, and (multi-)polygons, and each of the cases is quite different. \nThe simplest case is for POINT data, for which each text label will be located precisely in the coordinates of the given points (@fig-tmtext).\nHowever, how to add text labels to multipoints, lines, multilines, polygons, or multipolygons?\nShould each label correspond to one spatial feature, or should every sub-feature have its own label? \nWhere should the labels be placed for lines or polygons - in the center of a line and centroid of a polygon or somewhat different?\n<!-- https://github.com/r-tmap/tmap-book/issues/16 -->\n<!-- wait for v4 -->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# x2 = x |> \n#   dplyr::group_by(region_un) |> \n#   dplyr::summarise()\n# tm_shape(x2) +\n#   tm_polygons() +\n#   tm_text(\"region_un\")\n```\n:::\n\n\n\n\n\n<!-- add info about text location, e.g. -->\n<!-- add relation between text and other layers -->\n<!-- point + text -->\n<!-- lines + text -->\n<!-- polys + text -->\n<!-- ask MT -->\n\nText labels are also often presented together with lines (@sec-lines).\nOne example is an isopleth -- a line drawn on a map through all points having the same value of a given variable, such as atmospheric pressure or elevation.\nIsopleths can be created with the `tm_iso()` function.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# to improve\nlibrary(stars)\n#> Loading required package: abind\nlibrary(terra)\n#> terra 1.8.42\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\nslo_elev_raster = rast(slo_elev)\nelev_isopleths = as.contour(slo_elev_raster, nlevels = 4)\ntm_shape(elev_isopleths) +\n  tm_iso()\n```\n\n::: {.cell-output-display}\n![](figures/unnamed-chunk-10-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nei_terrain = terra::terrain(slo_elev_raster, c(\"slope\", \"aspect\"), unit = \"radians\")\nhs = terra::shade(ei_terrain[[1]]*3, ei_terrain[[2]])\n\ntm_shape(hs) +\n\ttm_grid() +\n\ttm_raster(col.scale = tm_scale(values = gray(0:100 / 100), n = 100),\n            col.legend = tm_legend_hide()) +\n\ttm_shape(slo_elev) +\n\ttm_raster(col_alpha = 0.25,\n            col.scale = tm_scale(values = terrain.colors(25)),\n            col.legend = tm_legend_hide()) +\n\ttm_shape(elev_isopleths) +\n\ttm_lines(col = \"white\") +\n\ttm_text(\"level\", col = \"white\")\n```\n\n::: {.cell-output-display}\n![](figures/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n<!-- auto.placement  -->\n<!-- remove.overlap -->\n<!-- xmod -->\n<!-- ymod -->\n<!-- just -->\n\n<!-- clustering -->\n\n## Raster {#sec-raster-layer}\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(stars)\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\nslo_gm = read_stars(\"data/slovenia/slo_gm.tif\")\n```\n:::\n\n\n\n\n\n<!-- Raster data intro -->\nVisualization of raster data depends on the raster type (continuous or categorical), its resolution, and the number of layers.\n@fig-rasterdown shows two simple examples of continuous and categorical raster visualizations created with `tm_raster().`\nThis function attempts to recognize the type of a given raster -- when the input raster is continuous then the pretty style is used (@fig-rastertype-1).\n<!-- However, the continuous scale (`tm_scale_continuous()`) often better represent phenomena that progressively vary in space  -->\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n  tm_raster()\n```\n:::\n\n\n\n\n\nOn the other hand, when the given raster is categorical, then `tm_raster()` uses `tm_scale_categorical()` automatically (@fig-rastertype-2).\nWe can also adjust the legend title, used colors, and many more, in a similar fashion as in the previously mentioned layers.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_gm) +\n  tm_raster()\n```\n:::\n\n::: {#fig-rastertype .cell layout-nrow=\"1\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Continuous raster map](figures/fig-rastertype-1.png){#fig-rastertype-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![Categorical raster map](figures/fig-rastertype-2.png){#fig-rastertype-2 fig-align='center' width=100%}\n:::\n\nExamples of raster maps\n:::\n\n\n\n\n\nThe above examples used a raster with one layer only.\nHowever, rasters can have many layers, either represented by dimensions or attributes.\nBy default, **tmap** shows all of the layers, where each raster has its own legend.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nraster2 = c(slo_elev, slo_gm)\ntm_shape(raster2) +\n  tm_raster()\n```\n:::\n\n\n\n\n\nWe can modify their arrangement with `tm_facets()` (@fig-tmrasterml).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(raster2) +\n  tm_raster() +\n  tm_facets(ncol = 1) +\n  tm_layout(panel.labels = c(\"Elevation\", \"Geomorphons\"))\n```\n\n::: {.cell-output-display}\n![A map created from a multilayered raster.](figures/fig-tmrasterml-1.png){#fig-tmrasterml fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\nIf you want to learn more -- we focus on how to specify and modify facets (also known as small multiples) in @sec-facets and how to modify map layout in @sec-map-layout.\n\n<!-- raster.warp -->\n<!-- raster margins -->\n\n## Tile {#sec-tile-layer}\n\n<!-- A tile layer is .. -->\n<!-- Tile layers (or just tines) are usually stored as prerendered raster tiles or as vector tiles on online servers. -->\n\nTile layers can be used for two purposes: either as a basemap or an overlay layer.\nBy default, three basemaps are used in the interactive mode (`tmap_mode(\"view\")`): \n`\"Esri.WorldGrayCanvas\"`, `\"OpenStreetMap\"`, and  `\"Esri.WorldTopoMap\"`.\nHowever, we can change the basemaps with a vector with the names of the tile layers' providers (@fig-tmbasemap1).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\ntm_basemap(c(StreetMap = \"OpenStreetMap\", TopoMap = \"OpenTopoMap\")) +\n  tm_shape(slo_cities, is.main = TRUE) + \n  tm_dots(col = \"red\", group = \"slo_cities\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {#fig-tmbasemap1 .cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-6285112c0a967e31999a\" style=\"width:100%;height:533.952px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6285112c0a967e31999a\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"attributionControl\":true},\"calls\":[{\"method\":\"createMapPane\",\"args\":[\"tmap402\",402]},{\"method\":\"addLayersControl\",\"args\":[[\"OpenStreetMap\",\"OpenTopoMap\"],\"slo_cities\",{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenStreetMap\",null,\"OpenStreetMap\",{\"minZoom\":0,\"maxZoom\":18,\"maxNativeZoom\":17,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenTopoMap\",null,\"OpenTopoMap\",{\"minZoom\":0,\"maxZoom\":18,\"maxNativeZoom\":17,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[46.05002679570148,45.53989359551897,46.24329129576898,46.66246439591216,46.22938889576413,46.22573579576285,46.41980959582982,46.55764389587675,45.958054895669,46.13942959573281,46.1652739957418,46.35928689580898,45.8040474956143,46.15589639573856,46.43237049583409,45.54798639552199],[14.5069289,13.65939,14.3549353,16.16552559999999,15.2616828,14.61189360000001,15.8717378,15.64558539999999,13.6474706,14.59445529999999,14.3067474,15.1150301,15.1696684,15.0540204,14.0623942,13.7304781],[4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2],[\"X0000001\",\"X0000002\",\"X0000003\",\"X0000004\",\"X0000005\",\"X0000006\",\"X0000007\",\"X0000008\",\"X0000009\",\"X0000010\",\"X0000011\",\"X0000012\",\"X0000013\",\"X0000014\",\"X0000015\",\"X0000016\"],\"slo_cities\",{\"interactive\":true,\"className\":\"\",\"pane\":\"tmap402\",\"stroke\":true,\"color\":[\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\"],\"weight\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"opacity\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"fill\":true,\"fillColor\":[\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\"],\"fillOpacity\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},null,null,[\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Ljubljana<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>285,604<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Izola / Isola<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>11,300<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Kranj<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>36,800<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Murska Sobota<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>11,700<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Celje<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>37,872<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Kamnik<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>13,700<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Ptuj<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>18,339<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Maribor<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>96,000<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Nova Gorica<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>13,500<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Domžale<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>12,400<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Škofja Loka<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>12,100<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Velenje<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>25,800<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Novo mesto<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>23,200<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Trbovlje<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>15,500<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Jesenice<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>13,400<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Koper / Capodistria<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>24,900<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\"],null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"fitBounds\":[45.51744217951111,13.5971095,46.68491581192002,16.21588669999999,[]],\"limits\":{\"lat\":[45.53989359551897,46.66246439591216],\"lng\":[13.6474706,16.16552559999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nOpenStreetMap tile layer used as a base map with the red dots representing cities in Slovenia.\n:::\n:::\n\n\n\n\n\nIn the above code, we made two basemaps available: `\"OpenStreetMap\"` and `\"OpenTopoMap\"`, and for the map legend purpose, we renamed them as `StreetMap` and `TopoMap`.\nA complete list of available basemaps is in the `leaflet::providers` object and on the https://leaflet-extras.github.io/leaflet-providers/preview/ website^[Additional details can be found in the `leaflet::providers.details` object].\n<!-- explain why some providers do not work -->\n<!-- ?do we need to register somewhere?: -->\n<!-- https://github.com/leaflet-extras/leaflet-providers -->\n<!-- how to add url tiles -->\n<!-- how to setup your own server or some references? -->\nThe `tm_basemap(NULL)` function allows to disable basemaps entirely. \n\nThe `tm_tiles()` function, on the other hand, draws the tile layer on the top (as an overlay layer) of the previous `tm_` layer.\nIn the next example, we put the vector `\"CartoDB.PositronOnlyLabels\"` tiles on top of the previously set basemaps, but below the dots layer (@fig-tmtiles1).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_basemap(c(StreetMap = \"OpenStreetMap\", TopoMap = \"OpenTopoMap\")) +\n  tm_tiles(c(CartoDB = \"CartoDB.PositronOnlyLabels\")) +\n  tm_shape(slo_cities, is.main = TRUE) + \n  tm_dots(col = \"red\", group = \"slo_cities\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {#fig-tmtiles1 .cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-7f4b9d4223f3558c736d\" style=\"width:100%;height:533.952px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7f4b9d4223f3558c736d\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"attributionControl\":true},\"calls\":[{\"method\":\"createMapPane\",\"args\":[\"tmap402\",402]},{\"method\":\"createMapPane\",\"args\":[\"tmap403\",403]},{\"method\":\"addLayersControl\",\"args\":[[\"OpenStreetMap\",\"OpenTopoMap\"],[\"CartoDB.PositronOnlyLabels\",\"slo_cities\"],{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenStreetMap\",null,\"OpenStreetMap\",{\"minZoom\":0,\"maxZoom\":18,\"maxNativeZoom\":17,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenTopoMap\",null,\"OpenTopoMap\",{\"minZoom\":0,\"maxZoom\":18,\"maxNativeZoom\":17,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.PositronOnlyLabels\",null,\"CartoDB.PositronOnlyLabels\",{\"minZoom\":0,\"maxZoom\":18,\"maxNativeZoom\":17,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tmap402\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[46.05002679570148,45.53989359551897,46.24329129576898,46.66246439591216,46.22938889576413,46.22573579576285,46.41980959582982,46.55764389587675,45.958054895669,46.13942959573281,46.1652739957418,46.35928689580898,45.8040474956143,46.15589639573856,46.43237049583409,45.54798639552199],[14.5069289,13.65939,14.3549353,16.16552559999999,15.2616828,14.61189360000001,15.8717378,15.64558539999999,13.6474706,14.59445529999999,14.3067474,15.1150301,15.1696684,15.0540204,14.0623942,13.7304781],[4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2,4.2],[\"X0000001\",\"X0000002\",\"X0000003\",\"X0000004\",\"X0000005\",\"X0000006\",\"X0000007\",\"X0000008\",\"X0000009\",\"X0000010\",\"X0000011\",\"X0000012\",\"X0000013\",\"X0000014\",\"X0000015\",\"X0000016\"],\"slo_cities\",{\"interactive\":true,\"className\":\"\",\"pane\":\"tmap403\",\"stroke\":true,\"color\":[\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\",\"#FF0000\"],\"weight\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"opacity\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"fill\":true,\"fillColor\":[\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\",\"#000000\"],\"fillOpacity\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},null,null,[\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Ljubljana<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>285,604<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Izola / Isola<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>11,300<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Kranj<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>36,800<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Murska Sobota<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>11,700<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Celje<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>37,872<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Kamnik<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>13,700<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Ptuj<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>18,339<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Maribor<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>96,000<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>city<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Nova Gorica<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>13,500<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Domžale<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>12,400<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Škofja Loka<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>12,100<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Velenje<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>25,800<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Novo mesto<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>23,200<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Trbovlje<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>15,500<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Jesenice<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>13,400<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Koper / Capodistria<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>population<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>24,900<\\/nobr><\\/td><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>place<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>town<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\"],null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"fitBounds\":[45.51744217951111,13.5971095,46.68491581192002,16.21588669999999,[]],\"limits\":{\"lat\":[45.53989359551897,46.66246439591216],\"lng\":[13.6474706,16.16552559999999]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nOpenStreetMap tile layer used as a base map with dashed lines representing island coastline and the red dots representing slo_cities on Easter Island.\n:::\n:::\n\n\n\n\n\nTile layers are usually created to be used interactively.\nWe can see it, for example, by the number of details varying depending on the zoom level we set.\nThat being said, many people find them useful also for static maps, and **tmap** allows us to use them in this way.\nIt uses the **maptiles** package to download the tiles and then plot them as a raster layer.\n\nA complete list of available providers and some [information about zoom levels](https://wiki.openstreetmap.org/wiki/Zoom_levels) are in the help file of the `?maptiles::get_tiles()` function.\nDifferent map tiles providers offer unique map styles, while zoom levels relate to different levels of detail -- the larger level, the more details we will get.\nWhen using map tiles, we should also consider adding their attribution to the map.\nAttribution for each provider can be obtained using the `maptiles::get_credit()` function by specifying the provider name, for example, `get_credit(\"CartoDB.VoyagerNoLabels\").`\n\nThe code below plots the `\"CartoDB.VoyagerNoLabels\"` tiles in the background, adds the island outline in light blue color, and puts attribution text in the bottom right corner of the map (@fig-stiles)).\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n#> ℹ tmap mode set to \"plot\".\ntm_basemap(\"CartoDB.VoyagerNoLabels\") + \n  tm_shape(slo_borders) +\n  tm_borders(lwd = 5, col = \"lightblue\") +\n  tm_credits(maptiles::get_credit(\"CartoDB.VoyagerNoLabels\"),\n             bg.color = \"white\")\n```\n\n::: {.cell-output-display}\n![Example of a static map using a downloaded `\"CartoDB.VoyagerNoLabels\"` tile layer.](figures/fig-stiles-1.png){#fig-stiles fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [
      "layers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n<script src=\"site_libs/leaflet-providers-2.0.0/leaflet-providers_2.0.0.js\"></script>\n<script src=\"site_libs/leaflet-providers-plugin-2.2.2/leaflet-providers-plugin.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}