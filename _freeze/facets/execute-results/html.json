{
  "hash": "944a4e59950ab13971f0cb6c3b8b829d",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# Facets {#sec-facets}\n\n\\index{facets}\n\\index{small multiples}\nFacets, also known as small multiples, are a powerful way to visualize multiple variables or values of a single variable in a grid of panels.\nIn other words, they open the possibility of visualizing multiple maps in a single figure.\nThey allow for quick comparison of different variables or values across the same regions or time periods.\nThis chapter not only shows how to define facets in **tmap** but also how to customize them to make them more informative and appealing.\n\nTo demonstrate the use of facets, we will use a few datasets from Slovenia.\nThis includes the borders of Slovenia (`slo_borders` -- just one polygon), the regions of Slovenia (`slo_regions` -- multiple polygons for many variables) and the regions of Slovenia over time (`slo_regions_ts` -- multiple polygons with a time variable representing different years).\nTo simplify the examples, we will subset the `slo_regions_ts` dataset to include only five years: 2006, 2010, 2014, 2018, and 2022.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tmap)\nslo_borders = read_sf(\"data/slovenia/slo_border.gpkg\")\nslo_regions = read_sf(\"data/slovenia/slo_regions.gpkg\")\nslo_regions_ts = read_sf(\"data/slovenia/slo_regions_ts.gpkg\")\nslo_regions_ts = subset(slo_regions_ts, time %in% c(\"2006\", \"2010\", \"2014\", \"2018\", \"2022\"))\n```\n:::\n\n\n\n\n## Specifying facets\n\nFacet can be based on data coming from various sources: it can be a set of variables (e.g., columns in an `sf` object) or a single variable with multiple values.\n\nThe first approach is seen below, where we specify multiple variables (`c(\"pop_dens\", \"gdppercap\", \"tourism\")`) from the `slo_regions` dataset to create facets. \nEach variable is displayed in its own facet with a separate scale and legend (@fig-facets1).\nThis allows for quick comparison of different variables across the same regions.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(c(\"pop_dens\", \"gdppercap\", \"tourism\"))\n#> [plot mode] fit legend/component: Some legend items or map compoments do not\n#> fit well, and are therefore rescaled.\n#> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n```\n\n::: {.cell-output-display}\n![Facets for different variables.](figures/fig-facets1-1.png){#fig-facets1 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nThe second approach uses a single variable to create facets, where each facet represents a unique value of that variable.\nHere, we need to use `tm_facets()` to specify the faceting variable.\nThis function creates a grid of panels, each showing the data for a specific value of the variable (here `\"time\"`), and also allows to specify the layout of the facets (e.g., number of columns) (@fig-facets2).\nIn such cases, all of the facets share the same scale and legend, which is useful, for example, for comparing the same variable across different times.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"time\", ncol = 5)\n#> [plot mode] fit legend/component: Some legend items or map compoments do not\n#> fit well, and are therefore rescaled.\n#> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n```\n\n::: {.cell-output-display}\n![Facets for one variable over time.](figures/fig-facets2-1.png){#fig-facets2 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nBoth approaches can be combined, allowing to create facets for multiple variables over time (@fig-facets3).\nHere, variables specified as a visual variable (`c(\"pop_dens\", \"gdppercap\", \"tourism\")`) and show in columns, while the faceting variable is set with `tm_facets(by = \"time\")` and presents the data for each year in a separate row.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions_ts) +\n  tm_polygons(c(\"pop_dens\", \"gdppercap\", \"tourism\")) +\n  tm_facets(by = \"time\")\n```\n\n::: {.cell-output-display}\n![Facets for multiple variables over time.](figures/fig-facets3-1.png){#fig-facets3 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n## Imporance of layers order for faceting\n\nThe placement of the `tm_facets()` function in the code is crucial for how facets are applied to the map.\nWhen presenting multiple layers in a map, the `tm_facets()` function must be defined after the layer to be faceted.\n\nMoreover, the order of layers is essential when using facets for two reasons:\n\n1. The first layer in the map is used to determine the extent of the map.\n2. Each layer lies on top of the previous one, so the last layer is the one that is in the foreground.\n\n@fig-facets4 has the `slo_borders` layer first, which means that the borders of Slovenia are drawn first -- each facet will have the same extent and the borders will be visible in each facet.\nNext, the `slo_regions_ts` layer is added and faceted by the `region_group` variable.\nThis results in a map where each facet shows the GDP per capita for different region groups with the borders of Slovenia in the background.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders(lwd = 4) +\n  tm_shape(slo_regions) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"region_group\", nrow = 2)\n```\n\n::: {.cell-output-display}\n![Facets for one variable for different region groups.](figures/fig-facets4-1.png){#fig-facets4 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nOn the other hand, @fig-facets5 has the `slo_regions_ts` layer first, which means that the GDP per capita is drawn first and then the borders of Slovenia are added.\nThis results in a map where each facet zooms into a specific region group, showing the GDP per capita for that group.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"region_group\", nrow = 2) +\n  tm_shape(slo_borders) +\n  tm_borders(lwd = 4)\n```\n\n::: {.cell-output-display}\n![Facets for one variable limiting the view to a specific region group.](figures/fig-facets5-1.png){#fig-facets5 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nWhat to do in case we want to keep the borders layer on the top, but also have its extent in every panel?\nIn this case, we may either set the `slo_borders` layer as a main one (`tm_shape(slo_borders, is.main = TRUE)`; @sec-shapes-hierarchy) or set the `free.coords` argument of `tm_facets()` to FALSE -- then each facet will use the complete extent of the provided `slo_regions_ts` data.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"region_group\", nrow = 2, free.coords = FALSE) +\n  tm_shape(slo_borders) +\n  tm_borders(lwd = 4)\n```\n:::\n\n\n\n\n## Facets types\n\nAll of the above examples use the `tm_facets()` function.\nThis is a general function that can be used to create facets for various types of data.\nAt the same time, **tmap** provides several specialized functions for creating facets that can be used to create more complex faceting layouts.\n\nThe most common ones are:\n\n- `tm_facets_wrap()` -- creates facets that wrap around the specified variable -- it can be thought as a one-dimensional grid of panels\n- `tm_facets_grid()` -- creates facets in a two-dimensional grid, where the specified variables define the rows and columns\n\n@fig-facets7 shows how to use `tm_facets_wrap()` to create facets for the `region_group` variable, wrapping the panels into two rows.\nBy default, the panels are filled from left to right, and then from top to bottom, but we can change this behavior by setting the `byrow` argument to `FALSE`.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders(lwd = 4) +\n  tm_shape(slo_regions) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets_wrap(by = \"region_group\", nrow = 2, byrow = FALSE)\n```\n\n::: {.cell-output-display}\n![Facets for one variable with wrapping.](figures/fig-facets7-1.png){#fig-facets7 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nTwo-dimensional facets are shown in @fig-facets8, where the `region_group` variable is used for the rows and the `time` variable for the columns.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders(lwd = 4) +\n  tm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets_grid(rows = \"region_group\", columns = \"time\")\n```\n\n::: {.cell-output-display}\n![Two-dimensional facets for one variable in various region groups over time.](figures/fig-facets8-1.png){#fig-facets8 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n<!-- any other crucial arguments? -->\n\n<!-- mention the rest -->\n<!-- Martijn, should I add some content of any other of the facets type? -->\n<!-- tm_facets_stack(by = \"VARS__\", orientation = NA, ...) -->\n<!-- tm_facets_hstack(by = \"VARS__\", ...) -->\n<!-- tm_facets_vstack(by = \"VARS__\", ...) -->\n<!-- tm_facets_pagewise(by = \"VARS__\", byrow = TRUE, ...) -->\n<!-- tm_facets_flip(...) -->\n\n## Customizing facets {#sec-customizing-facets}\n\nNow that we know how to create facets, we can customize them to make them more informative and to focus on the message we want to convey.\nOften, faceting variables are self-explanatory -- we can easily understand what their values mean.\nHowever, sometimes, we want to add more information to the facets, such as labels for the axes or titles for the panels.\n\nThe labels can be added using the `tm_xlab()` and `tm_ylab()` functions (@fig-facets9).\nBy default, they are located on the bottom and left side of the map, but we can change their position using the `side` argument.\nMoreover, they maintain a horizontal orientation.\nThis is fine for the x-axis, but not for the y-axis, where we may want to rotate the label to be vertical with the `rotation` argument.\nFinally, we could customize their size and distance from the map border to make them more readable using the `size` and `space` arguments, respectively.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders(lwd = 4) +\n  tm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets_grid(rows = \"region_group\", columns = \"time\") +\n  tm_xlab(\"Year\", side = \"top\", size = 2, space = 1) +\n  tm_ylab(\"Region\", rotation = 90, size = 2, space = 1)\n```\n\n::: {.cell-output-display}\n![Two-dimensional facets with labeled axes.](figures/fig-facets9-1.png){#fig-facets9 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n<!-- should it not be a part of the tm_facets function? -->\nPanel labels can be adjusted using the `tm_layout(panel.labels = c(...))` function.\nTo see it in action, we read the `slo_tavg` raster data, which contains average monthly temperatures in Slovenia.\n<!-- Raster data -- where to add it in this section: either mix with the other content or after it -->\n<!-- show how to add colors independently to each raster panel -->\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(stars)\nslo_tavg = read_stars(\"data/slovenia/slo_tavg.tif\")\n```\n:::\n\n\n\n\nNext, we create facets for the raster data using `tm_facets()`, specify the `band` variable that stores the month information and set the number of columns to three.\nThis results in a grid of panels, each showing the average temperature for a specific month, with the panel labels based on the `band` variable name.\nSuch a name is usually not very informative, so we can replace it with more descriptive labels with a vector of labels provided to the `panel.labels` argument of the `tm_layout()` function, e.g., `panel.labels = c(1:12)` (@fig-facets10).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_tavg) +\n  tm_raster(col.scale = tm_scale_continuous()) +\n  tm_facets(by = \"band\", ncol = 3) +\n  tm_layout(panel.labels = c(1:12))\n```\n\n::: {.cell-output-display}\n![Facets for raster data.](figures/fig-facets10-1.png){#fig-facets10 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nNote that in the above example only one legend is shown and it is shared across all panels.\nThis allows for easy comparison of the values across different months, e.g., we can see that the average temperature in January is much lower than in July.\n\n<!-- .free should be mentioned, initially explained in the scale chapter, and then references here -->\nOn the other hand, we may be interested in comparing the spatial patterns of average temperatures across different months rather than their values.\nTo do that, we need to create independent legends for each panel --  we should set the `col.free` argument of `tm_raster()` to `TRUE` (@fig-facets11).\nIn the example below, we also customize the map further by updating the color scale to use the \"viridis\" palette, removing the title from the legend and adding a title to the map, improving the panel labels, adjusting the inner margins of the facets to make them more readable.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_tavg) +\n  tm_raster(\n    col.scale = tm_scale_continuous(values = \"viridis\"),\n    col.legend = tm_legend(title = \"\", position = c(\"LEFT\", \"BOTTOM\")),\n    col.free = TRUE) +\n  tm_facets(by = \"band\", ncol = 3) +\n  tm_layout(panel.labels = c(1:12),\n            inner.margins = c(0.02, 0.2, 0.02, 0.02)) +\n  tm_title(\"Average monthly temperature in Slovenia\") \n```\n\n::: {.cell-output-display}\n![Facets for raster data independent legends.](figures/fig-facets11-1.png){#fig-facets11 fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n## Facets with raster and vector data\n\n@fig-facets12 shows how to combine raster and vector data in facets.\nIn this example, we use the `slo_elev` raster data, which contains elevation data for Slovenia, and the `slo_regions` vector data, which includes the borders of the regions in Slovenia.\nTo display the elevation data for each region group, we must first specify the raster data and then use the vector data as the main layer (`is.main = TRUE` in `tm_shape()`).\nNext, we can use `tm_facets()` to create facets for the `region_group` variable.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\ntm_shape(slo_elev) +\n  tm_raster(col.scale = tm_scale_continuous()) +\n  tm_shape(slo_regions, is.main = TRUE) + \n  tm_borders(lwd = 4) +\n  tm_facets(by = \"region_group\", free.coords = TRUE)\n```\n\n::: {.cell-output-display}\n![Facets with raster data and vector data.](figures/fig-facets12-1.png){#fig-facets12 fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}