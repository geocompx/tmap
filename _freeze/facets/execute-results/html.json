{
  "hash": "7bdff46802e461ca76b6ab4663246111",
  "result": {
    "engine": "knitr",
    "markdown": "\n::: {.cell}\n\n:::\n\n\n# Facets {#sec-facets}\n\n\\index{facets}\n\\index{small multiples}\n<!-- also known as small-multiples -->\n\n<!-- should we limit to e.g., 5 years? -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tmap)\nslo_borders = read_sf(\"data/slovenia/slo_border.gpkg\")\nslo_regions = read_sf(\"data/slovenia/slo_regions.gpkg\")\nslo_regions_ts = read_sf(\"data/slovenia/slo_regions_ts.gpkg\")\nslo_regions_ts = subset(slo_regions_ts, time %in% c(\"2006\", \"2010\", \"2014\", \"2018\", \"2022\"))\n```\n:::\n\n\n<!-- tm_facets() -->\n\n## Specifying facets\n\n<!-- two approaches -- variables (e.g., columns) vs values in one variable -->\n<!-- + a mix of both approaches -->\n\nFacet can be based on data coming from various sources: it can be a set of variables (e.g., columns in an `sf` object) or a single variable with multiple values.\n\nThe first approach is seen below, where we specify multiple variables (`c(\"pop_dens\", \"gdppercap\", \"tourism\")`) from the `slo_regions` dataset to create facets. \nEach variable is displayed in its own facet with a separate scale and legend (@fig-facets1).\nThis allows for quick comparison of different variables across the same regions.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(c(\"pop_dens\", \"gdppercap\", \"tourism\"))\n```\n\n::: {.cell-output-display}\n![Facets for different variables.](figures/fig-facets1-1.png){#fig-facets1 fig-align='center' width=100%}\n:::\n:::\n\n\nThe second approach uses a single variable to create facets, where each facet represents a unique value of that variable.\nHere, we need to use `tm_facets()` to specify the faceting variable.\nThis function creates a grid of panels, each showing the data for a specific value of the variable (here `\"time\"`), and also allows to specify the layout of the facets (e.g., number of columns) (@fig-facets2).\nIn such cases, all of the facets share the same scale and legend, which is useful, for example, for comparing the same variable across different times.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"time\", ncol = 5)\n```\n\n::: {.cell-output-display}\n![Facets for one variable over time.](figures/fig-facets2-1.png){#fig-facets2 fig-align='center' width=100%}\n:::\n:::\n\n\nBoth approaches can be combined, allowing to create facets for multiple variables over time (@fig-facets3).\nHere, variables specified as a visual variable (`c(\"pop_dens\", \"gdppercap\", \"tourism\")`) and show in columns, while the faceting variable is set with `tm_facets(by = \"time\")` and presents the data for each year in a separate row.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions_ts) +\n  tm_polygons(c(\"pop_dens\", \"gdppercap\", \"tourism\")) +\n  tm_facets(by = \"time\")\n```\n\n::: {.cell-output-display}\n![Facets for multiple variables over time.](figures/fig-facets3-1.png){#fig-facets3 fig-align='center' width=100%}\n:::\n:::\n\n\n## Imporance of layers order for faceting\n\n<!-- customize -->\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders() +\n  tm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"region_group\", nrow = 2)\n```\n\n::: {.cell-output-display}\n![Facets for one variable for different region groups.](figures/fig-facets4-1.png){#fig-facets4 fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"region_group\", nrow = 2) +\n  tm_shape(slo_borders) +\n  tm_borders()\n```\n\n::: {.cell-output-display}\n![Facets for one variable limiting the view to a specific region group.](figures/fig-facets5-1.png){#fig-facets5 fig-align='center' width=100%}\n:::\n:::\n\n\n<!-- free.coords = FALSE) -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets(by = \"region_group\", nrow = 2, free.coords = FALSE) +\n  tm_shape(slo_borders) +\n  tm_borders()\n```\n:::\n\n\n## Facets types\n\n<!-- other facets functions -->\n<!-- tm_facets_wrap(by = \"VARS__\", nrow = NA, ncol = NA, byrow = TRUE, ...) -->\n<!-- tm_facets_grid(rows = NULL, columns = NULL, pages = NULL, ...) -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders() +\n  tm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets_wrap(by = \"region_group\", nrow = 2)\n```\n\n::: {.cell-output-display}\n![Facets for one variable with wrapping.](figures/fig-facets7-1.png){#fig-facets7 fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders() +\n  tm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets_grid(rows = \"region_group\", columns = \"time\")\n```\n\n::: {.cell-output-display}\n![Two-dimensional facets for one variable in various region groups over time.](figures/fig-facets8-1.png){#fig-facets8 fig-align='center' width=100%}\n:::\n:::\n\n\n<!-- also: https://r-tmap.github.io/tmap/articles/adv_multivariate -->\n\n<!-- mention the rest -->\n<!-- tm_facets_stack(by = \"VARS__\", orientation = NA, ...) -->\n<!-- tm_facets_hstack(by = \"VARS__\", ...) -->\n<!-- tm_facets_vstack(by = \"VARS__\", ...) -->\n<!-- tm_facets_pagewise(by = \"VARS__\", byrow = TRUE, ...) -->\n<!-- tm_facets_flip(...) -->\n\n## Customizing facets\n\n<!-- tm_xlab and tm_ylab for better labels -->\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_borders() +\n  tm_shape(slo_regions_ts) +\n  tm_polygons(\"gdppercap\") +\n  tm_facets_grid(rows = \"region_group\", columns = \"time\") +\n  tm_xlab(\"Year\", side = \"top\", size = 2, space = 1) +\n  tm_ylab(\"Region\", rotation = 90, size = 2, space = 1)\n```\n\n::: {.cell-output-display}\n![Two-dimensional facets with labeled axes.](figures/fig-facets9-1.png){#fig-facets9 fig-align='center' width=100%}\n:::\n:::\n\n\n\n<!-- Raster data -- where to add it in this section: either mix with the other content or after it -->\n<!-- show how to add colors independently to each raster panel -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(stars)\nslo_tavg = read_stars(\"data/slovenia/slo_tavg.tif\")\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_tavg) +\n  tm_raster() +\n  tm_facets(by = \"band\", ncol = 3) +\n  tm_layout(panel.labels = c(1:12))\n```\n\n::: {.cell-output-display}\n![Facets for raster data.](figures/fig-facets10-1.png){#fig-facets10 fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_tavg) +\n  tm_raster(\n    col.scale = tm_scale_continuous(values = \"viridis\"),\n    col.legend = tm_legend(title = \"\"),\n    col.free = TRUE) +\n  tm_facets(by = \"band\", ncol = 3) +\n  tm_layout(panel.labels = c(1:12),\n            inner.margins = c(0.02, 0.2, 0.02, 0.02)) +\n  tm_title(\"Average monthly temperature in Slovenia\") \n```\n\n::: {.cell-output-display}\n![Facets for raster data independent legends.](figures/fig-facets11-1.png){#fig-facets11 fig-align='center' width=100%}\n:::\n:::\n\n\n<!-- mixing with vector data -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n  tm_raster() +\n  tm_shape(slo_regions, is.main = TRUE) + \n  tm_borders() +\n  tm_facets(by = \"region_group\", free.coords = TRUE)\n```\n\n::: {.cell-output-display}\n![Facets with raster data and vector data.](figures/fig-facets12-1.png){#fig-facets12 fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}