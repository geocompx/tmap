{
  "hash": "5067ab96ad9d639e0e05dfccde694242",
  "result": {
    "engine": "knitr",
    "markdown": "\n::: {.cell}\n\n:::\n\n\n# Specifying spatial data {#sec-tmshape}\n\nAt least two aspects need to be specified in order to plot spatial data: the spatial data object itself and the plotting method(s). \nWe cover the former in this chapter and the latter is discussed in the following chapters.\n\n## Shapes and layers {#sec-shapes-and-layers}\n\n\\index{shape object}\n\\index{map layer}\nAs described in @sec-geodata, shape objects can be vector or raster data.\nWe recommend `sf` objects for vector data and `terra` objects for raster data^[However, **tmap** also accepts other spatial objects, e.g., of `sp`, `raster`, and `stars` classes.].\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nlibrary(terra)\nworldvector = read_sf(\"data/worldvector.gpkg\")\nworldcities = read_sf(\"data/worldcities.gpkg\")\nworldelevation = rast(\"data/worldelevation.tif\")\n```\n:::\n\n\n\\index{tm\\_shape}\nIn **tmap**, a shape object needs to be defined with the function `tm_shape()`.\nWhen multiple shape objects are used, each has to be defined in a separate `tm_shape()` call.\nThis is illustrated in the following example (@fig-tmshape1).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation) +\n  tm_raster(\"worldelevation\", \n            col.scale = tm_scale(values = \"geyser\", midpoint = NA)) +\n  tm_shape(worldvector) +\n  tm_borders() +\n  tm_shape(worldcities) +\n  tm_dots() +\n  tm_text(\"name\")\n```\n\n::: {.cell-output-display}\n![A map representing three shapes (worldelevation, worldvector, and worldcities) using four layers.](figures/fig-tmshape1-1.png){#fig-tmshape1 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nIn this example, we use three shapes: `worldelevation` which is a `SpatRaster` object containing a layer called `\"worldelevation\"`, `worldvector` which is an `sf` object with country borders, and `worldcities` -- an `sf` object that contains metropolitan areas of at least 20 million inhabitants.\n\nEach `tm_shape()` function call is succeeded by one or more layer functions.\nIn the above example, these are `tm_raster()`, `tm_borders()`, `tm_dots()` and `tm_text()`.\nWe describe layer functions in detail in the next chapter.\nFor this chapter, it is sufficient to know that each layer function call defines how the spatial data specified with `tm_shape()` is plotted.\n\nShape objects can be used to plot multiple layers.\nIn the above example, shape object `worldcities` is used for two layers: `tm_dots()` and `tm_text()`.\n\n## Shapes hierarchy {#sec-shapes-hierarchy}\n\n\\index{shapes hierarchy}\nThe order of the `tm_shape()` functions' calls is meaningful.\nThe first `tm_shape()`, known as *the main shape*, is not only shown below the following *shapes*, but also sets the projection and extent of the whole map.\nIn @fig-tmshape1, the `worldelevation` object was used as the first *shape*, and thus the whole map has the projection and extent of this object.\n\nHowever, we can quickly change the main *shape* with the `is.main` argument.\nIn the following example, we set the `worldcities` object as the main *shape*, which limits the output map to the point locations in `worldcities` (@fig-tmshape2)^[We show how to adjust margins and text locations later in the book].\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation) +\n  tm_raster(\"worldelevation\", \n            col.scale = tm_scale(values = \"geyser\", midpoint = NA)) +\n  tm_shape(worldvector) +\n  tm_borders() +\n  tm_shape(worldcities, is.main = TRUE) +\n  tm_dots() +\n  tm_text(\"name\")\n```\n\n::: {.cell-output-display}\n![A map representing three shapes (worldelevation, worldvector, and worldcities) using four layers and zoomed into the locations in the worldcities object.](figures/fig-tmshape2-1.png){#fig-tmshape2 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n## Map extent {#sec-map-extent}\n\n\\index{map extent}\nAnother important aspect of mapping, besides projection, is its extent^[Also known as a *bounding box*.] -- a portion of the area shown in a map.\nThis is not an issue when the extent of our spatial data is the same as we want to show on a map.\nHowever, what should we do when the spatial data contains a larger region than we want to present?\n\nAgain, we could take two routes.\nThe first one is to preprocess our data before mapping - this can be done with vector clipping (e.g., `st_intersection()`) and raster cropping (e.g., `st_crop()`).\nWe would recommend this approach if you plan to work on the smaller data in the other parts of the project.\nThe second route is to specify the map extent in **tmap**.\n\n**tmap** allows specifying map extent using three approaches.\nThe first one is to specify minimum and maximum coordinates in the x and y directions that we want to represent.\nThis can be done with a numeric vector of four values in the order of minimum x, minimum y, maximum x, and maximum y, where all of the coordinates need to be specified in the input data units^[This can also be done with the object of class `st_bbox` or a 2 by 2 matrix.]\nIn the following example, we limit our map extent to the rectangular area between x from -15 to 45 and y from 35 to 65 (@fig-tbbox1).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation, bbox = c(-15, 35, 45, 65)) +\n  tm_raster(\"worldelevation\", \n            col.scale = tm_scale(values = \"geyser\", midpoint = NA))\n```\n\n::: {.cell-output-display}\n![Global elevation data limited to the extent of the specified minimum and maximum coordinates.](figures/fig-tbbox1-1.png){#fig-tbbox1 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nThe second approach allows for the map to be set to an extent based on a search query.\nIn the code below, we limit the map extent to the area of `\"Europe\"` (@fig-tbbox2).\nThis approach uses the OpenStreetMap tool called Nominatim to automatically generate minimum and maximum coordinates in the x and y directions based on the provided query.\n<!-- add refs/links? -->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation, bbox = \"Europe\") +\n  tm_raster(\"worldelevation\", \n            col.scale = tm_scale(values = \"geyser\", midpoint = NA))\n```\n\n::: {.cell-output-display}\n![Global elevation data limited to the extent specified with the 'Europe' query.](figures/fig-tbbox2-1.png){#fig-tbbox2 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nIn the last approach, the map extent is based on another existing spatial object.\n@fig-tbbox3 shows the elevation raster data (`worldelevation`) limited to the outermost coordinates from `worldcities`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(worldelevation, bbox = worldcities) +\n  tm_raster(\"worldelevation\", \n            col.scale = tm_scale(values = \"geyser\", midpoint = NA))\n```\n\n::: {.cell-output-display}\n![Global elevation data limited to the extent of the other spatial object.](figures/fig-tbbox3-1.png){#fig-tbbox3 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n<!-- mention that legend relates to the complete object? -->\n<!-- ?bb -->\n<!-- explain some additional arguments of bb? -->\n\n## Map projection {#sec-map-projection-intro}\n\n\\index{map projection}\nAs we mentioned in the previous section, *t*maps use the projection from the main *shape*.\nHowever, we often want to create a map with a different projection, for example, to preserve a specific map property.\nWe can do this in three ways:\n\n1. Use a different projection on a map is to reproject the main data before plotting.\n2. Specify the map projection using the `crs` argument of `tm_shape()`.\nThis argument expects either some `crs` object or a CRS code.\n3. Use a `tm_crs()` function.\n\nThe next code chunk shows all three ways in which we transform the CRS of the `worldvector` object to `\"EPSG:8857\"` -- representing a projection called [Equal Earth](http://equal-earth.com/index.html) [@savric_equal_2019].\nThe Equal Earth projection is an equal-area pseudocylindrical projection for world maps similar to the non-equal-area Robinson projection (@fig-crs-robin).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#1\nworldvector8857 = st_transform(worldvector, crs = \"EPSG:8857\")\ntm_shape(worldvector8857) +\n  tm_polygons()\n#2\ntm_shape(worldvector, crs = \"EPSG:8857\") +\n  tm_polygons() \n#3\ntm_shape(worldvector) +\n  tm_polygons() +\n  tm_crs(\"EPSG:8857\")\n```\n:::\n\n\nThe first way requires understanding various R packages, as different spatial objects have different functions for changing the projection.\nThe second way is the most straightforward, but it is important to remember that the `crs` argument can only be set in the main layer (@sec-shapes-hierarchy).\nThe third way is the most flexible, as it allows changing the projection for the whole map.\nAdditionally, the `tm_crs()` function can automatically determine the projection based on the expected property of the map, e.g., equal area (`\"area\"`), equidistant (`\"distance\"`), or conformal (`\"shape\"`).\nFor example, `tm_crs(\"auto\")` chooses the projection that best preserves the area of the map (*Lambert Azimuthal Equal Area*), while `tm_crs(\"auto\", property = \"shape\")` chooses the projection that best preserves the shape of the map (*Stereographic*).\n\n@sec-map-projections expands on the topic of map projections.\nIt starts by explaining the basic concepts and then shows how to apply them in **tmap**.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}