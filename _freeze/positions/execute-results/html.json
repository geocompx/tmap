{
  "hash": "baab8ab694bedceca4f4fff304476dbd",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n# Positions {#sec-positions}\n\nThis chapter focuses on how to move map components, such as legends, scale bars, and insets, freely in the map.\nThey can be placed both inside and outside the map frame -- with some being in and some being out (@sec-positioning).\nMoreover, map components can be grouped together, which allows them to be moved and arranged as a single unit (@sec-position-many-components).\n\nTo demonstrate the positioning of map components, we will use a simple map with the elevation raster data of Slovenia in meters above sea level (*m asl*). \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(stars)\nlibrary(tmap)\nslo_elev = read_stars(\"data/slovenia/slo_elev.tif\")\ntm = tm_shape(slo_elev) +\n    tm_raster()\n```\n:::\n\n\n\n\n## Positioning {#sec-positioning}\n\nAll of the map components can be positioned in any location in the map frame or outside of it. \nThe positioning is done via the `position` argument, which can take a variety of values. The most common are:\n\n- `tm_pos_in()`: a function that allows to control the position inside the map frame (@fig-positions-in-scheme).\nThe first argument is the horizontal position and the second is the vertical position. \nE.g., `tm_pos_in(\"left\", \"top\")` locates a component in the top left corner of the map frame.\nThis function can be used directly or through a shortcut -- a character vector with two elements, where the first is the horizontal position and the second is the vertical position inside the map frame, e.g., `c(\"left\", \"top\")`.\n- `tm_pos_out()`: a function that allows the control of the position outside the map frame.\nFor example, `tm_pos_out(\"center\", \"top\")` places a component in the center of the top side of the map frame.\n\nBoth functions can take additional arguments to control the position more precisely, including their justification and alignment.\n\n<!-- a short intro to the rest of the section with refs -->\n\n### Inside the map frame\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Examples of positioning map components inside the map frame.](figures/fig-positions-in-scheme-1.png){#fig-positions-in-scheme fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nMap legends, by default, are placed outside of the map frame -- that is often expected as it does not overlap with the rest of the map content.\nHowever, we can find ourselves in a situation when our spatial data is so sparse that the legend can be placed inside the map, filling a white space.\nThen, we need to use the `position` argument of `tm_legend()`.\n\nWe may use it either with a vector with two elements, or with the `tm_pos_in()` function (@fig-positions-in-scheme).\nFor example, `position = c(\"right\", \"bottom\")` or `position = tm_pos_in(\"right\", \"bottom\")` are equivalent.\nThe first element of the vector is the horizontal position and the second is the vertical position inside the map frame.\nThese elements can be either in lower case letters, UPPER CASE LETTERS, or numbers between 0 and 1.\n\nLowercase letters, e.g., `\"right,\" \"bottom\",` place the selected map component in the right bottom corner but leave some margin to the map frame (@fig-positions-in-1).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = c(\"right\", \"bottom\")))\n# same as:\n# tm_shape(slo_elev) +\n#     tm_raster(col.legend = tm_legend(position = tm_pos_in(\"right\", \"bottom\")))\n```\n:::\n\n\n\n\nUppercase letters, e.g., `\"RIGHT,\" \"BOTTOM\",` also places the map component in the bottom right corner but directly touch the map frame (@fig-positions-in-2).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = c(\"RIGHT\", \"BOTTOM\")))\n```\n:::\n\n\n\n\nNumbers between 0 and 1, e.g., `c(0.8, 0.4)` places the map component in the right bottom corner but with a margin of 20% of the map frame size (@fig-positions-in-3).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = c(0.8, 0.4)))\n```\n:::\n\n::: {#fig-positions-in .cell layout-ncol=\"3\" layout-align=\"center\"}\n::: {.cell-output-display}\n![With lowercase letters: \"right\", \"bottom\"](figures/fig-positions-in-1.png){#fig-positions-in-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![With uppercase letters: \"RIGHT\", \"BOTTOM'\"](figures/fig-positions-in-2.png){#fig-positions-in-2 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![With numbers: 0.8, 0.4](figures/fig-positions-in-3.png){#fig-positions-in-3 fig-align='center' width=100%}\n:::\n\nPositioning legends inside the map frame.\n:::\n\n\n\n\nThere is one important difference between specifying the position with a vector and with the `tm_pos_in()` function.\nThe latter allows to control the position more precisely with additional arguments -- `just.h`, `just.v`, `align.h`, and `align.v`.\nThe `just.h` and `just.v` only work when the position is specified with numbers between 0 and 1, and they arguments control the justification of the map component to that position.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\nThe `align.h` and `align.v` arguments are used when many map components are grouped together, which is explained in [@sec-position-many-components].\n\n### Outside the map frame\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Examples of positioning map components outside the map frame.](figures/fig-positions-out-scheme-1.png){#fig-positions-out-scheme fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nIn general, there are eight locations for map components outside the map frame -- each of them can be specified with `tm_pos_out()` (@fig-positions-out-scheme).\nWe may place a map component either on one of the sides of the map frame (e.g., `tm_pos_out(\"center\", \"top\")`), or in its corner (e.g., `tm_pos_out(\"left\", \"top\")`).\n\nAt the same time, placing a map component outside a map frame brings some additional complexity.\nNow, we can not only put a component in a specified place, but also arrange it in that place.\nFor example, `tm_pos_out(\"center,\" \"top\")` puts the specified component to the top of the map frame but is positioned to the left. \nWhat should we do if we want to center it?\n\nThe `tm_pos_out()` has four sets of arguments that control the position of a map component outside the map frame:\n\n- `cell.h` and `cell.v`: the horizontal and vertical position of the map component outside the map frame. \n- `pos.h` and `pos.v`: the horizontal and vertical position of the map component inside the cell defined by `cell.h` and `cell.v`.\n- `just.h` and `just.v`: the justification of the map components in relation to the position of the map component inside the cell -- only used when `pos.h` and `pos.v` are specified as numbers between 0 and 1.\n- `align.h` and `align.v`: the alignment of the components is only used when many components are grouped together (@sec-position-many-components).\n\nLet's see how these arguments work in practice.\nThe `cell.h` and `cell.v` arguments are the first two arguments of the `tm_pos_out()` function and they define the cell in which the map component will be placed (@fig-positions-out-1; @fig-positions-out-2).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"center\", \"bottom\")))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"left\", \"center\")))\n```\n:::\n\n\n\n\nThen, we may to control the location of the map component inside the cell with `pos.h` and `pos.v` arguments.\nThe `pos.h` argument controls the horizontal position of the map component inside the cell, while the `pos.v` argument -- the vertical position.\nThe former is mostly useful when our legend is on the top of the map frame and the latter is useful when it is on the left or right side of the map frame (@fig-positions-out-3; @fig-positions-out-4).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"center\", \"bottom\", pos.h = \"center\")))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n    tm_raster(col.legend = tm_legend(position = tm_pos_out(\"left\", \"center\", pos.v = \"center\")))\n```\n:::\n\n::: {#fig-positions-out .cell layout-nrow=\"2\" layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![With `cell.h = \"center\"` and `cell.v = \"bottom\"`](figures/fig-positions-out-1.png){#fig-positions-out-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![With `cell.h = \"left\"` and `cell.v = \"center\"`](figures/fig-positions-out-2.png){#fig-positions-out-2 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![With `pos.h = \"center\"` in cell (`cell.h = \"center\"`, `cell.v = \"bottom\"`)](figures/fig-positions-out-3.png){#fig-positions-out-3 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![With `pos.v = \"center\"` in cell (`cell.h = \"left\"`, `cell.v = \"center\"`)](figures/fig-positions-out-4.png){#fig-positions-out-4 fig-align='center' width=100%}\n:::\n\nPositioning legends outside the map frame.\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## Many components {#sec-position-many-components}\n\nVarious map components can be positioned at the same time -- either to different locations or to the same one.\nFor example, we can place a scale bar outside the map frame and a legend inside the map frame (@fig-many-comp-1).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(position = c(\"right\", \"bottom\"))) +\n  tm_scalebar(position = tm_pos_out(\"left\", \"center\"))\n```\n:::\n\n\n\n\nNow, you may be wondering what happens if we want to place two (or more) components in the same location.\nAs you can see in @fig-many-comp-2, they will be stacked on top of each other inside one frame.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(position = tm_pos_out(\"right\", \"center\"))) +\n  tm_scalebar(position = tm_pos_out(\"right\", \"center\"))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {#fig-many-comp .cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Two components in different locations](figures/fig-many-comp-1.png){#fig-many-comp-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![Two components in the same location](figures/fig-many-comp-2.png){#fig-many-comp-2 fig-align='center' width=100%}\n:::\n\nPositioning many map components.\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\nThe **tmap** package also has a mechanism to group map components together and then position and organize them as a single unit.\nThis requires two steps:\n\n1. Specifying the `group_id` argument in the map component that we want to group together -- this should be a unique integer number.\n2. Using the `tm_components()` function to select which group of map components we want to position together and where.\n\nIn the following example, we have three map components -- a legend, a scale bar, and credits -- and we want to group the scale bar and credits (@fig-comp-group-1).\nFirst, we specify the `group_id` argument in the map components functions, and then we use the `tm_components()` function to position them together.\nHere, the position argument works exactly as we already described in the previous sections, i.e., it can be specified with a vector or with the `tm_pos_in()` or `tm_pos_out()` functions.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(group_id = 1)) +\n  tm_scalebar(group_id = 2) +\n  tm_credits(\"My credits\", group_id = 2) +\n  tm_components(1, position = tm_pos_in(\"right\", \"bottom\")) +\n  tm_components(2, position = tm_pos_in(\"left\", \"top\"))\n```\n:::\n\n\n\n\nThe `tm_components()` function can also be used to customize the arrangement of map components in the same location.\nFor example, we can stack them vertically (`stack = \"vertical\"`, default) or horizontally (`stack = \"horizontal\"`) (@fig-comp-group-2).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_elev) +\n  tm_raster(col.legend = tm_legend(group_id = 1)) +\n  tm_scalebar(group_id = 2) +\n  tm_credits(\"My credits\", group_id = 2) +\n  tm_components(1, position = tm_pos_in(\"right\", \"bottom\")) +\n  tm_components(2, position = tm_pos_in(\"left\", \"top\"), stack = \"horizontal\")\n```\n:::\n\n::: {#fig-comp-group .cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Two groups of map components in different locations](figures/fig-comp-group-1.png){#fig-comp-group-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![Two groups of map components in the same location, one stacked horizontally](figures/fig-comp-group-2.png){#fig-comp-group-2 fig-align='center' width=100%}\n:::\n\nGrouping map components together.\n:::\n\n\n\n\nEach additional map component is placed on the bottom of the previous one if they are in the same location.\nThis can be controlled with the `z` argument of the map component functions -- lower the number the component is placed on the top.\n\n<!-- , frame_combine = FALSE -->\n<!-- equalize = FALSE -->\n<!-- , offset = 0, stack_margin = 1 -->\n<!-- frame = TRUE, bg.color = \"purple\", bg.alpha = 0.5 -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}