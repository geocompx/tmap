{
  "hash": "7dcd734a374f5e10bc296311c77b215f",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# Map components {#sec-map-components}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\nMap components are visual elements that are not directly related to the data-driven map layers while providing additional information or context to the map.\nThey are not tied to the map's coordinates but rather to the map's layout and design.\n@tbl-attr-layers-table shows the list of available map components in **tmap**.\nIt includes functions that draw coordinate grid lines, latitude and longitude graticules, scale bars, north arrows, text annotations, logos, axis labels, and minimaps.\nWe cover and demonstrate these functions in the following sections.\n\n\n\n\n::: {#tbl-attr-layers-table .cell layout-align=\"center\" tbl-cap='Map components in **tmap**.'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_lbzwpy41b8f1ocz3enr9(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_lbzwpy41b8f1ocz3enr9\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_lbzwpy41b8f1ocz3enr9');\n        // Find the row with data-row attribute matching i\n        var targetRow = table.querySelector(`tr [data-row=\"${i}\"]`).closest('tr');\n        var newRow = table.insertRow(targetRow.rowIndex);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        newCell.setAttribute(\"data-col\", \"0\");\n        newCell.setAttribute(\"data-row\", i - 1);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_lbzwpy41b8f1ocz3enr9(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_lbzwpy41b8f1ocz3enr9\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '10', j: 1 },  ], css_id: 'tinytable_css_4io4fd32jm8lxpo8i2z1',}, \n          { positions: [ { i: '0', j: 1 },  ], css_id: 'tinytable_css_lvaok9ny0cmnuu9v1ub7',}, \n          { positions: [ { i: '10', j: 0 },  ], css_id: 'tinytable_css_fj8i7a6pgov4iz0dghed',}, \n          { positions: [ { i: '1', j: 0 }, { i: '2', j: 0 }, { i: '3', j: 0 }, { i: '4', j: 0 }, { i: '5', j: 0 }, { i: '6', j: 0 }, { i: '7', j: 0 }, { i: '8', j: 0 }, { i: '9', j: 0 },  ], css_id: 'tinytable_css_hriimk9js5kju5lj4j71',}, \n          { positions: [ { i: '0', j: 0 },  ], css_id: 'tinytable_css_8upsikl2m15eul1rzwm6',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_lbzwpy41b8f1ocz3enr9(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_4io4fd32jm8lxpo8i2z1, .table th.tinytable_css_4io4fd32jm8lxpo8i2z1 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_lvaok9ny0cmnuu9v1ub7, .table th.tinytable_css_lvaok9ny0cmnuu9v1ub7 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_fj8i7a6pgov4iz0dghed, .table th.tinytable_css_fj8i7a6pgov4iz0dghed { font-family: monospace; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_hriimk9js5kju5lj4j71, .table th.tinytable_css_hriimk9js5kju5lj4j71 { font-family: monospace; }\n      .table td.tinytable_css_8upsikl2m15eul1rzwm6, .table th.tinytable_css_8upsikl2m15eul1rzwm6 { font-family: monospace; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_lbzwpy41b8f1ocz3enr9\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">Function</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">Description</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">tm_grid()</td>\n                  <td data-row=\"1\" data-col=\"1\">draws coordinate grid lines of the coordinate system of the main shape object</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">tm_graticules()</td>\n                  <td data-row=\"2\" data-col=\"1\">draws latitude and longitude graticules</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">tm_scalebar()</td>\n                  <td data-row=\"3\" data-col=\"1\">adds a scale bar</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">tm_compass()</td>\n                  <td data-row=\"4\" data-col=\"1\">adds a compass rose (north arrow)</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">tm_credits()</td>\n                  <td data-row=\"5\" data-col=\"1\">adds a text annotation</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">tm_xlab()</td>\n                  <td data-row=\"6\" data-col=\"1\">adds an x axis labels</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">tm_ylab()</td>\n                  <td data-row=\"7\" data-col=\"1\">adds an y axis labels</td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\">tm_logo()</td>\n                  <td data-row=\"8\" data-col=\"1\">adds a logo</td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">tm_inset</td>\n                  <td data-row=\"9\" data-col=\"1\">adds an inset map or plot</td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\">tm_minimap()</td>\n                  <td data-row=\"10\" data-col=\"1\">adds minimap</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nFor the examples in this section, we will use a simple map of the Slovenia polygon (not shown).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nslo_borders = read_sf(\"data/slovenia/slo_border.gpkg\")\ntm = tm_shape(slo_borders) +\n  tm_polygons()\ntm\n```\n:::\n\n\n\n\n## Grid lines {#sec-grid-lines}\n\nThe **tmap** package offers two ways to draws coordinate lines - `tm_grid()` and `tm_graticules()`.\nThe role of `tm_grid()` is to represent the input dataâ€™s coordinates.\nFor example, the `slo_borders` object's CRS is ETRS89-extended / LAEA Europe with the units in meters (@fig-grids-1), and thus the grid lines are in meters.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_polygons() +\n  tm_grid()\n```\n:::\n\n\n\n\n`tm_graticules()` shows longitude lines (meridians) and latitude lines (parallels), with degrees as units.\nThis can be seen with the degree signs in the labels (@fig-grids-2).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_polygons() +\n  tm_graticules()\n```\n:::\n\n\n\n\nBoth, `tm_grid()` and `tm_graticules()` can be placed above or below the map layers as their position on the map depends on their place in the code.\nWhen `tm_grid()` or `tm_graticules()` is placed after the map layer (e.g., `tm_polygons()`), the grid lines are plotted on the top of the map. \nOn the other hand, when `tm_grid()` or `tm_graticules()` is placed before the map layer code, the grid lines are plotted behind the spatial data (@fig-grids-3).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_borders) +\n  tm_graticules() +\n  tm_polygons()\n```\n:::\n\n\n\n\nGrids and graticules can also be easily customized using several arguments, such as, `x` and `y` (x and y coordinates of the lines), `n.x` and `n.y` (number of horizontal (x) and vertical (y) lines),  `labels.inside.frame`, `ticks`, `lines`\nIt is also possible to customize their appearance, for example, by changing the colors of the lines (`col`), width (`lwd`) or labels' sizes (`labels.size`).\n\n\n\n\n::: {#fig-grids .cell layout-ncol=\"3\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Grid lines](figures/fig-grids-1.png){#fig-grids-1 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![Graticules](figures/fig-grids-2.png){#fig-grids-2 fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![Graticules behind the map layer](figures/fig-grids-3.png){#fig-grids-3 fig-align='center' width=100%}\n:::\n\nExamples of grid lines and graticules.\n:::\n\n\n\n\n## Scale bar {#sec-scale-bar}\n\nScale bar is a graphic indicator of the relation between a distance on a map and the corresponding distance in the real world.\nNowadays, it is more often used than a traditional representative fraction (e.g., 1:10000).\nCompared to the representative fraction, scale bars work correctly on variable screen sizes or different print sizes, as their sizes change together with the rest of the map. \n\nThe `tm_scalebar()` function adds a scale bar.\n<!-- update the below statement:  -->\n<!-- By default, it tries to create a scale bar with the width of 1/4 of the whole map, and fills it with several breaks.  -->\nIt is possible, however, to manually update the values of scale bar's breaks with the `breaks` argument and its size with the `text.size` argument (@fig-scalebar).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_scalebar(breaks = c(0, 15, 30), text.size = 1)\n```\n\n::: {.cell-output-display}\n![A map with a customized scale bar.](figures/fig-scalebar-1.png){#fig-scalebar fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nThe `tm_scalebar()` also has several additional arguments, allowing to modify its colors and position.\n\nImportantly, the scale bar is accurate, depending on a map projection, at standard points or lines only (@sec-proj-types) -- it is never completely correct across the whole map. <!--toDo we need to add an explanation what are standard points and lines in the second chapter!!-->\nThe scale bar distortion increases with the true size of the area we are mapping -- it is less visible on local maps, and very prominent on global maps.\nFor example, try to add a scale bar to a world map seen in the @sec-shapes-and-layers.\nThe created scale bar will be accurate for the equator, but less and less correct going to the north and south poles.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n## North arrow {#sec-north-arrow}\n\nNorth arrow, also known as a map compass or a compass rose, is a prominent orientation indicator pointing to which way is north^[Orientation may also be shown by graticule or grid lines (@sec-grid-lines).].\nThe decision on whether to use north arrows or not usually requires some critical thinking.\nWhile, it can be added to every map, north arrows are not always necessary -- especially on maps of large areas (e.g., continents), where the cardinal directions are obvious for most people.\nThe north arrow is, however, necessary when the north on the map is offset (rotated) and recommended when we want to help orient the map readers. \n\nWe can use the `tm_compass()` function to add the north arrow (@fig-northarrow). \nBy default, its *north* is oriented toward the top of the map (the `north` argument of `0`), and the north arrow is represented by an actual arrow (the `type` argument of `\"arrow\"`).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_compass(type = \"4star\", size = 2, position = c(\"left\", \"top\"))\n```\n\n::: {.cell-output-display}\n![A map with customized north arrow.](figures/fig-northarrow-1.png){#fig-northarrow fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n**tmap** offers also a few other north arrow types, including `\"arrow\"`, `\"4star\"`, `\"8star\"`, `\"radar\"`, and `\"rose\"` (@fig-compasses).\nThe north arrow can be also further customized with the `size`, `show.labels` and `cardinal.directions` arguments, and its colors may be modified (`text.color`, `color.dark`, `color.light`) (@fig-northarrow).\nThe location of the north arrow, by default, is placed automatically, but can also be changed using the `position` argument.\n<!-- to update -->\n<!-- It expects a vector of two values, specifying the x and y coordinates. -->\n<!-- The x coordinate can be set with `\"left\"`, `\"LEFT\"`, `\"center\"`, `\"right\"`, or `\"RIGHT\"`, while the y coordinate uses `\"top\"`, `\"TOP\"`, `\"center\"`, `\"bottom\"`, or `\"BOTTOM\"`. -->\n<!-- The arguments with all letters uppercase result in a position closer to the map frame (without margins). -->\n<!-- Alternatively, `position` can be specified with numeric values between 0 and 1 representing the x and y value of the left bottom corner of the north arrow. -->\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![North arrow types](figures/fig-compasses-1.png){#fig-compasses fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nThe `position` argument also works in the same way in other functions, such as `tm_scalebar()`, `tm_credits()`, `tm_logo()`, and in some of the `tm_layout()` arguments: `legend.position`, `title.position`, or `chart.position`.\n\n## Text annotation {#sec-text-annotation}\n\n<!-- Text on maps serves many purposes - some are related to spatial objects (e.g., text labels, section \\@ref(text)), while other are used to inform the map reader about the presented content (e.g., map title, section \\@ref(layout-elements)). -->\nText annotations, also known as map credits, are used to store additional information about the created map.\nThey can include the source of data, the name of the author, the date of map creation, or information about the map projection.\nText annotations are created with the `tm_credits()` function, which can be used more than one time (@fig-credits).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_credits(\"Data source: \", fontface = \"italic\") +\n  tm_credits(\"Author: \", fontface = \"bold\")\n```\n\n::: {.cell-output-display}\n![A map with placeholders for text annotations.](figures/fig-credits-1.png){#fig-credits fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nThe first argument of `tm_credits()` is the text, which can be spread over multiple lines with the line break symbol `\\n`.\nWhen the created map has several facets (@sec-facets), it is also possible to provide each facet a different text.\nIn that case, a vector of characters is expected, where you can use `\"\"` to omit the credits for specific facets.\nText annotations can also be further customized, by changing their sizes (`size`), colors (`color`), positions, and fonts (@sec-fonts-on-maps).\n\n## Axis labels {#sec-axis-labels}\n\nThe `tm_xlab()` and `tm_ylab()` functions add x and y axis labels to the map.\nThese labels can be used to describe the coordinates of the map, such as longitude and latitude, or faceting variables (@sec-customizing-facets).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_xlab(\"X coordinates\") +\n  tm_ylab(\"Y coordinates\")\n```\n\n::: {.cell-output-display}\n![A map with x and y axis labels.](figures/fig-axis-labels-1.png){#fig-axis-labels fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nBy default, the x and y-axis labels are placed at the bottom and left sides of the map, respectively, in a horizontal orientation.\nThe additional arguments of these functions allow to change the labels' size, color, rotation, space between the labels and the map, and their side.\n\n## Logo {#sec-logo}\n\nLogos on maps can serve a similar purpose as text annotation or accompany them.\nThey can represent your affiliation, funding institution, data sources logos, etc.\nThe `tm_logo()` function adds png images, either from a file or url, to the map (@fig-logos).\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm +\n  tm_logo(\"https://www.r-project.org/logo/Rlogo.png\",\n          height = 2) +\n  tm_logo(c(\"https://www.r-project.org/logo/Rlogo.png\",\n            \"https://www.r-project.org/logo/Rlogo.png\"),\n          height = 1)\n```\n\n::: {.cell-output-display}\n![A map with an array of R logos.](figures/fig-logos-1.png){#fig-logos fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nThere are two ways to use multiple logos.\nMany `tm_logo()` functions will places logos on top of each other, while providing a vector of png files will show them next to each other.\nAdditional arguments include the height of the logo (`height`, the width is scaled automatically) and its position (`position`).\n\n## Minimap {#sec-minimap}\n\nThe minimap is a small overview map that shows the extent of the main map within a larger context.\nThe `tm_minimap()` function adds a minimap of a globe to the main map, as illustrated in @fig-minimap. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm + \n  tm_minimap()\n```\n\n::: {.cell-output-display}\n![A map with a minimap.](figures/fig-minimap-1.png){#fig-minimap fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nThe `tm_minimap()` function is simple and straightforward, but does not offer too many customization options.\nIf you want to create a more advanced minimap, you can use the `tm_inset()` function, which is described in @sec-inset-maps.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}