{
  "hash": "8d563277642b43729f3bd9e6d7e353f6",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# Glossary {#sec-glossary}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {#tbl-glossary .cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_lbzwpy41b8f1ocz3enr9(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_lbzwpy41b8f1ocz3enr9\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_lbzwpy41b8f1ocz3enr9');\n        // Find the row with data-row attribute matching i\n        var targetRow = table.querySelector(`tr [data-row=\"${i}\"]`).closest('tr');\n        var newRow = table.insertRow(targetRow.rowIndex);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        newCell.setAttribute(\"data-col\", \"0\");\n        newCell.setAttribute(\"data-row\", i - 1);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_lbzwpy41b8f1ocz3enr9(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_lbzwpy41b8f1ocz3enr9\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '20', j: 0 }, { i: '20', j: 1 },  ], css_id: 'tinytable_css_hriimk9js5kju5lj4j71',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 },  ], css_id: 'tinytable_css_8upsikl2m15eul1rzwm6',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_lbzwpy41b8f1ocz3enr9(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_hriimk9js5kju5lj4j71, .table th.tinytable_css_hriimk9js5kju5lj4j71 { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_8upsikl2m15eul1rzwm6, .table th.tinytable_css_8upsikl2m15eul1rzwm6 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_lbzwpy41b8f1ocz3enr9\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>..</caption>\n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">Term</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">Explanation</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">Auxiliary map layer</td>\n                  <td data-row=\"1\" data-col=\"1\">An auxiliary (or non-data-driven) map layer is a visual representation of geographic information that does not come from a spatial object, but uses the map's coordinates. Examples: `tm_grid()`/`tm_graticules()` and `tm_basemap()`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">Data-driven map layer</td>\n                  <td data-row=\"2\" data-col=\"1\">A data-driven map layer is a visual representation of a spatial object. E.g., `tm_polygons()` or `tm_raster()`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">Facets</td>\n                  <td data-row=\"3\" data-col=\"1\">Multiple maps in one plot. Also called 'small multiples'.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">Features</td>\n                  <td data-row=\"4\" data-col=\"1\">Elementary spatial data objects. For instance, a row in an `sf` data.frame or a single raster cell.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">Glyph</td>\n                  <td data-row=\"5\" data-col=\"1\">Mini charts that are used as proportional symbols. See the extension package `tmap.glyphs`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"6\" data-col=\"0\">Layout</td>\n                  <td data-row=\"6\" data-col=\"1\">All aspects that specify the plot apart from the map layers and map components. Examples: margins, background color, aspect ratio, font sizes, etc. These can be set via `tm_layout`. These layout options form a subset of all tmap options (see **options**).</td>\n                </tr>\n                <tr>\n                  <td data-row=\"7\" data-col=\"0\">Map component</td>\n                  <td data-row=\"7\" data-col=\"1\">A visual plot object with a position independent of map coordinates. Examples: a legend, a compass, a title.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"8\" data-col=\"0\">Map layer</td>\n                  <td data-row=\"8\" data-col=\"1\">A map layer is a visual representation of geographical information. We distinguish two types: *data-driven* and *auxiliary* map layers. The former requires spatial objects whereas the latter only the geographic information (bounding box and coordinate reference system).</td>\n                </tr>\n                <tr>\n                  <td data-row=\"9\" data-col=\"0\">Options</td>\n                  <td data-row=\"9\" data-col=\"1\">In the context of tmap, we refer to the options as settings, which can be configured using `tm_options`. These can be *layout* options (see **layout**) or otherwise (e.g., `'show.messages'`).</td>\n                </tr>\n                <tr>\n                  <td data-row=\"10\" data-col=\"0\">Proportional symbols</td>\n                  <td data-row=\"10\" data-col=\"1\">Proportional symbols are symbols that are drawn at geographic locations and that are sized proportionally with a data variable. The result is known as a 'proportional symbol map'. These symbols are usually bubbles (filled circles), but can also be small charts, called **glyphs**.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"11\" data-col=\"0\">Scale function</td>\n                  <td data-row=\"11\" data-col=\"1\">A scale function determines how to scale a data variable to either a visual variable or a transformation variable. Examples: `tm_scale_continuous`, `tm_scale_categorical`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"12\" data-col=\"0\">tmap element</td>\n                  <td data-row=\"12\" data-col=\"1\">A `tm_` object that can be stacked with the `+` operator. These are: `tm_shape()`, map layer functions (such as `tm_polygons()`), facet specification function `tm_facets()`, map components (such as `tm_compass()`), and layout/option specification functions, such as `tm_layout()`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"13\" data-col=\"0\">Shape (object)</td>\n                  <td data-row=\"13\" data-col=\"1\">'Shape' is a nickname for a spatial data object. It is used in `tm_shape()`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"14\" data-col=\"0\">Shape (visual variable)</td>\n                  <td data-row=\"14\" data-col=\"1\">The shape is a visual variable for some map layer functions, most prominently `tm_symbols()`. It determines the shape/design of the symbols.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"15\" data-col=\"0\">Style</td>\n                  <td data-row=\"15\" data-col=\"1\">The overall layout of the map. Similar to ggplot2's 'theme' (see **theme**).</td>\n                </tr>\n                <tr>\n                  <td data-row=\"16\" data-col=\"0\">Theme</td>\n                  <td data-row=\"16\" data-col=\"1\">tmap stands for 'thematic maps', where *theme* refers to the topic of the data plotted on a map. Note that in ggplot2, a 'theme' refers to the overall layout, e.g. `ggplot2::theme_minimal()`. In tmap, we use **style** for this.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"17\" data-col=\"0\">Transformation variable</td>\n                  <td data-row=\"17\" data-col=\"1\">A variable of a data-driven map layer that determines a *transformation* of the spatial object. (TO DO: exact definition). For instance, `tm_cartogram(size = \"var\")`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"18\" data-col=\"0\">Visual variable</td>\n                  <td data-row=\"18\" data-col=\"1\">A variable of a data-driven map layer that determines a *visual* aspect. This can be data-driven, e.g. `tm_polygons(fill = \"var\")`, where `var` is the name of an `sf` column, or a constant value, such as `tm_polygons(fill = \"blue\")`.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"19\" data-col=\"0\">Chart</td>\n                  <td data-row=\"19\" data-col=\"1\">A small non-spatial data visualization. In tmap for several purposes: 1) an addition to a legend `tm_polygons(fill = \"var\", fill.chart = tm_chart_histogram())`, 2) a glyph (see **glyphs**), 3) a custom chart plotted as an inset.</td>\n                </tr>\n                <tr>\n                  <td data-row=\"20\" data-col=\"0\">Inset</td>\n                  <td data-row=\"20\" data-col=\"1\">A visual object that is plotted on a specific (pre-defined) location. It can be a small map (**minimap**) or a **chart**.</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}