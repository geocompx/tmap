{
  "hash": "0ae6d58306565eaa86e35b7022c5ebfa",
  "result": {
    "engine": "knitr",
    "markdown": "\n::: {.cell}\n\n:::\n\n\n# Visual variables {#sec-visual-variables}\n\n\\index{visual variables}\nVisual variables are methods to translate information given in variables into many types of visualizations, including maps.\nBasic visual variables are color, size, and shape^[Other visual variables include position, orientation, and texture.].\nAll of them can influence our perception and understanding of the presented information; therefore, it is worth understanding when and how they can be used.\n\nThe use of visual variables on maps depends on two main things: (a) the type of the presented variable, and (b) the type of the map layer (@sec-const-visual-variables; @sec-auto-scales).\n\n<!-- alpha? -->\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Basic visual variables and their representations on maps](figures/fig-visual-variables-1.png){#fig-visual-variables fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n\\index{color}\n\\index{size}\n\\index{shape}\n@fig-visual-variables shows examples of different visual variables.\nColor is the most universal visual variable (@sec-colors).\nIt can represent both qualitative (categorical) and quantitative (numerical) variables, and we can also color symbols, lines, or polygon fillings.\nSizes, on the other hand, focus on quantitative variables.\nSmall symbols could represent low values of a given variable, and the higher the value, the larger the symbol.\nQuantitative values of line data can be shown with the widths of the lines (@sec-sizes).\nThe use of shapes usually should be limited to qualitative variables, and different shapes can represent different categories of points (@sec-shapes).\nSimilarly, qualitative variables in lines can be presented by different line types.\nValues of polygons usually cannot be represented by either shapes or sizes, as these two features are connected to the geometries of the objects.\n<!-- exception - cartograms - ref to other chapter \\@ref(other-types) -->\nFinally, there are some cases in which we can use several visual variables at the same time (@sec-mixing-visual-variables).\n\nLet's start by attaching the packages and reading the data we use in this chapter.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tmap)\nlibrary(sf)\nslo_regions = read_sf(\"data/slovenia/slo_regions.gpkg\")\nslo_cities = read_sf(\"data/slovenia/slo_cities.gpkg\")\n```\n:::\n\n\n## Constant visual values {#sec-const-visual-variables}\n\nBefore we use visual variables, it is worth reminding that we can set constant values for visual variables: fill, color, size, and shape for all objects on the map.\nFor example, with `tm_polygons()` we can fill all polygons with the same color, and set borders to the specified color, width, and type (@fig-colorscales1).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"lightblue\", \n              col = \"black\",\n              lwd = 0.5,\n              lty = \"dashed\")\n```\n\n::: {.cell-output-display}\n![Example of a map with all polygons filled with the same color.](figures/fig-colorscales1-1.png){#fig-colorscales1 fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nAdditionally, for polygons, we can set the fill color in such a way that adjacent polygons do not get the same color (@fig-colorscalesmc).\nThis is done by setting the `fill` argument to `\"MAP_COLORS\"`.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Example of a map with adjacent polygons having different colors.](figures/fig-colorscalesmc-1.png){#fig-colorscalesmc fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n<!-- ??? -->\n<!-- In this case, it is also possible to change the default colors with the `palette` argument, but also to activate the internal algorithm to search for a minimal number of colors for visualization by setting `minimize = TRUE`. -->\n\n## Automatic scales {#sec-auto-scales}\n\n\\index{automatic scales}\n\\index{tm\\_scale}\nOn the other hand, if we provide the name of the column (variable) we want to visualize, **tmap** automatically sets the visual variables.\nThe **tmap** package has many defaults that automatically specify colors, sizes, and shapes used on the maps. \nThus, for example, when we provide a character variable's name to the `fill` argument, then the color scale for a categorical variable is set, and when we give a numeric variable's name to the `size` argument, then the size scale for a continuous variable is used.\nHowever, **tmap** also allows us to change them with a few additional functions, including `tm_scale()` and `tm_legend()`.\nIn this and the following sections, we show how to use the `tm_scale()` function to modify the appearance of the visual variables.\nIn the next two chapters, we further discuss various types of scales and ways to modify them and the legend appearance.\n\nThe most basic use of the `tm_scale()` function is to modify the appearance of the map, such as changing the color palette (`col.scale` and `fill.scale`), sizes (`size.scale`), or shapes (`shape.scale`).\nThis is done with the `values` argument of each of these functions, which can be one of many things, depending on the visual variable.\nFor example, for colors, it can be a vector of colors, a palette function, or a name of a built-in palette; for sizes, it can be a numerical variable; and for shapes, it can be a custom icon or a numerical variable (@fig-tmscalevals).\n\n\n::: {#fig-tmscalevals .cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(fill = \"population\",\n             fill.scale = tm_scale(values = \"greens\"))\ntm_shape(slo_cities) +\n  tm_symbols(col = \"population\",\n             col.scale = tm_scale(values = c(\"red\", \"blue\")))\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\",\n             size.scale = tm_scale(values = 1:5))\ntm_shape(slo_cities) + \n  tm_symbols(shape = \"population\", \n             shape.scale = tm_scale(values = 1:6))\n```\n\n::: {.cell-output-display}\n![name of a build-in color palette](figures/fig-tmscalevals-1.png){#fig-tmscalevals-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![vector of colors](figures/fig-tmscalevals-2.png){#fig-tmscalevals-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![numerical variable for sizes](figures/fig-tmscalevals-3.png){#fig-tmscalevals-3 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![numerical variable for shapes](figures/fig-tmscalevals-4.png){#fig-tmscalevals-4 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of various ways of specifying values for visual variables.\n:::\n\n\nThe following sections @sec-colors, @sec-sizes, and @sec-shapes explain the basic visual variables.\nNext, they show how to set colors, sizes, and shapes for different types of spatial objects.\n\n## Colors {#sec-colors}\n\n\\index{colors}\nColors, along with sizes and shapes, are the most often used to express values of attributes or their properties.\nProper use of colors draws the attention of viewers and has a positive impact on the clarity of the presented information. \nOn the other hand, poor decisions about colors can lead to misinterpretation of the map.\n\n\\index{color palettes}\n<!-- reference this bp - https://earthobservatory.nasa.gov/blogs/elegantfigures/2013/08/06/subtleties-of-color-part-2-of-6/ -->\n<!-- https://en.wikipedia.org/wiki/Color_scheme -->\n\\index{colors}\n\\index{hexadecimal form}\nColors in R are created based either on the color name or its hexadecimal form.\nR understands 657 built-in color names, such as `\"red\"`, `\"lightblue\"` or `\"gray90\"`, that are available using the `colors()` function.\n<!-- demo(\"colors\") -->\n<!-- http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf -->\nHexadecimal form, on the other hand, can represent 16,777,216 unique colors.\nIt consists of six digits prefixed by the `#` (hash) symbol, where red, green, and blue values are each represented by two characters.\nIn hexadecimal form, `00` is interpreted as `0.0`, which means a lack of a particular color, and `FF` means `1.0` and shows that the given color has maximal intensity.\nFor example, `#000000` represents black color, `#FFFFFF` white color, and `#00FF00` green color.\n\nUsing a single color, we are able to draw points, lines, polygon borders, or their areas.\nIn that scenario, all of the elements will have the same color. \nHowever, often, we want to represent different values in our data using different colors. \nThis is a role for color palettes -- a set of colors used to distinguish the values of variables on maps.\n\n\\index{color palettes}\nColor palettes in R are usually stored as a vector of either color names or hexadecimal representations.\nFor example, `c(\"red\", \"green\", \"blue\")` or `c(\"#66C2A5\", \"#FC8D62\", \"#8DA0CB\")`.\nIt allows everyone of us to create our own color palettes. \nHowever, the decision on how to select which colors to use is not straightforward and usually requires considering several factors.\n\n\\index{color properties}\nFirstly, what kind of variable we want to show? \n<!-- a next sentence is a simplification, as always -->\nIs it a <!--qualitative-->categorical variable where each value represents a <!--orderless-->group or a <!--quantitative-->numerical variable in which values have order?\n<!-- http://colorspace.r-forge.r-project.org/articles/palette_visualization.html -->\nThe variable type impacts how it should be presented on the map.\nFor categorical variables, each color usually should receive the same perceptual weight, which is done by using colors with the same brightness<!--luminance-->, but different hue<!--type of color-->.\nOn the other hand, for numerical variables, we should easily understand which colors represent lower and which represent higher values.\nThis is done by manipulating colorfulness<!--chroma,saturation--> and brightness<!--luminance-->.\nFor example, low values could be presented by a blue color with low colorfulness and high brightness, and with growing values, colorfulness increases, and brightness decreases. \n\n\\index{color perception}\nThe next consideration is related to how people perceive colors.\nUsually, we want them to be able to preliminarily understand which values the colors represent without looking at the legend -- colors should be intuitive.\nFor example, in the case of categorical variables representing land use, we usually want to use some type of blue color for rivers, green for trees, and white for ice.\nThis idea also extends to numerical variables, where we should think about the association between colors and cultural values.\nThe blue color is usually connected to cold temperatures, while the red color is hot or can represent danger or something not good.\nHowever, we need to be aware that the connection between colors and cultural values varies between cultures, and need to adjust them to the target audience.\n<!-- http://uxblog.idvsolutions.com/2013/07/language-and-color.html -->\n\n\\index{color blindness}\nAnother thing to consider is to use a color palette that is accessible for people with color vision deficiencies (*color blindness*).\n<!-- https://en.wikipedia.org/wiki/Color_blindness -->\nThere are several types of color blindness, with red-green color blindness (*deuteranomaly*) being the most common.\nIt is estimated that up to about 8% of the male population and about 0.5% of the female population in some regions of the world is color blind [@birch_worldwide_2012;@sharpe_opsin_1999].\n<!-- tools in R for checking for colorblindness -->\nSome color palettes should be avoided, such as the \"rainbow\" palette, which is not suitable for people with color blindness, and, on the other hand, there are many color palettes that are designed to be accessible for people with color blindness.\n<!-- examples? -->\n\n<!-- Simultaneous contrast; background color, etc.-->\nThe relation between the selected color palette and other map elements or the map background should also be taken into consideration.\nUsing a bright or dark background color on a map affects how people perceive different color palettes.\nFor example, a dark background can make bright lines or points stand out, while a light background can make dark colors more visible.\nMoreover, when using two or more color palettes on the same map, we should ensure that they are complementary to keep the map readable and consistent.\n\n<!-- should we add: (?) -->\n<!-- aesthetic -->\n<!-- hard to grasp, hard to learn, look for good examples and be inspired -->\n\n\\index{color palettes}\nGenerally, color palettes can be divided into three main types (@fig-palette-types):\n\n- **Categorical** (also known as qualitative): used for presenting categorical information, such as categories or groups. \nEvery color in this type of palette should receive the same perceptual weight, and the order of colors is meaningless.\nCategorical color palettes are usually limited to a dozen or so different colors, as our eyes have problems with distinguishing a large number of different hues. \nTheir use includes, for example, regions of the world or land cover categories.\n- **Sequential**: used for presenting continuous variables, in which order matters.\nColors in this palette type change from low to high (or vice versa), which is usually underlined by luminance differences (light-dark contrasts).\nSequential palettes can be found in maps of GDP, population density, elevation, and many others.\n- **Diverging**: used for presenting continuous variables, but where colors diverge from a central neutral value to two extremes.\nTherefore, in a sense, they consist of two sequential palettes that meet at the midpoint value.\nExamples of diverging palettes include maps where a certain temperature or median value of household income is used as the midpoint.\nIt can also be used on maps to represent differences or change as well. \n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n<!-- idea: replace one diverging palette with the dark in the middle ?? -->\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Examples of three main types of color palettes: categorical, sequential, and diverging.](figures/fig-palette-types-1.png){#fig-palette-types fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n\\index{color palettes}\nGladly, a lot of work has been put into creating color palettes that are grounded in the research of perception and design.\nCurrently, [several dozens of R packages](https://github.com/EmilHvitfeldt/r-color-palettes) contains hundreds of color palettes. \nThe most popular among them are **RColorBrewer** [@R-RColorBrewer] and **viridis** [@R-viridis].\n**RColorBrewer** builds upon a set of perceptually ordered color palettes [@harrower_colorbrewer_2003] and the associated website at <https://colorbrewer2.org>.\nThe website not only presents all of the available color palettes, but also allows filtering them based on their properties, such as being colorblind safe or print-friendly.\nThe **viridis** package has five color palettes that are perceptually uniform and suitable for people with color blindness.\nFour palettes in this package (\"viridis\", \"magma\", \"plasma\", and \"inferno\") are derived from the work on the color palettes for [the matplotlib Python library](http://bids.github.io/colormap/).\nThe last one, \"cividis\", is based on the work of @nunez_optimizing_2018.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nRColorBrewer::brewer.pal(7, \"RdBu\")\n#> [1] \"#B2182B\" \"#EF8A62\" \"#FDDBC7\" \"#F7F7F7\" \"#D1E5F0\" \"#67A9CF\" \"#2166AC\"\nviridis::viridis(7)\n#> [1] \"#440154FF\" \"#443A83FF\" \"#31688EFF\" \"#21908CFF\" \"#35B779FF\" \"#8FD744FF\"\n#> [7] \"#FDE725FF\"\n```\n:::\n\n\n\\index{color palettes}\nIn the last few years, the **grDevices** package that is an internal part of R, has received several improvements in color palette handling.^[Learn more about them at <https://developer.r-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/> and <https://developer.r-project.org/Blog/public/2019/11/21/a-new-palette-for-r/index.html>.]\nIt includes the creation of `hcl.colors()` and `palette.colors()`.\nThe `hcl.colors()` function [incorporates color palettes from several R packages](http://colorspace.r-forge.r-project.org/articles/approximations.html), including **RColorBrewer**, **viridis**, **rcartocolor** [@carto_cartocolors_2019;@R-rcartocolor], and **scico** [@crameri_geodynamic_2018;@R-scico].\nYou can get the list of available palette names for `hcl.colors()` using the `hcl.pals()` function and visualize all of the palettes with `colorspace::hcl_palettes(plot = TRUE)`.\nThe `palette.colors()` function adds [several palettes for categorical data](https://developer.r-project.org/Blog/public/2019/11/21/a-new-palette-for-r/index.html).\nIt includes `\"Okabe-Ito\"` [suited for color vision deficiencies](https://jfly.uni-koeln.de/color/) or `\"Polychrome 36\"` that has 36 unique colors [@coombes_polychrome_2019]. \nYou can find the available names of the palettes for this function using `palette.pals()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrDevices::hcl.colors(7, \"Oslo\")\n#> [1] \"#FCFCFC\" \"#C2CEE8\" \"#86A2D3\" \"#3C79C0\" \"#275182\" \"#132B48\" \"#040404\"\ngrDevices::palette.colors(7, \"Okabe-Ito\")\n#> [1] \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\"\n```\n:::\n\n\nThe **cols4all** package <!--ref--> is a set of tools for selecting color palettes; it also includes all of the groups of color palettes mentioned above and more.\nIts main function is `cols4all::c4a_gui()` that starts an interactive application allowing to see and examine hundreds of color palettes and their properties.\nEach color palette shown `cols4all::c4a_gui()` can be used in **tmap**.\n\n\\index{color palettes!rainbow}\nOne of the most widely used color palettes is \"rainbow\" (the `rainbow()` function in R).\nIt was inspired by the colors of a rainbow -- a set of seven colors going from red to violet.\nHowever, this palette has a number of disadvantages, including irregular changes in brightness affecting its interpretation or being unsuitable for people with color vision deficiencies [@borland_rainbow_2007;@stauffer_somewhere_2015;@quinan_examining_2019]. \nDepending on a given situation, there are many palettes better suited for visualization than \"rainbow\", including sequential `\"viridis\"` and `\"ag_sunset\"` or diverging `\"pu_gn\"` and `\"geyser\"`.\nAll of them can be specified in **tmap**.^[You can also derive them using `cols4all::c4a()` function.]\nMore examples showing alternatives to the \"rainbow\" palette are in the documentation of the **colorspace** package at \n<https://colorspace.r-forge.r-project.org/articles/endrainbow.html> [@R-colorspace].\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nBy default, the **tmap** package attempts to identify the type of variable used. \nFor example, it uses `\"area7\"` for a categorical (unordered) variable, `\"blues3\"` for a sequential variable, and \"`pu_gn`\" for a diverging one (@fig-tmpals).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) + \n  tm_polygons(\"pop_dens\")\n```\n:::\n\n\nThere are three main ways to specify color palettes as an `values` argument of the `tm_scale()` family of functions.\nThis argument accepts (1) a vector of colors, (2) a palette function, or (3) one of the built-in palette names (@fig-tmpals).\nA vector of colors can be specified using color names or hexadecimal representations (@fig-tmpals).\nImportantly, the length of the provided vector does not need to be equal to the number of colors in the map legend. \n**tmap** automatically interpolates new colors when a smaller number of colors is provided.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(\"pop_dens\",\n              fill.scale = tm_scale(values = c(\"yellow\", \"darkgreen\")))\n```\n:::\n\n\nAnother approach is to provide the output of a palette function (@fig-tmpals).\nIn the example below, we derived seven colors from `\"ag_GrnYl\"` palette.\nThis palette goes from green colors to yellow ones, however, we wanted to reverse the order of this palette.\nThus, we also used the `rev()` function here. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_pal = rev(hcl.colors(7, \"ag_GrnYl\"))\ntm_shape(slo_regions) +\n  tm_polygons(\"pop_dens\", \n              fill.scale = tm_scale(values = my_pal))\n```\n:::\n\n\nThe last approach is to use one of the names of color palettes built in **tmap** (@fig-tmpals).\nIn this example, we used the `\"brewer.yl_gn\"` palette that goes from yellow to green.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) +\n  tm_polygons(\"pop_dens\",\n              fill.scale = tm_scale(values = \"brewer.yl_gn\"))\n```\n:::\n\n\nIt is also possible to reverse the order of any named color palette by using the `-` prefix^[In general, the darker the color, the larger the value it represents. This rule applies to sequential color palettes, when the background color is light. However, when the background color is dark, the rule is reversed, and the darker colors should represent lower values.].\nTherefore, `\"-yl_gn\"` returns a palette going from green to yellow.\n\n\n::: {#fig-tmpals .cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![default sequential color palette](figures/fig-tmpals-1.png){#fig-tmpals-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![palette created based on provided vector of colors](figures/fig-tmpals-2.png){#fig-tmpals-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![palette created using the `hcl.colors()` function](figures/fig-tmpals-3.png){#fig-tmpals-3 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![one of the build-in palettes](figures/fig-tmpals-4.png){#fig-tmpals-4 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of four ways of specifying color palettes.\n:::\n\n<!-- state that the above example of setting colors works for most of palettes -->\n\n<!-- midpoint argument -->\nThe default color palette for positive numerical variables is `\"blues3\"` as seen in @fig-tmmidpoint-1.\nOn the other hand, when the given variable has both negative and positive values, then **tmap** uses the `\"pu_gn\"` color palette, with purple colors below the midpoint value, light gray color around the midpoint value, and green colors above the midpoint value.\nThe use of diverging color palettes can be adjusted using the `midpoint` argument. \nIt has a value of 0 as the default, however, it is possible to change it to any other value.\nFor example, we want to create a map that shows regions with population density (`pop_dens`) below and above the median value of about 101 people per square kilometer.\nTo do that, we just need to set the `midpoint` argument to this value (@fig-tmmidpoint-2).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# mean(slo_regions$pop_dens, na.rm = TRUE)\ntm_shape(slo_regions) +\n  tm_polygons(fill = \"pop_dens\", \n              fill.scale = tm_scale(midpoint = 101))\n```\n:::\n\n\n\n::: {#fig-tmmidpoint .cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![default sequential color palette](figures/fig-tmmidpoint-1.png){#fig-tmmidpoint-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![diverging color palette around the midpoint value of 73](figures/fig-tmmidpoint-2.png){#fig-tmmidpoint-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of maps with different midpoints used.\n:::\n\n\nNow, the regions with low population density are presented with purple colors, light gray areas represent countries with population density around the median value (the `midpoint` in our case), and the regions with high population density are represented by green colors.\n\nThe above examples all contain several polygons with missing values of a given variable.\nObjects with missing values are, by default, represented by gray color and a related legend label *Missing*.\nHowever, it is possible to change this color with the `value.na` argument and its label with `label.na`.\n\n**tmap** has a special way to manually set colors for categorical maps.\nIt works by providing a named vector to the `values` argument.\nIn this vector, the names of the categories from the categorical variable are the vector names, and specified colors are the vector values.\nYou can see it in the example below, where we plot the `\"region_group\"` categorical variable (@fig-tmcatpals).\nEach category in this variable (e.g., `\"Central\"`) has a new, connected color (e.g., `\"#7fbee9\"`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_regions) + \n  tm_polygons(\"region_group\", \n    fill.scale = tm_scale(values = c(\n      \"Central\" = \"#7fbee9\",\n      \"East\" = \"#ffd14d\", \n      \"North\" = \"#14909a\",\n      \"South\" = \"#df5454\",\n      \"West\" = \"#7b1072\")\n    ))\n```\n\n::: {.cell-output-display}\n![An example of a categorical map with manually selected colors.](figures/fig-tmcatpals-1.png){#fig-tmcatpals fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\\index{color palettes!transparency}\nFinally, visualized colors can be additionally modified.\nIt includes setting the `col_alpha` and `fill_alpha` arguments that represent the transparency of the used colors.\nBy default, the colors are not transparent at all as the value of `col_alpha` and `fill_alpha` is 1.\nHowever, we can decrease this value to 0 -- total transparency.\nThe `col_alpha` and `fill_alpha` arguments are useful in two ways: one -- they allow us to see through some large objects (e.g., some points below the polygons or a hillshade map behind the colored raster of elevation), second -- they make colors more subtle.\n\n<!-- idea: add bivariate/trivariate scheme -->\n<!-- add ord, cyc, biv -->\n\n<!-- alpha figure? -->\n<!-- info that colors can be used to highlight somethings?? -->\n\n<!-- resources: -->\n<!-- https://bookdown.org/hneth/ds4psy/D-2-apx-colors-essentials.html -->\n<!-- https://developer.r-project.org/Blog/public/2019/11/21/a-new-palette-for-r/index.html -->\n<!-- add some references about colors theory, color blindness, etc. -->\n<!-- https://earthobservatory.nasa.gov/blogs/elegantfigures/2013/09/10/subtleties-of-color-part-6-of-6/ -->\n\n## Sizes {#sec-sizes}\n\n\\index{sizes}\n\\index{tm\\_symbols}\nDifferences in size between objects are relatively easy to recognize on maps. \nSizes can be used for points, lines (line widths), or text to represent quantitative (numerical) variables, where small values are related to small objects and large values are represented by large objects.\nLarge sizes can also be used to attract viewers' attention.\n\nBy default, **t**maps present points, lines, or text objects of the same size. \nFor example, `tm_symbols()` returns a map where each object is a circle with a consistent size^[The default value of size is 1, which corresponds to the area of symbols that have the same height as one line of text.].\nWe can change the sizes of all objects using the `size` argument (@fig-tmsizes-1).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(size = 0.5) \n```\n:::\n\n\nOn the other hand, if we provide the name of the numerical variable in the `size` argument (e.g., `\"population\"`), then symbol sizes are scaled proportionally to the provided values.\nObjects with small values are represented by smaller circles, while larger values are represented by larger circles (@fig-tmsizes-2).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\") \n```\n:::\n\n\n<!-- numeric only -->\n<!-- size.max\t -->\n<!-- size.lim\t -->\n<!-- sizes.legend\t -->\n<!-- sizes.legend.labels\t -->\n\nWe can adjust size legend breaks with `ticks` and the corresponding labels with `labels` (@fig-tmsizes-3) as arguments of the `tm_scale()` function provided to the `size.scale` argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\",\n             size.scale = tm_scale(ticks = c(50000, 300000),\n                                   labels = c(\"small\", \"large\")))\n```\n:::\n\n\nFor example in the above code, we just show examples of how symbols with population values of 50,000 and 300,000 are represented on the map.\n\n\n::: {#fig-tmsizes .cell layout-nrow=\"3\" layout-align=\"center\"}\n::: {.cell-output-display}\n![all symbols have a consistent size of 0.5](figures/fig-tmsizes-1.png){#fig-tmsizes-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![sizes of symbols depend on the values of the population variable](figures/fig-tmsizes-2.png){#fig-tmsizes-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![sizes of symbols have a manually created legend](figures/fig-tmsizes-3.png){#fig-tmsizes-3 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of three approaches for changing sizes of symbols.\n:::\n\n\n\\index{widths}\n\\index{tm\\_lines}\nWidths of the lines can represent values of numerical variables for line data similar to sizes of the symbols for point data.\nThe `lwd` argument in `tm_lines()` creates thin lines for small values and thick lines for large values of the given variable (@fig-tmlwd).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nslo_railroads = read_sf(\"data/slovenia/slo_railroads.gpkg\")\ntm_shape(slo_railroads) + \n  tm_lines(lwd = \"track_width\")\n```\n\n::: {.cell-output-display}\n![Example of a map where lines' widths represent values of the corresponding lines.](figures/fig-tmlwd-1.png){#fig-tmlwd fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\nIn the above example, values of the `\"track_width\"` are divided into five groups and represented by five line widths.\nLines' thickness can be change using the `values.scale` argument of `tm_scale()`, where the value of 1 is the default, and increasing this values increases lines' thickness.\n\n<!-- how about trying some transportation examples here (and expanding them)? -->\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\\index{text}\n\\index{tm\\_text}\nText labels have a role in naming features on a map or just highlighting some of them.\nUsually, the size of text labels is consistent for the same spatial objects.\nHowever, text labels can also be used to represent the values of some numerical variables.\n@fig-tmtextsize shows an example, in which text labels show names of different `slo_cities`, while their sizes are related to their populations.\nThis allows us to not only locate different cities on the map but also differentiate between less populous areas and more populous ones.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_text(text = \"name\", size = \"population\") +\n  tm_layout(legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![Example of a map where text sizes represent elevations of the slo_cities.](figures/fig-tmtextsize-1.png){#fig-tmtextsize fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n<!-- sizes.legend -->\n<!-- sizes.legend.labels -->\n<!-- sizes.legend.text -->\n\n<!-- again - mention other map types - cartograms, hexmaps, etc., which even impact of polygon sizes -->\n\n## Shapes {#sec-shapes}\n\n\\index{shapes}\nShapes allow for representing different categories of point data.\nThey can be very generic, e.g., a circle or square, just to differentiate between categories, but often we use symbols that we associate with different types of features. \nFor example, we use the letter *P* for parking lots, *I* for information centers, an airplane symbol for airports, or a bus symbol for bus stops.\n\nTo use different shapes, we should use the `shape` argument in the `tm_symbols()` function.\nIt expects the name of the categorical variable, such as `\"place\"` in the example below (@fig-tmsymshape-1).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\")\n```\n:::\n\n\n<!-- tmap::tmap_options()$values.var$shape -->\nBy default, **tmap** uses symbols of filled circle, square, diamond, point-up triangle, and point-down triangle^[They are represented in R by numbers from 21 to 25.]. \nHowever, it is also possible to customize the used symbols, their title, and labels.\nLegend titles related to shapes and their labels are modified with the `shape.legend` argument.\n\nShapes are specified with the `shape.scale` argument -- there we can set the `values` argument with three different approaches: a vector of numbers, R graphic objects, or icons.\nThe first one is a numeric value that specifies the plotting character of the symbol (@fig-tmsymshape-2).\nA complete list of available symbols and their corresponding numbers is in the `?pch` function's documentation.\n<!--JN: or should we add a figure with them here??-->\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\",\n             shape.scale = tm_scale(values = c(0, 2)))\n```\n:::\n\n\n\\index{graphic objects}\nThe second option is to use a *gr*aphic *ob*ject (*grob*).\nIt is a low-level graphical object in R that can be used to create custom shapes.\n<!-- add intro what are grobs -->\n<!-- add reference to some section explaining tmap_grob (chapter 10??) -->\nIn the code below, we create two grob objects: a circle and a rectangle with custom sizes and colors.\nThen, we specify them in the `shape.scale` argument of the `tm_symbols()` function -- see @fig-tmsymshape-3.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# a circle\np1 = grid::circleGrob(r = 0.25, \n                      gp = grid::gpar(fill = \"skyblue\", col = \"darkblue\"))\n# a rectangle\np2 = grid::rectGrob(width = 0.5, height = 0.5, \n                    gp = grid::gpar(fill = \"lightgreen\", col = \"darkgreen\"))\n\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\",\n             shape.scale = tm_scale(values = list(p1, p2)))\n```\n:::\n\n\n\\index{icons}\n\\index{tmap\\_icons}\nThe last possibility is to use an icon specification created with the `tmap_icons()` function, which uses any PNG images.\nThe `tmap_icons()` function accepts a vector of file paths or URLs, and also allows setting the width and height of the icon.\nIn our example, we have two groups, therefore we need to create new icons based on two images -- `icon1.png` and `icon2.png` in this case.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_icons = tmap_icons(c(\"data/icon1.png\", \"data/icon2.png\"))\n```\n:::\n\n\nNow, we can use the prepared icons in the `shape.scale` argument (@fig-tmsymshape-4).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(shape = \"place\",\n             shape.scale = tm_scale(values = my_icons))\n```\n:::\n\n\n\n::: {#fig-tmsymshape .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![default symbols](figures/fig-tmsymshape-1.png){#fig-tmsymshape-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![user-defined symbols](figures/fig-tmsymshape-2.png){#fig-tmsymshape-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![grob objects](figures/fig-tmsymshape-3.png){#fig-tmsymshape-3 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![icons](figures/fig-tmsymshape-4.png){#fig-tmsymshape-4 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of maps with different symbols.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Mixing visual variables {#sec-mixing-visual-variables}\n\nThe values of a given variable can be expressed by different categorical or sequential colors in polygons.\nLines can also be colored by one variable, but also the widths of the lines can represent values of another quantitative variable.\nWhen we use symbols, we are able to use colors for one qualitative or quantitative variable, sizes for a quantitative variable, and shapes for another qualitative variable.\nTherefore, it is possible to mix some visual variables for symbols and lines.\nThis section shows only some possible examples of mixing visual variables.\n\n@fig-mixsymb-1 shows symbols, whose sizes are scaled based on the `population` variable, and they are colored using the values from `place`.\nThis can be set with the `size` and `fill` arguments.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(size = \"population\",\n             fill = \"place\")\n```\n:::\n\n\nWe can also modify all of the visual variables using the additional arguments explained in the next chapters.\nFor example, we can set the color style, color palette, or specify shapes (@fig-mixsymb-2).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntm_shape(slo_cities) +\n  tm_symbols(fill = \"population\",\n             fill.scale = tm_scale(values = \"Greens\"),\n             shape = \"place\",\n             shape.scale = tm_scale(values = c(23, 24, 25)))\n```\n:::\n\n\n\n::: {#fig-mixsymb .cell layout-nrow=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![size and fill](figures/fig-mixsymb-1.png){#fig-mixsymb-1 fig-align='center' fig-pos='t' width=100%}\n:::\n\n::: {.cell-output-display}\n![fill and shape](figures/fig-mixsymb-2.png){#fig-mixsymb-2 fig-align='center' fig-pos='t' width=100%}\n:::\n\nExamples of maps using two visual variables at the same time.\n:::\n\n\nFor line data, we can present its qualitative and quantitative variables using colors and quantitative variables using sizes (line widths) (@fig-mixline).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A map using two visual variables, color, and size (line width), at the same time.](figures/fig-mixline-1.png){#fig-mixline fig-align='center' fig-pos='t' width=100%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}