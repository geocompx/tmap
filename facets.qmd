```{r facets-1}
#| echo: false
source("code/before_script.R")
```

# Facets {#sec-facets}

\index{facets}
\index{small multiples}
<!-- also known as small-multiples -->

<!-- should we limit to e.g., 5 years? -->

```{r facets-2}
#| message: false
library(sf)
library(tmap)
slo_borders = read_sf("data/slovenia/slo_border.gpkg")
slo_regions = read_sf("data/slovenia/slo_regions.gpkg")
slo_regions_ts = read_sf("data/slovenia/slo_regions_ts.gpkg")
slo_regions_ts = subset(slo_regions_ts, time %in% c("2006", "2010", "2014", "2018", "2022"))
```

<!-- explain data -->
<!-- tm_facets() -->

## Specifying facets

<!-- two approaches -- variables (e.g., columns) vs values in one variable -->
<!-- + a mix of both approaches -->

Facet can be based on data coming from various sources: it can be a set of variables (e.g., columns in an `sf` object) or a single variable with multiple values.

The first approach is seen below, where we specify multiple variables (`c("pop_dens", "gdppercap", "tourism")`) from the `slo_regions` dataset to create facets. 
Each variable is displayed in its own facet with a separate scale and legend (@fig-facets1).
This allows for quick comparison of different variables across the same regions.

```{r}
#| label: fig-facets1
#| fig-cap: "Facets for different variables."
#| fig-asp: 0.5
tm_shape(slo_regions) +
  tm_polygons(c("pop_dens", "gdppercap", "tourism"))
```

The second approach uses a single variable to create facets, where each facet represents a unique value of that variable.
Here, we need to use `tm_facets()` to specify the faceting variable.
This function creates a grid of panels, each showing the data for a specific value of the variable (here `"time"`), and also allows to specify the layout of the facets (e.g., number of columns) (@fig-facets2).
In such cases, all of the facets share the same scale and legend, which is useful, for example, for comparing the same variable across different times.

```{r}
#| label: fig-facets2
#| fig-cap: "Facets for one variable over time."
#| fig-asp: 0.45
tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets(by = "time", ncol = 5)
```

Both approaches can be combined, allowing to create facets for multiple variables over time (@fig-facets3).
Here, variables specified as a visual variable (`c("pop_dens", "gdppercap", "tourism")`) and show in columns, while the faceting variable is set with `tm_facets(by = "time")` and presents the data for each year in a separate row.

```{r}
#| label: fig-facets3
#| fig-cap: "Facets for multiple variables over time."
#| fig-asp: 1.2
tm_shape(slo_regions_ts) +
  tm_polygons(c("pop_dens", "gdppercap", "tourism")) +
  tm_facets(by = "time")
```

## Imporance of layers order for faceting

The placement of the `tm_facets()` function in the code is crucial for how facets are applied to the map.
When presenting multiple layers in a map, the `tm_facets()` function must be defined after the layer to be faceted.

Moreover, the order of layers is essential when using facets for two reasons:

1. The first layer in the map is used to determine the extent of the map.
2. Each layer lies on top of the previous one, so the last layer is the one that is in the foreground.

@fig-facets4 has the `slo_borders` layer first, which means that the borders of Slovenia are drawn first -- each facet will have the same extent and the borders will be visible in each facet.
Next, the `slo_regions_ts` layer is added and faceted by the `region_group` variable.
This results in a map where each facet shows the GDP per capita for different region groups with the borders of Slovenia in the background.

```{r}
#| label: fig-facets4
#| fig-cap: "Facets for one variable for different region groups."
#| fig-asp: 0.4
tm_shape(slo_borders) +
  tm_borders(lwd = 4) +
  tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets(by = "region_group", nrow = 2)
```

On the other hand, @fig-facets5 has the `slo_regions_ts` layer first, which means that the GDP per capita is drawn first and then the borders of Slovenia are added.
This results in a map where each facet zooms into a specific region group, showing the GDP per capita for that group.

```{r}
#| label: fig-facets5
#| fig-cap: "Facets for one variable limiting the view to a specific region group."
tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets(by = "region_group", nrow = 2) +
  tm_shape(slo_borders) +
  tm_borders(lwd = 4)
```

What to do in case we want to keep the borders layer on the top, but also have its extent in every panel?
In this case, we may either set the `slo_borders` layer as a main one (`tm_shape(slo_borders, is.main = TRUE)`; @sec-shapes-hierarchy) or set the `free.coords` argument of `tm_facets()` to FALSE -- then each facet will use the complete extent of the provided `slo_regions_ts` data.

```{r}
#| eval: false
#| label: fig-facets6
#| fig-cap: "Facets for one variable with free coordinates."
tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets(by = "region_group", nrow = 2, free.coords = FALSE) +
  tm_shape(slo_borders) +
  tm_borders(lwd = 4)
```

## Facets types

All of the above examples use the `tm_facets()` function.
This is a general function that can be used to create facets for various types of data.
At the same time, **tmap** provides several specialized functions for creating facets that can be used to create more complex faceting layouts.

The most common ones are:

- `tm_facets_wrap()` -- creates facets that wrap around the specified variable -- it can be thought as a one-dimensional grid of panels
- `tm_facets_grid()` -- creates facets in a two-dimensional grid, where the specified variables define the rows and columns

@fig-facets7 shows how to use `tm_facets_wrap()` to create facets for the `region_group` variable, wrapping the panels into two rows.
By default, the panels are filled from left to right, and then from top to bottom, but we can change this behavior by setting the `byrow` argument to `FALSE`.

```{r}
#| label: fig-facets7
#| fig-cap: "Facets for one variable with wrapping."
#| fig-asp: 0.4
tm_shape(slo_borders) +
  tm_borders(lwd = 4) +
  tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets_wrap(by = "region_group", nrow = 2, byrow = FALSE)
```

Two-dimensional facets are shown in @fig-facets8, where the `region_group` variable is used for the rows and the `time` variable for the columns.

```{r}
#| label: fig-facets8
#| fig-cap: "Two-dimensional facets for one variable in various region groups over time."
#| fig-asp: 0.7
tm_shape(slo_borders) +
  tm_borders(lwd = 4) +
  tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets_grid(rows = "region_group", columns = "time")
```

<!-- any other crucial arguments? -->

<!-- mention the rest -->
<!-- Martijn, should I add some content of any other of the facets type? -->
<!-- tm_facets_stack(by = "VARS__", orientation = NA, ...) -->
<!-- tm_facets_hstack(by = "VARS__", ...) -->
<!-- tm_facets_vstack(by = "VARS__", ...) -->
<!-- tm_facets_pagewise(by = "VARS__", byrow = TRUE, ...) -->
<!-- tm_facets_flip(...) -->

## Customizing facets

<!-- tm_xlab and tm_ylab for better labels -->
```{r}
#| label: fig-facets9
#| fig-cap: "Two-dimensional facets with labeled axes."
#| fig-asp: 0.7
tm_shape(slo_borders) +
  tm_borders(lwd = 4) +
  tm_shape(slo_regions_ts) +
  tm_polygons("gdppercap") +
  tm_facets_grid(rows = "region_group", columns = "time") +
  tm_xlab("Year", side = "top", size = 2, space = 1) +
  tm_ylab("Region", rotation = 90, size = 2, space = 1)
```


<!-- Raster data -- where to add it in this section: either mix with the other content or after it -->
<!-- show how to add colors independently to each raster panel -->

```{r}
#| message: false
library(stars)
slo_tavg = read_stars("data/slovenia/slo_tavg.tif")
slo_elev = read_stars("data/slovenia/slo_elev.tif")
```

```{r}
#| label: fig-facets10
#| fig-cap: "Facets for raster data."
#| message: false
#| fig.asp: 1.1
tm_shape(slo_tavg) +
  tm_raster() +
  tm_facets(by = "band", ncol = 3) +
  tm_layout(panel.labels = c(1:12))
```

```{r}
#| label: fig-facets11
#| fig-cap: "Facets for raster data independent legends."
#| message: false
#| fig.asp: 1.1
tm_shape(slo_tavg) +
  tm_raster(
    col.scale = tm_scale_continuous(values = "viridis"),
    col.legend = tm_legend(title = ""),
    col.free = TRUE) +
  tm_facets(by = "band", ncol = 3) +
  tm_layout(panel.labels = c(1:12),
            inner.margins = c(0.02, 0.2, 0.02, 0.02)) +
  tm_title("Average monthly temperature in Slovenia") 
```

<!-- mixing with vector data -->

```{r}
#| label: fig-facets12
#| fig-cap: "Facets with raster data and vector data."
#| message: false
tm_shape(slo_elev) +
  tm_raster() +
  tm_shape(slo_regions, is.main = TRUE) + 
  tm_borders(lwd = 4) +
  tm_facets(by = "region_group", free.coords = TRUE)
```

```{r facets-16}
#| eval: false
#| echo: false
tm_shape(slo_regions, is.main = TRUE) + 
  tm_borders(lwd = 4) +
  tm_facets(by = "region_group", free.coords = TRUE) +
  tm_shape(slo_elev) +
  tm_raster()
```
